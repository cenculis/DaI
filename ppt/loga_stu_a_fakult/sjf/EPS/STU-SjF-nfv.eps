%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: STU-SjF-nfv.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Juraj Blako
%%CreationDate: 9.10.2012
%%BoundingBox: 0 0 102 52
%%HiResBoundingBox: 0 0 101.6084 51.2701
%%CropBox: 0 0 101.6084 51.2701
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 68 8%%BeginData: 8066 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45A82E52A8FD07FF525252FD07FFA8522784FD07FF7E2852A8FD0AFF%7DF827F8277DFD04FF5227272728272752FD04FF7DF853FFFFFF52F8A8FD%33FF27522752FD06FF7D2827287DFD06FF59272E27FD06FFA827522759FD%09FF52F8F8F827F87DFD04FFF827F8F8F827F852FD04FF522727FFFFFFF8%F87DFD33FF52275252FD06FFA8275227A8FD06FF52522852A8FD05FFA852%272E59FD09FFF82752FFA8A8FD07FF7DF827A8FD06FF59F852FFFFFF27F8%84FD33FF7D522EA8FD06FFA87D2859A8FD06FFA82E527DFD07FF7D522EA9%FD08FFA827F852FD0AFF7D27F8FD07FF52F827FFFFFFF8277DFD54FFAFFD%0BFF5227F8277DFD08FFA8F827FD07FF7DF852FFFFFF27F8A8FD60FFA827%27F8F827FD07FF7D27F8FD07FF52F827FFFFFFF8277DFD62FF7D27F82752%FD06FF84F827FD07FF7DF852FFFFFF27F8A8FD63FFA827F852FD06FF7DF8%F8FD07FF522727FFFFFFF8F87DFD60FF7DA8A8A8272752FD06FFA8F827FD%07FF7DF8277DFF7D27F8A8FD5FFFA827F8F8F827F8A8FD06FF7DF8F8FD07%FFA827F8F8F827F827FD35FFA8FD0AFFAFFD0AFFA8FD09FFA8FD0BFF5252%272727A8FD07FFA82752FD08FFA8522727277DFD35FF7D2E27A8FD06FFA8%592752A8FD06FFA827527DFD07FF592E28A8FD0CFFA8FD17FFA8FD37FF52%285252FD06FFA8275227A8FD06FF52522E52A8FD05FFA852285253FD5CFF%282E2753FD06FF7D2E27277DFD06FF59272E28FD06FFAF272E277DFD5CFF%A85253A8FD07FF595259FD07FFA8532EA8FD07FFA85259A8FD0BFFA8FD13%FFA8FD48FFA8FD21FF27F8F82752FD05FFA8A8FD05FF7EF827F8F8F87DFD%67FF522752A8527DFD05FF52F8FD05FF7D27527D7D7DA8FD66FFA82752FD%09FF7D7DAFFD04FF7DF8FD6CFFF827FD08FFAFFFAFFD05FF7D27A8FD6BFF%7DF8277DFD06FF59F827A8FD04FF7DF87D7D7DA8FD69FFA8F82727FD06FF%7DF8FD05FF7D27F827F87DFD3CFFA8A8FD09FFA8FD09FFA8A8FD09FFA8A8%FD0DFF52F827FD05FF7DF8A8FD04FF7DF8A8A8AFA8FD3BFF7E28527DFD07%FF525252FD07FF8452277DFD07FF7D2852A8FD0DFF5227A8FD04FFA8F8AF%FD04FF7D27A8FD3EFF27522752A8FD05FF7D2727287DFD06FF53272E27FD%06FFA827522759FD0DFF52F8FD05FF7D27A8FD04FF7DF8A8FD3EFF52282E%52FD06FFA8275227A8FD06FF532E2752FD06FFA852282E59FD09FF275252%52F852FD05FFA8F8FD05FF7D27A8FD3EFF7E5352A8FD07FF7D2E7DFD08FF%52527DFD07FF7D5252FD09FFA85227272759FD06FF7D27A8FD04FFA827FD%77FF7DF8FD7CFFA87DF8F8A8FD7CFF27287DFDFCFFFDFCFFFDFCFFFDFCFF%FDFCFFFD5EFFA8FFFFFFA8FD29FFA852A8FD37FF7D52FD13FFA884A8FFFF%A8A8FD04FFA87DA8FFFFFFA8FFFFA8FFFFFF7D7E7DFFFFA8A8FFA8FFFFFF%A8A87DFFFFFF7DFFA8A8FFFFFF5252FD07FF7DA87DA8FFFFA8A87DA8FFFF%FFA87DA8FFFFA8FFFFA8FFFFFFA8FFFFA8FFFFFFA8FFFFFFA8A87DFFFFFF%A8FF7DFD04FF527DFD12FF5227277DFFFF2752FFFFFF7DF827F87DFFFFF8%A8A827A8FF52272752FFFF2727A8277DFFA827F828A8FF7D277D277DFFFF%FFF827FD07FF52F82727FFFF52F85253FFFF7DF82752FFFF277DFFF8A8FF%A8F87DA827A8FF5227FFFFA827F827A8FF52527DF8A8FFFFA8F852FD12FF%52F8FD04FF5252FFFFFF2752FF5227FFFF52597E27FFFF7D27FD04FF52F8%7D277DFFFFF87DFFFFFFA8272752FFFFFF7D2721A8FD07FF5252FFFFFF27%52FD04FFF87DFD04FF277DA8277DFFA82727A827FFFF7D27FFFF5327FD04%FF7D27277DFFFFFF522727FD12FFA827F87DFFFF277DFFFFFF2752FF5227%FFFF52272752FFFF52F8277EFFFFFD04277DFFFF7DF827A8FF7D27F8A8FF%FFFF52272752FD07FF2852FFFFFF52F852A8FFA827A8FD04FF27F827F8A8%FFA827522752FFFF5227FFFF2752FD04FF52F8F8FFFFFFA82752277DFD12%FFA82727FFFF5252FFFFFF2752FF5252FFFFFFF827A8FFFF7D27FD04FF52%7D7DF8A8FFFFA87DF8A8FFA8F82827FFFFFFF827F852FD07FF5252FFFFFF%2753FD04FFF852A8FFFFFF277DFF277DFFA827A82727FFFF7D27FFFF7DF8%FFA8FFFF7D272752FFFFA8F827F87DFD11FF5227F87DFFFF2727277DFFA8%F827F8A8FFFFFF2727FFFFFF7DF82752FFFF277DA8F87DFFA827F827A8FF%7D27A8217DFF7D27A8A8F8A8FD06FF5252FFFFFF52F82753FFFFA8F82152%FFFF277DFF27A8FFA827FF5227FFFF5252FFFFA827F827A8FF52527D27A8%FF5252AF7D27FD12FFA8FD05FFA8A8A8FFFFFFA8FD05FFA8FD05FFA8A8A8%FFFFFFA8FFA8FFFFFFA8A8AFFFFFFFA8FFA8FFFFFFA8FD0BFFA8FFFFFFA8%A8A8FD05FFA8FFFFFFA8FD09FFA8FFFFFFA8FD04FFA8A8FFFFFFA8FFA8FF%FFFFA8FFFFA8FD7DFFA8FDFCFFFD18FFA8FFA8FFFFFFA8FD09FFA8FFFFFF%A8FFFFFFA8A8A8FFFFFFA8FD04FFFD04A8FD05FFFD05A8FFFFFFA8FD07FF%A8FFFFFFA8FD07FFA8FD05FFA8A8FD06FFA8FFFFFFA8A8A8FFFFFFA8FD04%FFA8A8FFFFFFA8FD05FFA8FD07FFA8FFFFFFA8A8A82852FF2852FFA82752%FFF8A8FFA8F8A8FF5227FF5252FFFF2721F87DFFA8F827F8A8FFFF2727F8%52FFFFF8A8FF7DF827F87DFFFF52F87EFD06FF7DF8FF7D27FD06FF27F8F8%7DFFFF7D27F827A8FFFFFFF827FFFF7D27F8F852FFA8277DFFA827F827A8%FF7D27FD05FF27F8FFFFFFF87DFF277DFF7DF8F8275252FF277DFFFF2727%A827A8FFA827A8FF7D27A8527DFFFF2752FFFFFFA827A82752FFFFFF7D27%7DFFFF27A8FFFFA8F8A8FFFFFF27F87DFD06FFA827A85252FD06FF52527D%27FFFF7D27FFF87DFFFFA827F8A8FFFFA8277DFFFFFFF8A8FFA8F87DFFFF%FF7D27FD04FFA8F827A8FFFF5252A8F8FFFF7D00FFA82752FF5252FFFF2E%005227A8FFA8F8A8FFFFF87D27A8FFFF272127FFFFA8F852F8A8FFFFFF27%52FFFFFFF8A8FFFFA827A8FFFFA8275227FD07FF277D27A8FD06FF2727F8%7DFFFF7D272727A8FFFF52275252FFFFFF277DFFFFA8277DFFFF52F87DFF%FF7D27FD04FF52522752FFFF7D27522EFFFF7DF8F87D5228FF277DFFFF27%7D2727A8FFA827A8FFFF52F852FFFFFF2752FFFFFFA8272727FFFFFF7DF8%FD04FF277DFFFFA8F8FFFFFF52272727A8FD06FF7DF827FD07FF52527D27%FFFF7D272752FFFFFF2727F852FFFFFF277DFFFFFFF8A8FFFFFF7DF8A8FF%7D27FD04FF52272727FFFFFFF8277DFFFF7D27A8A87D2727F87DFFFF277D%7DF8A8FFA8F8A8FFFF7DF852FFFFFFF827277DFFA8F8A8F87DFFFFF82727%7DFFFFF8A8FFFFA8F8A8FFFF2752A8F87DFD06FF7DF827FD07FF2727F827%A8FF7D277D277DFFA8277D7DF8A8FFFFF87DFFFFA8277DFFA8272127A8FF%7DF82752FFA8F87D7DF87DFFFF27F8A8FFFF7D272752FFA87DA8FFFFFF7D%FFFFA8FFFFFFA8FD04FF7DFD04FFA87D7DA8FFFFA8FFA87DFFFFA87D7DA8%FFFFA8A8FFFFFF7DFFFFFF7DFFFFA8A8FD07FF7DFD08FFA87DA8A8FFFFFF%7DFF7DA8FFFF7DFFFFA8A8FFFFA8A8FFFFFF7DFFFFFF7D7DA8FFFFFF7D7D%7DFFA8A8FFFF7DFFFFFFA8A8FD04FF7D7D7DFDFCFFFD26FFA8A8FD5DFFA8%FD11FFAFFD0EFF7D7DFFFFFFA8FD58FF7D5227A8FFA8275252FFFF7D5252%A8FFFF7D27527DFFFFFF7DA8FFFF27FF7E7DFFFF52FFFFFF525252FFFF7D%A87D52FFFFFF277DFD06FF8452527DFFFF7D52FFFFFF7D7DA852FFFF7DA8%FF52FFFF7D7DFFFFA8525252A8FFFF287DFD22FF527DFD04FFA852FFFFFF%27FF5252FFFF27FFA827FFFFFF7D7DFFA8277DA852FFFF52A8FFA827A8FF%FFFF527D27FFFFFFA82727FD06FFA852FD04FF5227FFFFFF525227FFFFFF%27A8FF52A8FF7D7DFD04FF27FFFFFFA82727FD22FF7D277DFFFFFFA852FF%FFFF5252527DFF7D52FFFF27A8FFFF527DFFFF27525252FFFF27A8FF7D52%FD04FF52F8A8FFFFFF7D7D52A8FD05FF7D2752A9FFA8527D7DFFFF7DF8A8%FFFFFF52A8FF52FFFF7D7DFFFFFFA828A8FFFF7D5252A8FD22FFA8277DFF%FFA852FFFFFF525227FFFFFF27FFFF52A8FFFF7D7DFFA87D7D2752FFFF52%A8FF7D53FD04FF522753FFFFFF5252277DFD05FFA827A8FFFF7D525252FF%FF7D2752FFFFFF52FFFF52FFFF7D7EFD04FF27FFFFFF5252277DFD21FF7D%A8277DFFFF7E52FFFFFF52A8527DFFFF28527D27FFFFA8F8A8FFFF27FF27%52FFFF27A8FFFF277D7DFFFF527D527DFFA8527D7D27FD05FF7D52FFFFFF%5252A827FFFF7D525252FFFF52527D27FFFF7D52A8A8FFFF27A8FFA8277D%7D27FD21FFA8527DFD04FF7DFFFFFF7DFFA8A8FFFFA87D52FFFFFF7D7DFF%FFFFA8FFA87DFFFFA8A8FFFFA8527DFFFF7DFFA87DFFFF7DFFFF7DFD06FF%7DFFFFFF7DFFFFA8A8FF7DA8FF7DFFFFA87D52A8FFFFA87D52A8FFFF7DFF%FFFF7DFFFF7DFD6BFFA8FD34FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                             
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:ModifyDate>2012-10-09T16:46:43+02:00</xmp:ModifyDate>
         <xmp:CreateDate>2012-10-09T16:46:43+02:00</xmp:CreateDate>
         <xmp:MetadataDate>2012-10-09T16:46:43+02:00</xmp:MetadataDate>
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>132</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAhAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8AC2Nj+YI/MCImO7/xILsG&#xA;WUhq15fEzN9n06f7Hj7Za0vrPKm5gX52w+YJvIdwmjCRm9VDfLDXmbUBuYHHenLjyp+zXtko82Mu&#xA;TBP+ccrfzHFqepmRJo9DMFCHDCM3XNeHCv7Xp8uVPavbDNjB7xkGx86/85BWvmaTzbC8sc0mkegg&#xA;08oGaINv6g2+H1OXXvSmWR5Ncub178q49dj8h6Wuuep9eCP8M9fVEXNvSD13rwp17ZCXNlHkyi6+&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Untitled-4</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:00A1A1F008206811945780C5360C7B74</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:00A1A1F008206811945780C5360C7B74</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:OriginalDocumentID>uuid:87165475-f76c-ad46-b672-b6a9e237092d</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:FFA0A1F008206811945780C5360C7B74</stRef:instanceID>
            <stRef:documentID>xmp.did:FFA0A1F008206811945780C5360C7B74</stRef:documentID>
            <stRef:originalDocumentID>uuid:87165475-f76c-ad46-b672-b6a9e237092d</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FFA0A1F008206811945780C5360C7B74</stEvt:instanceID>
                  <stEvt:when>2012-10-09T16:46:29+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:00A1A1F008206811945780C5360C7B74</stEvt:instanceID>
                  <stEvt:when>2012-10-09T16:46:43+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 9.90</pdf:Producer>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>50.219157</stDim:w>
            <stDim:h>26.177041</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>SjF_CMYK</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>20.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>70.000000</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -51.27 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 51.27 li
101.608 51.27 li
101.608 0 li
cp
clp
[1 0 0 1 0 0 ]ct
.229492 35.2339 mo
.484375 34.6499 li
.501465 34.6108 .535156 34.5933 .580566 34.6108 cv
.818359 34.7183 1.0166 34.7974 1.40723 34.7974 cv
1.74658 34.7974 1.95068 34.6499 1.95068 34.4009 cv
1.95068 34.1694 1.8374 34.0503 1.28809 33.8071 cv
.580566 33.5073 .274902 33.1333 .274902 32.5278 cv
.274902 31.8647 .772949 31.3726 1.6167 31.3726 cv
2.16553 31.3726 2.40332 31.4126 2.81689 31.5933 cv
2.86768 31.6108 2.86768 31.6499 2.85059 31.6899 cv
2.58447 32.2104 li
2.56787 32.2505 2.53369 32.2729 2.48291 32.2505 cv
2.26172 32.1597 2.03564 32.1138 1.76953 32.1138 cv
1.40723 32.1138 1.24854 32.2729 1.24854 32.5044 cv
1.24854 32.731 1.3335 32.8384 1.93945 33.0825 cv
2.64697 33.3823 2.91846 33.7329 2.91846 34.311 cv
2.91846 35.103 2.3584 35.5396 1.48633 35.5396 cv
1.0166 35.5396 .648438 35.4995 .263672 35.3013 cv
.229492 35.2788 .218262 35.2563 .229492 35.2339 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
f
5.85547 34.73 mo
5.85547 34.7583 5.86719 34.7749 5.89551 34.7749 cv
7.38428 34.7749 li
7.4292 34.7749 7.45215 34.7974 7.45215 34.8481 cv
7.45215 35.4263 li
7.45215 35.4771 7.4292 35.4995 7.38428 35.4995 cv
5.03467 35.4995 li
4.98389 35.4995 4.96143 35.4771 4.96143 35.4263 cv
4.96143 31.4858 li
4.96143 31.4351 4.98389 31.4126 5.03467 31.4126 cv
5.79346 31.4126 li
5.83301 31.4126 5.85547 31.4351 5.85547 31.4858 cv
5.85547 34.73 li
cp
f
10.7002 32.0972 mo
10.1567 32.0972 9.8623 32.5386 9.8623 33.4507 cv
9.8623 34.3784 10.1509 34.8149 10.6943 34.8149 cv
11.2319 34.8149 11.5264 34.3784 11.5264 33.4556 cv
11.5264 32.5327 11.2266 32.0972 10.7002 32.0972 cv
cp
10.6943 35.5396 mo
9.33594 35.5396 8.92822 34.7974 8.92822 33.4556 cv
8.92822 32.103 9.33594 31.3726 10.6943 31.3726 cv
12.0527 31.3726 12.4604 32.1089 12.4604 33.4507 cv
12.4604 34.8032 12.0527 35.5396 10.6943 35.5396 cv
cp
f
15.4097 35.4995 mo
15.3813 35.4995 15.3643 35.4829 15.353 35.4487 cv
14.1982 31.5024 li
14.1812 31.4517 14.2095 31.4126 14.2544 31.4126 cv
15.0811 31.4126 li
15.1265 31.4126 15.1318 31.4292 15.1489 31.4692 cv
15.9473 34.605 li
16.7456 31.4692 li
16.7568 31.4292 16.7793 31.4126 16.8188 31.4126 cv
17.5552 31.4126 li
17.606 31.4126 17.6284 31.4409 17.6172 31.4917 cv
16.4565 35.4487 li
16.4453 35.4829 16.4229 35.4995 16.3887 35.4995 cv
15.4097 35.4995 li
cp
f
20.4072 33.0933 mo
21.6699 33.0933 li
21.7207 33.0933 21.749 33.1167 21.749 33.1616 cv
21.749 33.7505 li
21.749 33.7896 21.7207 33.813 21.6699 33.813 cv
20.4072 33.813 li
20.4072 34.73 li
20.4072 34.7583 20.4189 34.7749 20.4473 34.7749 cv
22.0376 34.7749 li
22.0889 34.7749 22.1113 34.7974 22.1113 34.8433 cv
22.1113 35.4263 li
22.1113 35.4771 22.0889 35.4995 22.0376 35.4995 cv
19.5864 35.4995 li
19.5356 35.4995 19.5132 35.4771 19.5132 35.4263 cv
19.5132 31.4858 li
19.5132 31.4351 19.5356 31.4126 19.5864 31.4126 cv
22.0376 31.4126 li
22.0889 31.4126 22.1113 31.4351 22.1113 31.4858 cv
22.1113 32.063 li
22.1113 32.1138 22.0889 32.1372 22.0376 32.1372 cv
20.4473 32.1372 li
20.4189 32.1372 20.4072 32.1538 20.4072 32.1821 cv
20.4072 33.0933 li
cp
f
26.3506 34.1636 mo
26.3506 31.4858 li
26.3506 31.4351 26.3677 31.4126 26.4072 31.4126 cv
27.1372 31.4126 li
27.1826 31.4126 27.2056 31.4351 27.2056 31.4858 cv
27.2056 35.4263 li
27.2056 35.4771 27.1826 35.4995 27.1372 35.4995 cv
26.3447 35.4995 li
26.2939 35.4995 26.2827 35.4937 26.2656 35.4546 cv
24.9521 32.7485 li
24.9521 35.4263 li
24.9521 35.4771 24.9297 35.4995 24.8843 35.4995 cv
24.1709 35.4995 li
24.1201 35.4995 24.0977 35.4771 24.0977 35.4263 cv
24.0977 31.4858 li
24.0977 31.4351 24.1201 31.4126 24.1709 31.4126 cv
24.9521 31.4126 li
25.0034 31.4126 25.0146 31.4175 25.0317 31.4575 cv
26.3506 34.1636 li
cp
f
29.2539 35.2339 mo
29.5088 34.6499 li
29.5259 34.6108 29.5596 34.5933 29.605 34.6108 cv
29.8428 34.7183 30.041 34.7974 30.4316 34.7974 cv
30.771 34.7974 30.9751 34.6499 30.9751 34.4009 cv
30.9751 34.1694 30.8618 34.0503 30.3125 33.8071 cv
29.605 33.5073 29.2993 33.1333 29.2993 32.5278 cv
29.2993 31.8647 29.7974 31.3726 30.6411 31.3726 cv
31.1899 31.3726 31.4277 31.4126 31.8413 31.5933 cv
31.8921 31.6108 31.8921 31.6499 31.875 31.6899 cv
31.6089 32.2104 li
31.5923 32.2505 31.5581 32.2729 31.5073 32.2505 cv
31.2861 32.1597 31.0601 32.1138 30.7939 32.1138 cv
30.4316 32.1138 30.2729 32.2729 30.2729 32.5044 cv
30.2729 32.731 30.3579 32.8384 30.9639 33.0825 cv
31.6714 33.3823 31.9429 33.7329 31.9429 34.311 cv
31.9429 35.103 31.3828 35.5396 30.5107 35.5396 cv
30.041 35.5396 29.6729 35.4995 29.2881 35.3013 cv
29.2539 35.2788 29.2427 35.2563 29.2539 35.2339 cv
cp
f
35.627 33.479 mo
37.0313 35.3979 li
37.0596 35.4429 37.0313 35.4995 36.9858 35.4995 cv
36.0176 35.4995 li
35.9951 35.4995 35.978 35.4878 35.9668 35.4712 cv
34.874 33.7671 li
34.874 35.4263 li
34.874 35.4771 34.8516 35.4995 34.812 35.4995 cv
34.0532 35.4995 li
34.0024 35.4995 33.98 35.4771 33.98 35.4263 cv
33.98 31.4858 li
33.98 31.4351 34.0024 31.4126 34.0532 31.4126 cv
34.812 31.4126 li
34.8516 31.4126 34.874 31.4351 34.874 31.4858 cv
34.874 33.2808 li
35.9556 31.4409 li
35.9668 31.4233 35.9839 31.4126 36.0063 31.4126 cv
36.8784 31.4126 li
36.9404 31.4126 36.9575 31.4692 36.9292 31.5142 cv
35.627 33.479 li
cp
f
40.1152 31.1919 mo
40.0815 31.2085 40.0586 31.1968 40.042 31.1685 cv
39.9287 30.9312 li
39.9116 30.9087 39.9229 30.8862 39.957 30.8628 cv
41.0381 30.1841 li
41.061 30.1665 41.1006 30.1665 41.1177 30.2065 cv
41.3438 30.6704 li
41.3608 30.6987 41.3608 30.7329 41.3213 30.7495 cv
40.1152 31.1919 li
cp
40.8003 33.9204 mo
40.3477 32.3521 li
39.8945 33.9204 li
40.8003 33.9204 li
cp
39.6909 34.6392 mo
39.4644 35.4487 li
39.4473 35.4829 39.4248 35.4995 39.3906 35.4995 cv
38.6548 35.4995 li
38.6152 35.4995 38.5869 35.4653 38.604 35.4263 cv
39.8496 31.4409 li
39.8496 31.4233 39.8662 31.4126 39.8945 31.4126 cv
40.8965 31.4126 li
40.9136 31.4126 40.9307 31.4233 40.9419 31.4517 cv
42.1763 35.4263 li
42.1929 35.4653 42.1646 35.4995 42.125 35.4995 cv
41.3042 35.4995 li
41.2705 35.4995 41.2476 35.4829 41.2305 35.4487 cv
41.0044 34.6392 li
39.6909 34.6392 li
cp
f
48.0718 35.4995 mo
48.0322 35.4995 48.0098 35.4771 48.0098 35.4263 cv
48.0098 32.1821 li
48.0098 32.1538 47.9927 32.1372 47.9644 32.1372 cv
47.019 32.1372 li
46.9678 32.1372 46.9453 32.1138 46.9453 32.063 cv
46.9453 31.4858 li
46.9453 31.4351 46.9678 31.4126 47.019 31.4126 cv
49.9058 31.4126 li
49.9512 31.4126 49.9741 31.4351 49.9741 31.4858 cv
49.9741 32.063 li
49.9741 32.1138 49.9512 32.1372 49.9058 32.1372 cv
48.9434 32.1372 li
48.9155 32.1372 48.9038 32.1538 48.9038 32.1821 cv
48.9038 35.4263 li
48.9038 35.4771 48.8813 35.4995 48.8306 35.4995 cv
48.0718 35.4995 li
cp
f
52.769 33.0933 mo
54.0317 33.0933 li
54.0825 33.0933 54.1108 33.1167 54.1108 33.1616 cv
54.1108 33.7505 li
54.1108 33.7896 54.0825 33.813 54.0317 33.813 cv
52.769 33.813 li
52.769 34.73 li
52.769 34.7583 52.7808 34.7749 52.8091 34.7749 cv
54.3994 34.7749 li
54.4507 34.7749 54.4731 34.7974 54.4731 34.8433 cv
54.4731 35.4263 li
54.4731 35.4771 54.4507 35.4995 54.3994 35.4995 cv
51.9482 35.4995 li
51.8975 35.4995 51.875 35.4771 51.875 35.4263 cv
51.875 31.4858 li
51.875 31.4351 51.8975 31.4126 51.9482 31.4126 cv
54.3994 31.4126 li
54.4507 31.4126 54.4731 31.4351 54.4731 31.4858 cv
54.4731 32.063 li
54.4731 32.1138 54.4507 32.1372 54.3994 32.1372 cv
52.8091 32.1372 li
52.7808 32.1372 52.769 32.1538 52.769 32.1821 cv
52.769 33.0933 li
cp
f
58.2192 35.5396 mo
57.0474 35.5396 56.3457 34.7407 56.3457 33.4556 cv
56.3457 32.1704 57.0474 31.3726 58.2192 31.3726 cv
58.6948 31.3726 59.0005 31.4292 59.312 31.605 cv
59.3403 31.6216 59.3516 31.644 59.3516 31.6616 cv
59.3516 31.6782 59.3457 31.7007 59.3345 31.7231 cv
59.0684 32.2329 li
59.0518 32.2612 59.0347 32.2788 59.0176 32.2788 cv
59.0005 32.2788 58.9834 32.2729 58.9668 32.2671 cv
58.7402 32.1597 58.542 32.1196 58.293 32.1196 cv
57.8232 32.1196 57.2798 32.5103 57.2798 33.4556 cv
57.2798 34.4067 57.7949 34.7866 58.2988 34.7866 cv
58.4854 34.7866 58.7061 34.7632 58.9722 34.6333 cv
59.0117 34.6167 59.0459 34.6216 59.063 34.6558 cv
59.3403 35.1821 li
59.3687 35.228 59.3574 35.2671 59.312 35.2954 cv
58.9722 35.4878 58.6724 35.5396 58.2192 35.5396 cv
cp
f
62.2383 33.813 mo
62.21 33.813 62.1934 33.8296 62.1934 33.8579 cv
62.1934 35.4263 li
62.1934 35.4771 62.1709 35.4995 62.1309 35.4995 cv
61.3721 35.4995 li
61.3213 35.4995 61.2988 35.4771 61.2988 35.4263 cv
61.2988 31.4858 li
61.2988 31.4351 61.3213 31.4126 61.3721 31.4126 cv
62.1309 31.4126 li
62.1709 31.4126 62.1934 31.4351 62.1934 31.4858 cv
62.1934 33.0483 li
62.1934 33.0767 62.21 33.0933 62.2383 33.0933 cv
63.4668 33.0933 li
63.4951 33.0933 63.5117 33.0767 63.5117 33.0483 cv
63.5117 31.4858 li
63.5117 31.4351 63.5352 31.4126 63.5801 31.4126 cv
64.3389 31.4126 li
64.3838 31.4126 64.4063 31.4351 64.4063 31.4858 cv
64.4063 35.4263 li
64.4063 35.4771 64.3838 35.4995 64.3389 35.4995 cv
63.5801 35.4995 li
63.5352 35.4995 63.5117 35.4771 63.5117 35.4263 cv
63.5117 33.8579 li
63.5117 33.8296 63.4951 33.813 63.4668 33.813 cv
62.2383 33.813 li
cp
f
68.8672 34.1636 mo
68.8672 31.4858 li
68.8672 31.4351 68.8838 31.4126 68.9238 31.4126 cv
69.6543 31.4126 li
69.6992 31.4126 69.7217 31.4351 69.7217 31.4858 cv
69.7217 35.4263 li
69.7217 35.4771 69.6992 35.4995 69.6543 35.4995 cv
68.8613 35.4995 li
68.8105 35.4995 68.7988 35.4937 68.7822 35.4546 cv
67.4688 32.7485 li
67.4688 35.4263 li
67.4688 35.4771 67.4463 35.4995 67.4014 35.4995 cv
66.6875 35.4995 li
66.6367 35.4995 66.6143 35.4771 66.6143 35.4263 cv
66.6143 31.4858 li
66.6143 31.4351 66.6367 31.4126 66.6875 31.4126 cv
67.4688 31.4126 li
67.5195 31.4126 67.5313 31.4175 67.5479 31.4575 cv
68.8672 34.1636 li
cp
f
72.7617 31.4126 mo
72.8018 31.4126 72.8242 31.4351 72.8242 31.4858 cv
72.8242 35.4263 li
72.8242 35.4771 72.8018 35.4995 72.7617 35.4995 cv
72.0029 35.4995 li
71.9521 35.4995 71.9297 35.4771 71.9297 35.4263 cv
71.9297 31.4858 li
71.9297 31.4351 71.9521 31.4126 72.0029 31.4126 cv
72.7617 31.4126 li
cp
f
76.7959 35.5396 mo
75.624 35.5396 74.9219 34.7407 74.9219 33.4556 cv
74.9219 32.1704 75.624 31.3726 76.7959 31.3726 cv
77.2715 31.3726 77.5771 31.4292 77.8877 31.605 cv
77.916 31.6216 77.9277 31.644 77.9277 31.6616 cv
77.9277 31.6782 77.9219 31.7007 77.9111 31.7231 cv
77.6445 32.2329 li
77.6279 32.2612 77.6104 32.2788 77.5938 32.2788 cv
77.5771 32.2788 77.5596 32.2729 77.543 32.2671 cv
77.3164 32.1597 77.1182 32.1196 76.8691 32.1196 cv
76.3994 32.1196 75.8555 32.5103 75.8555 33.4556 cv
75.8555 34.4067 76.3711 34.7866 76.875 34.7866 cv
77.0615 34.7866 77.2822 34.7632 77.5488 34.6333 cv
77.5879 34.6167 77.6221 34.6216 77.6387 34.6558 cv
77.916 35.1821 li
77.9443 35.228 77.9336 35.2671 77.8877 35.2954 cv
77.5488 35.4878 77.248 35.5396 76.7959 35.5396 cv
cp
f
81.5098 33.479 mo
82.9131 35.3979 li
82.9414 35.4429 82.9131 35.4995 82.8682 35.4995 cv
81.9004 35.4995 li
81.877 35.4995 81.8604 35.4878 81.8486 35.4712 cv
80.7568 33.7671 li
80.7568 35.4263 li
80.7568 35.4771 80.7334 35.4995 80.6943 35.4995 cv
79.9355 35.4995 li
79.8848 35.4995 79.8623 35.4771 79.8623 35.4263 cv
79.8623 31.4858 li
79.8623 31.4351 79.8848 31.4126 79.9355 31.4126 cv
80.6943 31.4126 li
80.7334 31.4126 80.7568 31.4351 80.7568 31.4858 cv
80.7568 33.2808 li
81.8379 31.4409 li
81.8486 31.4233 81.8662 31.4126 81.8887 31.4126 cv
82.7607 31.4126 li
82.8232 31.4126 82.8398 31.4692 82.8115 31.5142 cv
81.5098 33.479 li
cp
f
86.0039 31.1919 mo
85.9697 31.2085 85.9473 31.1968 85.9297 31.1685 cv
85.8164 30.9312 li
85.7998 30.9087 85.8115 30.8862 85.8447 30.8628 cv
86.9268 30.1841 li
86.9492 30.1665 86.9883 30.1665 87.0059 30.2065 cv
87.2324 30.6704 li
87.249 30.6987 87.249 30.7329 87.209 30.7495 cv
86.0039 31.1919 li
cp
86.6885 33.9204 mo
86.2354 32.3521 li
85.7832 33.9204 li
86.6885 33.9204 li
cp
85.5791 34.6392 mo
85.3525 35.4487 li
85.3359 35.4829 85.3135 35.4995 85.2793 35.4995 cv
84.543 35.4995 li
84.5039 35.4995 84.4756 35.4653 84.4922 35.4263 cv
85.7373 31.4409 li
85.7373 31.4233 85.7549 31.4126 85.7832 31.4126 cv
86.7852 31.4126 li
86.8018 31.4126 86.8184 31.4233 86.8301 31.4517 cv
88.0645 35.4263 li
88.0811 35.4653 88.0527 35.4995 88.0137 35.4995 cv
87.1924 35.4995 li
87.1582 35.4995 87.1357 35.4829 87.1191 35.4487 cv
86.8926 34.6392 li
85.5791 34.6392 li
cp
f
3.51318 42.1021 mo
3.51318 42.9009 3.06592 43.4048 1.95068 43.4048 cv
.84082 43.4048 .394043 42.9009 .394043 42.1021 cv
.394043 39.3511 li
.394043 39.3003 .416504 39.2778 .467285 39.2778 cv
1.22607 39.2778 li
1.26563 39.2778 1.28809 39.3003 1.28809 39.3511 cv
1.28809 42.0796 li
1.28809 42.4819 1.50928 42.6802 1.95068 42.6802 cv
2.39795 42.6802 2.61865 42.4819 2.61865 42.0796 cv
2.61865 39.3511 li
2.61865 39.3003 2.64111 39.2778 2.68652 39.2778 cv
3.45068 39.2778 li
3.49023 39.2778 3.51318 39.3003 3.51318 39.3511 cv
3.51318 42.1021 li
cp
f
7.97363 42.0288 mo
7.97363 39.3511 li
7.97363 39.3003 7.99072 39.2778 8.03027 39.2778 cv
8.76025 39.2778 li
8.80566 39.2778 8.82861 39.3003 8.82861 39.3511 cv
8.82861 43.2915 li
8.82861 43.3423 8.80566 43.3647 8.76025 43.3647 cv
7.96777 43.3647 li
7.91699 43.3647 7.90576 43.3589 7.88867 43.3198 cv
6.5752 40.6138 li
6.5752 43.2915 li
6.5752 43.3423 6.55273 43.3647 6.50732 43.3647 cv
5.79395 43.3647 li
5.74316 43.3647 5.7207 43.3423 5.7207 43.2915 cv
5.7207 39.3511 li
5.7207 39.3003 5.74316 39.2778 5.79395 39.2778 cv
6.5752 39.2778 li
6.62646 39.2778 6.6377 39.2827 6.65479 39.3228 cv
7.97363 42.0288 li
cp
f
11.8735 39.2778 mo
11.9131 39.2778 11.9355 39.3003 11.9355 39.3511 cv
11.9355 43.2915 li
11.9355 43.3423 11.9131 43.3647 11.8735 43.3647 cv
11.1147 43.3647 li
11.064 43.3647 11.0415 43.3423 11.0415 43.2915 cv
11.0415 39.3511 li
11.0415 39.3003 11.064 39.2778 11.1147 39.2778 cv
11.8735 39.2778 li
cp
f
15.0522 43.3647 mo
15.0239 43.3647 15.0068 43.3481 14.9956 43.314 cv
13.8408 39.3677 li
13.8237 39.3169 13.8521 39.2778 13.897 39.2778 cv
14.7236 39.2778 li
14.769 39.2778 14.7744 39.2944 14.7915 39.3345 cv
15.5898 42.4702 li
16.3882 39.3345 li
16.3994 39.2944 16.4219 39.2778 16.4614 39.2778 cv
17.1978 39.2778 li
17.2485 39.2778 17.271 39.3062 17.2598 39.3569 cv
16.0991 43.314 li
16.0879 43.3481 16.0654 43.3647 16.0313 43.3647 cv
15.0522 43.3647 li
cp
f
20.0557 40.9585 mo
21.3184 40.9585 li
21.3691 40.9585 21.3975 40.9819 21.3975 41.0269 cv
21.3975 41.6157 li
21.3975 41.6548 21.3691 41.6782 21.3184 41.6782 cv
20.0557 41.6782 li
20.0557 42.5952 li
20.0557 42.6235 20.0674 42.6401 20.0957 42.6401 cv
21.686 42.6401 li
21.7373 42.6401 21.7598 42.6626 21.7598 42.7085 cv
21.7598 43.2915 li
21.7598 43.3423 21.7373 43.3647 21.686 43.3647 cv
19.2349 43.3647 li
19.1841 43.3647 19.1616 43.3423 19.1616 43.2915 cv
19.1616 39.3511 li
19.1616 39.3003 19.1841 39.2778 19.2349 39.2778 cv
21.686 39.2778 li
21.7373 39.2778 21.7598 39.3003 21.7598 39.3511 cv
21.7598 39.9282 li
21.7598 39.979 21.7373 40.0024 21.686 40.0024 cv
20.0957 40.0024 li
20.0674 40.0024 20.0557 40.019 20.0557 40.0474 cv
20.0557 40.9585 li
cp
f
24.6396 41.106 mo
24.9854 41.106 li
25.3984 41.106 25.6533 40.9253 25.6533 40.5347 cv
25.6533 40.1665 25.438 40.0024 25.0078 40.0024 cv
24.6851 40.0024 li
24.6567 40.0024 24.6396 40.019 24.6396 40.0474 cv
24.6396 41.106 li
cp
24.6396 41.7456 mo
24.6396 43.2915 li
24.6396 43.3423 24.6172 43.3647 24.5776 43.3647 cv
23.8188 43.3647 li
23.7681 43.3647 23.7456 43.3423 23.7456 43.2915 cv
23.7456 39.3511 li
23.7456 39.3003 23.7681 39.2778 23.8188 39.2778 cv
25.1265 39.2778 li
26.1514 39.2778 26.5874 39.73 26.5874 40.5171 cv
26.5874 41.106 26.3101 41.5132 25.7666 41.6665 cv
26.7969 43.2573 li
26.8364 43.3198 26.8022 43.3647 26.7515 43.3647 cv
25.8511 43.3647 li
25.8228 43.3647 25.8062 43.353 25.8003 43.3364 cv
24.8774 41.7456 li
24.6396 41.7456 li
cp
f
31.3813 39.2778 mo
31.4268 39.2778 31.4492 39.3003 31.4492 39.3511 cv
31.4492 39.9282 li
31.4492 39.9565 31.4438 39.979 31.4268 40.0024 cv
29.6265 42.6401 li
31.3813 42.6401 li
31.4268 42.6401 31.4492 42.6626 31.4492 42.7026 cv
31.4492 43.2915 li
31.4492 43.3423 31.4268 43.3647 31.3813 43.3647 cv
28.6758 43.3647 li
28.6245 43.3647 28.6021 43.3423 28.6021 43.2915 cv
28.6021 42.7192 li
28.6021 42.7026 28.6133 42.6743 28.6304 42.646 cv
30.4189 40.0024 li
28.6758 40.0024 li
28.6245 40.0024 28.6021 39.979 28.6021 39.9341 cv
28.6021 39.3511 li
28.6021 39.3003 28.6245 39.2778 28.6758 39.2778 cv
31.3813 39.2778 li
cp
f
34.2676 39.2778 mo
34.3071 39.2778 34.3296 39.3003 34.3296 39.3511 cv
34.3296 43.2915 li
34.3296 43.3423 34.3071 43.3647 34.2676 43.3647 cv
33.5088 43.3647 li
33.458 43.3647 33.4355 43.3423 33.4355 43.2915 cv
33.4355 39.3511 li
33.4355 39.3003 33.458 39.2778 33.5088 39.2778 cv
34.2676 39.2778 li
cp
f
37.3618 43.3647 mo
37.3223 43.3647 37.2998 43.3423 37.2998 43.2915 cv
37.2998 40.0474 li
37.2998 40.019 37.2827 40.0024 37.2544 40.0024 cv
36.3091 40.0024 li
36.2578 40.0024 36.2354 39.979 36.2354 39.9282 cv
36.2354 39.3511 li
36.2354 39.3003 36.2578 39.2778 36.3091 39.2778 cv
39.1958 39.2778 li
39.2412 39.2778 39.2642 39.3003 39.2642 39.3511 cv
39.2642 39.9282 li
39.2642 39.979 39.2412 40.0024 39.1958 40.0024 cv
38.2334 40.0024 li
38.2056 40.0024 38.1938 40.019 38.1938 40.0474 cv
38.1938 43.2915 li
38.1938 43.3423 38.1714 43.3647 38.1206 43.3647 cv
37.3618 43.3647 li
cp
f
42.71 41.7856 mo
42.2573 40.2173 li
41.8042 41.7856 li
42.71 41.7856 li
cp
41.6006 42.5044 mo
41.374 43.314 li
41.3569 43.3481 41.3345 43.3647 41.3003 43.3647 cv
40.5645 43.3647 li
40.5249 43.3647 40.4966 43.3306 40.5137 43.2915 cv
41.7593 39.3062 li
41.7593 39.2886 41.7759 39.2778 41.8042 39.2778 cv
42.8062 39.2778 li
42.8232 39.2778 42.8403 39.2886 42.8516 39.3169 cv
44.0859 43.2915 li
44.1025 43.3306 44.0742 43.3647 44.0347 43.3647 cv
43.2139 43.3647 li
43.1802 43.3647 43.1572 43.3481 43.1401 43.314 cv
42.9141 42.5044 li
41.6006 42.5044 li
cp
f
50.0723 43.3647 mo
50.0439 43.3647 50.0269 43.3481 50.0156 43.314 cv
48.8604 39.3677 li
48.8438 39.3169 48.8721 39.2778 48.917 39.2778 cv
49.7437 39.2778 li
49.7891 39.2778 49.7944 39.2944 49.8115 39.3345 cv
50.6099 42.4702 li
51.4082 39.3345 li
51.4194 39.2944 51.4419 39.2778 51.4814 39.2778 cv
52.2178 39.2778 li
52.2686 39.2778 52.291 39.3062 52.2798 39.3569 cv
51.1191 43.314 li
51.1079 43.3481 51.0854 43.3647 51.0513 43.3647 cv
50.0723 43.3647 li
cp
f
58.2485 41.6382 mo
58.2485 42.5952 li
58.2485 42.6235 58.2603 42.6401 58.2886 42.6401 cv
58.7695 42.6401 li
59.0811 42.6401 59.3584 42.521 59.3584 42.1704 cv
59.3584 41.7905 59.1094 41.6382 58.5601 41.6382 cv
58.2485 41.6382 li
cp
58.2939 40.0024 mo
58.2656 40.0024 58.2485 40.019 58.2485 40.0474 cv
58.2485 40.9985 li
58.5825 40.9985 li
59.0527 40.9985 59.2905 40.8569 59.2905 40.4722 cv
59.2905 40.1099 59.0693 40.0024 58.6846 40.0024 cv
58.2939 40.0024 li
cp
58.5884 39.2778 mo
59.7148 39.2778 60.2246 39.606 60.2246 40.3813 cv
60.2246 40.7437 59.9868 41.1177 59.3921 41.2983 cv
60.0317 41.4741 60.292 41.8472 60.292 42.3687 cv
60.292 43.0933 59.811 43.3647 58.6279 43.3647 cv
57.4277 43.3647 li
57.377 43.3647 57.3545 43.3423 57.3545 43.2915 cv
57.3545 39.3511 li
57.3545 39.3003 57.377 39.2778 57.4277 39.2778 cv
58.5884 39.2778 li
cp
f
63.4004 41.106 mo
63.7451 41.106 li
64.1582 41.106 64.4131 40.9253 64.4131 40.5347 cv
64.4131 40.1665 64.1982 40.0024 63.7676 40.0024 cv
63.4453 40.0024 li
63.417 40.0024 63.4004 40.019 63.4004 40.0474 cv
63.4004 41.106 li
cp
63.4004 41.7456 mo
63.4004 43.2915 li
63.4004 43.3423 63.3779 43.3647 63.3379 43.3647 cv
62.5791 43.3647 li
62.5283 43.3647 62.5059 43.3423 62.5059 43.2915 cv
62.5059 39.3511 li
62.5059 39.3003 62.5283 39.2778 62.5791 39.2778 cv
63.8867 39.2778 li
64.9111 39.2778 65.3477 39.73 65.3477 40.5171 cv
65.3477 41.106 65.0703 41.5132 64.5264 41.6665 cv
65.5566 43.2573 li
65.5967 43.3198 65.5625 43.3647 65.5117 43.3647 cv
64.6113 43.3647 li
64.583 43.3647 64.5664 43.353 64.5605 43.3364 cv
63.6377 41.7456 li
63.4004 41.7456 li
cp
f
69.4736 41.7856 mo
69.0205 40.2173 li
68.5684 41.7856 li
69.4736 41.7856 li
cp
68.3643 42.5044 mo
68.1377 43.314 li
68.1211 43.3481 68.0986 43.3647 68.0645 43.3647 cv
67.3281 43.3647 li
67.2891 43.3647 67.2607 43.3306 67.2773 43.2915 cv
68.5225 39.3062 li
68.5225 39.2886 68.54 39.2778 68.5684 39.2778 cv
69.5703 39.2778 li
69.5869 39.2778 69.6035 39.2886 69.6152 39.3169 cv
70.8496 43.2915 li
70.8662 43.3306 70.8379 43.3647 70.7988 43.3647 cv
69.9775 43.3647 li
69.9434 43.3647 69.9209 43.3481 69.9043 43.314 cv
69.6777 42.5044 li
68.3643 42.5044 li
cp
f
73.2266 43.3647 mo
73.1865 43.3647 73.1641 43.3423 73.1641 43.2915 cv
73.1641 40.0474 li
73.1641 40.019 73.1465 40.0024 73.1182 40.0024 cv
72.1729 40.0024 li
72.1221 40.0024 72.0996 39.979 72.0996 39.9282 cv
72.0996 39.3511 li
72.0996 39.3003 72.1221 39.2778 72.1729 39.2778 cv
75.0605 39.2778 li
75.1055 39.2778 75.1279 39.3003 75.1279 39.3511 cv
75.1279 39.9282 li
75.1279 39.979 75.1055 40.0024 75.0605 40.0024 cv
74.0977 40.0024 li
74.0693 40.0024 74.0586 40.019 74.0586 40.0474 cv
74.0586 43.2915 li
74.0586 43.3423 74.0352 43.3647 73.9844 43.3647 cv
73.2266 43.3647 li
cp
f
77.8613 39.2778 mo
77.9014 39.2778 77.9238 39.3003 77.9238 39.3511 cv
77.9238 43.2915 li
77.9238 43.3423 77.9014 43.3647 77.8613 43.3647 cv
77.1025 43.3647 li
77.0518 43.3647 77.0293 43.3423 77.0293 43.2915 cv
77.0293 39.3511 li
77.0293 39.3003 77.0518 39.2778 77.1025 39.2778 cv
77.8613 39.2778 li
cp
f
79.9707 43.0991 mo
80.2256 42.5151 li
80.2422 42.4761 80.2764 42.4585 80.3213 42.4761 cv
80.5596 42.5835 80.7568 42.6626 81.1475 42.6626 cv
81.4873 42.6626 81.6914 42.5151 81.6914 42.2661 cv
81.6914 42.0347 81.5781 41.9155 81.0293 41.6724 cv
80.3213 41.3726 80.0156 40.9985 80.0156 40.3931 cv
80.0156 39.73 80.5137 39.2378 81.3574 39.2378 cv
81.9063 39.2378 82.1445 39.2778 82.5576 39.4585 cv
82.6084 39.4761 82.6084 39.5151 82.5918 39.5552 cv
82.3252 40.0757 li
82.3086 40.1157 82.2744 40.1382 82.2236 40.1157 cv
82.0029 40.0249 81.7764 39.979 81.5098 39.979 cv
81.1475 39.979 80.9893 40.1382 80.9893 40.3696 cv
80.9893 40.5962 81.0742 40.7036 81.6797 40.9478 cv
82.3877 41.2476 82.6592 41.5981 82.6592 42.1763 cv
82.6592 42.9683 82.0986 43.4048 81.2275 43.4048 cv
80.7568 43.4048 80.3896 43.3647 80.0039 43.1665 cv
79.9707 43.144 79.959 43.1216 79.9707 43.0991 cv
cp
f
85.5908 42.5952 mo
85.5908 42.6235 85.6016 42.6401 85.6299 42.6401 cv
87.1191 42.6401 li
87.1641 42.6401 87.1865 42.6626 87.1865 42.7134 cv
87.1865 43.2915 li
87.1865 43.3423 87.1641 43.3647 87.1191 43.3647 cv
84.7695 43.3647 li
84.7188 43.3647 84.6963 43.3423 84.6963 43.2915 cv
84.6963 39.3511 li
84.6963 39.3003 84.7188 39.2778 84.7695 39.2778 cv
85.5283 39.2778 li
85.5674 39.2778 85.5908 39.3003 85.5908 39.3511 cv
85.5908 42.5952 li
cp
f
90.9502 41.7856 mo
90.4971 40.2173 li
90.0449 41.7856 li
90.9502 41.7856 li
cp
89.8408 42.5044 mo
89.6143 43.314 li
89.5977 43.3481 89.5752 43.3647 89.541 43.3647 cv
88.8047 43.3647 li
88.7656 43.3647 88.7373 43.3306 88.7539 43.2915 cv
89.999 39.3062 li
89.999 39.2886 90.0166 39.2778 90.0449 39.2778 cv
91.0469 39.2778 li
91.0635 39.2778 91.0801 39.2886 91.0918 39.3169 cv
92.3262 43.2915 li
92.3428 43.3306 92.3145 43.3647 92.2754 43.3647 cv
91.4541 43.3647 li
91.4199 43.3647 91.3975 43.3481 91.3809 43.314 cv
91.1543 42.5044 li
89.8408 42.5044 li
cp
f
94.9063 43.3647 mo
94.8779 43.3647 94.8613 43.3481 94.8496 43.314 cv
93.6953 39.3677 li
93.6777 39.3169 93.7061 39.2778 93.752 39.2778 cv
94.5781 39.2778 li
94.623 39.2778 94.6289 39.2944 94.6465 39.3345 cv
95.4443 42.4702 li
96.2422 39.3345 li
96.2539 39.2944 96.2764 39.2778 96.3164 39.2778 cv
97.0518 39.2778 li
97.1025 39.2778 97.126 39.3062 97.1143 39.3569 cv
95.9541 43.314 li
95.9424 43.3481 95.9199 43.3647 95.8857 43.3647 cv
94.9063 43.3647 li
cp
f
99.9043 40.9585 mo
101.166 40.9585 li
101.218 40.9585 101.246 40.9819 101.246 41.0269 cv
101.246 41.6157 li
101.246 41.6548 101.218 41.6782 101.166 41.6782 cv
99.9043 41.6782 li
99.9043 42.5952 li
99.9043 42.6235 99.915 42.6401 99.9434 42.6401 cv
101.534 42.6401 li
101.585 42.6401 101.608 42.6626 101.608 42.7085 cv
101.608 43.2915 li
101.608 43.3423 101.585 43.3647 101.534 43.3647 cv
99.083 43.3647 li
99.0322 43.3647 99.0098 43.3423 99.0098 43.2915 cv
99.0098 39.3511 li
99.0098 39.3003 99.0322 39.2778 99.083 39.2778 cv
101.534 39.2778 li
101.585 39.2778 101.608 39.3003 101.608 39.3511 cv
101.608 39.9282 li
101.608 39.979 101.585 40.0024 101.534 40.0024 cv
99.9434 40.0024 li
99.915 40.0024 99.9043 40.019 99.9043 40.0474 cv
99.9043 40.9585 li
cp
f
.229492 50.9868 mo
.394043 50.6069 li
.410645 50.5737 .438965 50.562 .473145 50.5786 cv
.710938 50.6812 .925781 50.7769 1.34473 50.7769 cv
1.78076 50.7769 2.04102 50.562 2.04102 50.2056 cv
2.04102 49.8716 1.90527 49.7017 1.27148 49.3843 cv
.529785 49.022 .280762 48.688 .280762 48.1616 cv
.280762 47.5903 .699707 47.103 1.4751 47.103 cv
1.93359 47.103 2.22217 47.1479 2.56201 47.2954 cv
2.59619 47.313 2.60742 47.3354 2.59033 47.3696 cv
2.43164 47.7144 li
2.41504 47.7544 2.39209 47.7651 2.35254 47.7485 cv
2.08643 47.6411 1.86572 47.5903 1.54297 47.5903 cv
1.09033 47.5903 .89209 47.8442 .89209 48.1392 cv
.89209 48.4282 .977051 48.5806 1.59961 48.8862 cv
2.36963 49.2651 2.65234 49.5542 2.65234 50.1597 cv
2.65234 50.8169 2.19385 51.27 1.38428 51.27 cv
.914551 51.27 .597656 51.2241 .257813 51.0483 cv
.229492 51.0317 .218262 51.0093 .229492 50.9868 cv
cp
f
5.51563 51.23 mo
5.48145 51.23 5.46436 51.2134 5.46436 51.1733 cv
5.46436 47.6636 li
5.46436 47.6353 5.44775 47.6187 5.41943 47.6187 cv
4.43994 47.6187 li
4.40039 47.6187 4.3833 47.5952 4.3833 47.5562 cv
4.3833 47.1997 li
4.3833 47.1597 4.40039 47.1431 4.43994 47.1431 cv
7.05518 47.1431 li
7.09473 47.1431 7.11182 47.1597 7.11182 47.1997 cv
7.11182 47.5562 li
7.11182 47.5952 7.09473 47.6187 7.05518 47.6187 cv
6.07031 47.6187 li
6.04199 47.6187 6.03076 47.6353 6.03076 47.6636 cv
6.03076 51.1733 li
6.03076 51.2134 6.01367 51.23 5.97412 51.23 cv
5.51563 51.23 li
cp
f
9.57324 49.0679 mo
10.0825 49.0679 li
10.626 49.0679 10.9092 48.8638 10.9092 48.3374 cv
10.9092 47.8159 10.6377 47.6187 10.0942 47.6187 cv
9.61865 47.6187 li
9.59033 47.6187 9.57324 47.6353 9.57324 47.6636 cv
9.57324 49.0679 li
cp
9.57324 49.5093 mo
9.57324 51.1733 li
9.57324 51.2134 9.55615 51.23 9.52246 51.23 cv
9.06348 51.23 li
9.02393 51.23 9.00732 51.2134 9.00732 51.1733 cv
9.00732 47.1997 li
9.00732 47.1597 9.02393 47.1431 9.06348 47.1431 cv
10.145 47.1431 li
11.0337 47.1431 11.5093 47.5161 11.5093 48.3257 cv
11.5093 48.9878 11.1641 49.3394 10.6147 49.4585 cv
11.5996 51.1392 li
11.6279 51.1899 11.6055 51.23 11.5601 51.23 cv
11.0283 51.23 li
11 51.23 10.9829 51.2183 10.9771 51.2017 cv
10.0317 49.5093 li
9.57324 49.5093 li
cp
f
15.0747 47.5786 mo
14.4009 47.5786 14.0498 48.105 14.0498 49.186 cv
14.0498 50.2681 14.4009 50.7944 15.0747 50.7944 cv
15.7368 50.7944 16.0933 50.2681 16.0933 49.186 cv
16.0933 48.105 15.7368 47.5786 15.0747 47.5786 cv
cp
15.0747 51.27 mo
13.835 51.27 13.4556 50.437 13.4556 49.186 cv
13.4556 47.9185 13.8232 47.103 15.0747 47.103 cv
16.3086 47.103 16.688 47.9185 16.688 49.186 cv
16.688 50.437 16.3086 51.27 15.0747 51.27 cv
cp
f
20.0386 50.2905 mo
20.0386 50.8843 19.6934 51.23 19.1045 51.23 cv
18.561 51.23 li
18.5215 51.23 18.5044 51.2134 18.5044 51.1733 cv
18.5044 50.811 li
18.5044 50.771 18.5215 50.7544 18.561 50.7544 cv
18.9966 50.7544 li
19.314 50.7544 19.4722 50.5962 19.4722 50.2788 cv
19.4722 47.1997 li
19.4722 47.1597 19.4893 47.1431 19.5288 47.1431 cv
19.9819 47.1431 li
20.0215 47.1431 20.0386 47.1597 20.0386 47.1997 cv
20.0386 50.2905 li
cp
f
24.4858 50.2905 mo
24.4858 47.1997 li
24.4858 47.1597 24.5029 47.1431 24.5366 47.1431 cv
24.9839 47.1431 li
25.0234 47.1431 25.0405 47.1597 25.0405 47.1997 cv
25.0405 51.1733 li
25.0405 51.2134 25.0234 51.23 24.9839 51.23 cv
24.5029 51.23 li
24.4521 51.23 24.4404 51.2241 24.4238 51.1851 cv
22.8047 48.0825 li
22.8047 51.1733 li
22.8047 51.2134 22.7876 51.23 22.748 51.23 cv
22.3066 51.23 li
22.2666 51.23 22.25 51.2134 22.25 51.1733 cv
22.25 47.1997 li
22.25 47.1597 22.2666 47.1431 22.3066 47.1431 cv
22.7817 47.1431 li
22.833 47.1431 22.8442 47.1479 22.8613 47.188 cv
24.4858 50.2905 li
cp
f
27.7632 47.1431 mo
27.7969 47.1431 27.814 47.1597 27.814 47.1997 cv
27.814 51.1733 li
27.814 51.2134 27.7969 51.23 27.7632 51.23 cv
27.3047 51.23 li
27.2646 51.23 27.248 51.2134 27.248 51.1733 cv
27.248 47.1997 li
27.248 47.1597 27.2646 47.1431 27.3047 47.1431 cv
27.7632 47.1431 li
cp
27.2646 46.8315 mo
27.2363 46.8481 27.208 46.8257 27.1914 46.8091 cv
27.1177 46.6616 li
27.1118 46.6392 27.1177 46.605 27.146 46.5884 cv
28.1479 45.9995 li
28.1875 45.9819 28.21 45.9937 28.2217 46.022 cv
28.3745 46.311 li
28.3916 46.3501 28.3799 46.3726 28.3462 46.3901 cv
27.2646 46.8315 li
cp
f
31.5811 51.27 mo
30.4263 51.27 29.9111 50.4204 29.9111 49.1812 cv
29.9111 47.9575 30.4263 47.103 31.5811 47.103 cv
31.9658 47.103 32.249 47.1538 32.5659 47.3296 cv
32.5942 47.3521 32.5942 47.3862 32.5771 47.4253 cv
32.4077 47.7368 li
32.3906 47.7769 32.3564 47.7769 32.3281 47.7603 cv
32.085 47.6411 31.9321 47.5903 31.6147 47.5903 cv
30.981 47.5903 30.5112 48.0991 30.5112 49.1812 cv
30.5112 50.2788 30.9697 50.7827 31.6147 50.7827 cv
31.8979 50.7827 32.0791 50.7427 32.334 50.6069 cv
32.3677 50.5903 32.3906 50.5962 32.4077 50.6245 cv
32.583 50.9468 li
32.6001 50.981 32.5942 51.0093 32.5659 51.0376 cv
32.2378 51.2183 31.9717 51.27 31.5811 51.27 cv
cp
f
35.6162 49.1294 mo
37.2129 51.145 li
37.2412 51.1851 37.2129 51.23 37.1675 51.23 cv
36.5898 51.23 li
36.5732 51.23 36.5562 51.2241 36.5449 51.2075 cv
35.0898 49.271 li
35.0898 51.1733 li
35.0898 51.2134 35.0728 51.23 35.0391 51.23 cv
34.5801 51.23 li
34.5405 51.23 34.5239 51.2134 34.5239 51.1733 cv
34.5239 47.1997 li
34.5239 47.1597 34.5405 47.1431 34.5801 47.1431 cv
35.0391 47.1431 li
35.0728 47.1431 35.0898 47.1597 35.0898 47.1997 cv
35.0898 49.0396 li
36.4824 47.1655 li
36.4937 47.1479 36.5107 47.1431 36.5332 47.1431 cv
37.0601 47.1431 li
37.105 47.1431 37.1279 47.1938 37.0996 47.2329 cv
35.6162 49.1294 li
cp
f
40.9873 49.7866 mo
40.3701 47.7144 li
39.7529 49.7866 li
40.9873 49.7866 li
cp
39.6172 50.2622 mo
39.3511 51.1851 li
39.3398 51.2134 39.3174 51.23 39.2891 51.23 cv
38.8418 51.23 li
38.8018 51.23 38.7852 51.2017 38.8018 51.1616 cv
40.0361 47.1714 li
40.0361 47.1538 40.0474 47.1431 40.0757 47.1431 cv
40.7212 47.1431 li
40.7383 47.1431 40.7549 47.1538 40.7607 47.1763 cv
41.9834 51.1567 li
42.0005 51.2075 41.9834 51.23 41.938 51.23 cv
41.4458 51.23 li
41.4175 51.23 41.3945 51.2134 41.3892 51.1851 cv
41.123 50.2622 li
39.6172 50.2622 li
cp
f
47.2788 48.9487 mo
48.5469 48.9487 li
48.5864 48.9487 48.6089 48.9653 48.6089 49.0054 cv
48.6089 49.3677 li
48.6089 49.4067 48.5864 49.4243 48.5469 49.4243 cv
47.2788 49.4243 li
47.2788 51.1733 li
47.2788 51.2134 47.2617 51.23 47.228 51.23 cv
46.7695 51.23 li
46.7295 51.23 46.7129 51.2134 46.7129 51.1733 cv
46.7129 47.1997 li
46.7129 47.1597 46.7295 47.1431 46.7695 47.1431 cv
48.9092 47.1431 li
48.9487 47.1431 48.9712 47.1597 48.9712 47.1997 cv
48.9712 47.5562 li
48.9712 47.5952 48.9487 47.6187 48.9092 47.6187 cv
47.3242 47.6187 li
47.2959 47.6187 47.2788 47.6353 47.2788 47.6636 cv
47.2788 48.9487 li
cp
f
52.3037 49.7866 mo
51.6865 47.7144 li
51.0693 49.7866 li
52.3037 49.7866 li
cp
50.9336 50.2622 mo
50.6675 51.1851 li
50.6563 51.2134 50.6338 51.23 50.6055 51.23 cv
50.1582 51.23 li
50.1182 51.23 50.1016 51.2017 50.1182 51.1616 cv
51.3525 47.1714 li
51.3525 47.1538 51.3638 47.1431 51.3921 47.1431 cv
52.0376 47.1431 li
52.0547 47.1431 52.0713 47.1538 52.0771 47.1763 cv
53.2998 51.1567 li
53.3169 51.2075 53.2998 51.23 53.2544 51.23 cv
52.7622 51.23 li
52.7339 51.23 52.7109 51.2134 52.7056 51.1851 cv
52.4395 50.2622 li
50.9336 50.2622 li
cp
f
56.2993 49.1294 mo
57.896 51.145 li
57.9243 51.1851 57.896 51.23 57.8506 51.23 cv
57.2729 51.23 li
57.2559 51.23 57.2393 51.2241 57.228 51.2075 cv
55.7729 49.271 li
55.7729 51.1733 li
55.7729 51.2134 55.7559 51.23 55.7222 51.23 cv
55.2637 51.23 li
55.2236 51.23 55.207 51.2134 55.207 51.1733 cv
55.207 47.1997 li
55.207 47.1597 55.2236 47.1431 55.2637 47.1431 cv
55.7222 47.1431 li
55.7559 47.1431 55.7729 47.1597 55.7729 47.1997 cv
55.7729 49.0396 li
57.1655 47.1655 li
57.1768 47.1479 57.1938 47.1431 57.2163 47.1431 cv
57.7432 47.1431 li
57.7881 47.1431 57.811 47.1938 57.7827 47.2329 cv
56.2993 49.1294 li
cp
f
62.5869 49.9624 mo
62.5869 50.7544 62.3047 51.27 61.1895 51.27 cv
60.0737 51.27 59.791 50.7544 59.791 49.9624 cv
59.791 47.1997 li
59.791 47.1597 59.8076 47.1431 59.8477 47.1431 cv
60.3057 47.1431 li
60.3398 47.1431 60.3564 47.1597 60.3564 47.1997 cv
60.3564 50.0864 li
60.3564 50.6069 60.6396 50.7944 61.1895 50.7944 cv
61.7324 50.7944 62.0215 50.6021 62.0215 50.0864 cv
62.0215 47.1997 li
62.0215 47.1597 62.0381 47.1431 62.0781 47.1431 cv
62.5303 47.1431 li
62.5703 47.1431 62.5869 47.1597 62.5869 47.1997 cv
62.5869 49.9624 li
cp
f
65.3721 50.7095 mo
65.3721 50.7378 65.3838 50.7544 65.4121 50.7544 cv
66.9805 50.7544 li
67.0195 50.7544 67.0371 50.7769 67.0371 50.8169 cv
67.0371 51.1733 li
67.0371 51.2134 67.0195 51.23 66.9805 51.23 cv
64.8633 51.23 li
64.8232 51.23 64.8066 51.2134 64.8066 51.1733 cv
64.8066 47.1997 li
64.8066 47.1597 64.8232 47.1431 64.8633 47.1431 cv
65.3213 47.1431 li
65.3555 47.1431 65.3721 47.1597 65.3721 47.1997 cv
65.3721 50.7095 li
cp
f
69.2764 51.23 mo
69.2432 51.23 69.2256 51.2134 69.2256 51.1733 cv
69.2256 47.6636 li
69.2256 47.6353 69.209 47.6187 69.1807 47.6187 cv
68.2012 47.6187 li
68.1611 47.6187 68.1445 47.5952 68.1445 47.5562 cv
68.1445 47.1997 li
68.1445 47.1597 68.1611 47.1431 68.2012 47.1431 cv
70.8164 47.1431 li
70.8564 47.1431 70.873 47.1597 70.873 47.1997 cv
70.873 47.5562 li
70.873 47.5952 70.8564 47.6187 70.8164 47.6187 cv
69.8311 47.6187 li
69.8027 47.6187 69.792 47.6353 69.792 47.6636 cv
69.792 51.1733 li
69.792 51.2134 69.7744 51.23 69.7354 51.23 cv
69.2764 51.23 li
cp
f
74.3066 49.7866 mo
73.6895 47.7144 li
73.0732 49.7866 li
74.3066 49.7866 li
cp
72.9365 50.2622 mo
72.6709 51.1851 li
72.6592 51.2134 72.6367 51.23 72.6084 51.23 cv
72.1611 51.23 li
72.1221 51.23 72.1045 51.2017 72.1221 51.1616 cv
73.3555 47.1714 li
73.3555 47.1538 73.3672 47.1431 73.3955 47.1431 cv
74.041 47.1431 li
74.0576 47.1431 74.0752 47.1538 74.0801 47.1763 cv
75.3037 51.1567 li
75.3203 51.2075 75.3037 51.23 75.2578 51.23 cv
74.7656 51.23 li
74.7373 51.23 74.7148 51.2134 74.709 51.1851 cv
74.4424 50.2622 li
72.9365 50.2622 li
cp
f
1.5332 11.4897 mo
2.37939 11.4897 3.06641 10.8037 3.06641 9.95654 cv
3.06641 9.10693 2.37939 8.42578 1.5332 8.42578 cv
.685059 8.42578 0 9.10693 0 9.95654 cv
0 10.8037 .685059 11.4897 1.5332 11.4897 cv
.2 0 0 .7 cmyk
f
1.5332 19.9116 mo
2.37939 19.9116 3.06641 19.2266 3.06641 18.3809 cv
3.06641 17.5347 2.37939 16.8457 1.5332 16.8457 cv
.685059 16.8457 0 17.5347 0 18.3809 cv
0 19.2266 .685059 19.9116 1.5332 19.9116 cv
f
9.95703 11.4897 mo
10.8032 11.4897 11.4878 10.8037 11.4878 9.95654 cv
11.4878 9.10693 10.8032 8.42578 9.95703 8.42578 cv
9.10889 8.42578 8.42285 9.10693 8.42285 9.95654 cv
8.42285 10.8037 9.10889 11.4897 9.95703 11.4897 cv
f
9.95703 19.9116 mo
10.8032 19.9116 11.4878 19.2266 11.4878 18.3809 cv
11.4878 17.5347 10.8032 16.8457 9.95703 16.8457 cv
9.10889 16.8457 8.42285 17.5347 8.42285 18.3809 cv
8.42285 19.2266 9.10889 19.9116 9.95703 19.9116 cv
f
18.3765 11.4897 mo
19.2266 11.4897 19.9116 10.8037 19.9116 9.95654 cv
19.9116 9.10693 19.2266 8.42578 18.3765 8.42578 cv
17.5283 8.42578 16.8467 9.10693 16.8467 9.95654 cv
16.8467 10.8037 17.5283 11.4897 18.3765 11.4897 cv
f
1.5332 3.06592 mo
2.37939 3.06592 3.06641 2.37988 3.06641 1.5332 cv
3.06641 .686035 2.37939 .00195313 1.5332 .00195313 cv
.685059 .00195313 0 .686035 0 1.5332 cv
0 2.37988 .685059 3.06592 1.5332 3.06592 cv
f
9.95703 3.06592 mo
10.8032 3.06592 11.4878 2.37988 11.4878 1.5332 cv
11.4878 .686035 10.8032 .00195313 9.95703 .00195313 cv
9.10889 .00195313 8.42285 .686035 8.42285 1.5332 cv
8.42285 2.37988 9.10889 3.06592 9.95703 3.06592 cv
f
18.3765 3.06592 mo
19.2266 3.06592 19.9116 2.37988 19.9116 1.5332 cv
19.9116 .686035 19.2266 .00195313 18.3765 .00195313 cv
17.5283 .00195313 16.8467 .686035 16.8467 1.5332 cv
16.8467 2.37988 17.5283 3.06592 18.3765 3.06592 cv
f
18.3765 19.9116 mo
19.2266 19.9116 19.9116 19.2266 19.9116 18.3809 cv
19.9116 17.5347 19.2266 16.8457 18.3765 16.8457 cv
17.5283 16.8457 16.8467 17.5347 16.8467 18.3809 cv
16.8467 19.2266 17.5283 19.9116 18.3765 19.9116 cv
f
26.8022 11.4897 mo
27.6484 11.4897 28.3354 10.8037 28.3354 9.95654 cv
28.3354 9.10693 27.6484 8.42578 26.8022 8.42578 cv
25.9541 8.42578 25.2695 9.10693 25.2695 9.95654 cv
25.2695 10.8037 25.9541 11.4897 26.8022 11.4897 cv
f
26.8022 19.9116 mo
27.6484 19.9116 28.3354 19.2266 28.3354 18.3809 cv
28.3354 17.5347 27.6484 16.8457 26.8022 16.8457 cv
25.9541 16.8457 25.2695 17.5347 25.2695 18.3809 cv
25.2695 19.2266 25.9541 19.9116 26.8022 19.9116 cv
f
26.8022 3.06592 mo
27.6484 3.06592 28.3354 2.37988 28.3354 1.53076 cv
28.3354 .688965 27.6484 0 26.8022 0 cv
25.9541 0 25.2695 .688965 25.2695 1.53076 cv
25.2695 2.37988 25.9541 3.06592 26.8022 3.06592 cv
f
35.7026 19.4741 mo
36.3828 19.8262 37.0166 19.916 37.9585 19.916 cv
39.5786 19.916 40.4966 19.0103 40.4966 17.6953 cv
40.4966 16.4834 39.9307 15.9053 38.3896 15.145 cv
37.1416 14.5332 36.9727 14.2271 36.9727 13.6504 cv
36.9727 13.0601 37.3687 12.5503 38.2744 12.5503 cv
38.9214 12.5503 39.3638 12.6523 39.8955 12.8672 cv
39.9756 12.9023 40.0205 12.8779 40.0547 12.7993 cv
40.3726 12.1084 li
40.4058 12.04 40.3838 11.9951 40.3154 11.96 cv
39.6357 11.665 39.0576 11.5762 38.1406 11.5762 cv
36.5874 11.5762 35.7476 12.5503 35.7476 13.6953 cv
35.7476 14.748 36.2466 15.417 37.7314 16.1421 cv
39.0015 16.7773 39.2725 17.1172 39.2725 17.7861 cv
39.2725 18.499 38.7515 18.9312 37.8784 18.9312 cv
37.0405 18.9312 36.6084 18.7383 36.1338 18.5342 cv
36.0654 18.499 36.0098 18.5229 35.9746 18.5903 cv
35.6455 19.3501 li
35.6235 19.395 35.6455 19.4414 35.7026 19.4741 cv
45.0186 20.415 mo
45.0186 20.9702 44.7354 21.2993 44.1577 21.2993 cv
43.7617 21.2993 li
43.6816 21.2993 43.6367 21.333 43.6367 21.4023 cv
43.6367 22.0581 li
43.6367 22.1382 43.6816 22.1714 43.7617 22.1714 cv
44.4297 22.1714 li
45.5068 22.1714 46.1064 21.5723 46.1064 20.4951 cv
46.1064 14.7383 li
46.1064 14.6582 46.0728 14.624 45.9937 14.624 cv
44.1235 14.624 li
44.0444 14.624 44.0107 14.6582 44.0107 14.7383 cv
44.0107 15.394 li
44.0107 15.4624 44.0444 15.4961 44.1235 15.4961 cv
45.0186 15.4961 li
45.0186 20.415 li
cp
45.4375 12.1641 mo
44.9956 12.1641 44.7588 12.4253 44.7588 12.8452 cv
44.7588 13.2983 44.9844 13.5254 45.4375 13.5254 cv
45.8804 13.5254 46.1064 13.2983 46.1064 12.8452 cv
46.1064 12.4253 45.8804 12.1641 45.4375 12.1641 cv
51.6597 12.6973 mo
51.6597 12.6401 51.6948 12.6069 51.7515 12.6069 cv
54.9238 12.6069 li
55.0024 12.6069 55.0474 12.561 55.0474 12.4819 cv
55.0474 11.7681 li
55.0474 11.689 55.0024 11.6553 54.9238 11.6553 cv
50.6406 11.6553 li
50.5605 11.6553 50.5264 11.689 50.5264 11.7681 cv
50.5264 19.7241 li
50.5264 19.8032 50.5605 19.8374 50.6406 19.8374 cv
51.5576 19.8374 li
51.6265 19.8374 51.6597 19.8032 51.6597 19.7241 cv
51.6597 16.2222 li
54.1987 16.2222 li
54.2788 16.2222 54.3237 16.188 54.3237 16.1094 cv
54.3237 15.3833 li
54.3237 15.3042 54.2788 15.27 54.1987 15.27 cv
51.6597 15.27 li
51.6597 12.6973 li
cp
0 0 0 1 cmyk
f
35.7144 7.90771 mo
36.4854 8.30371 37.2212 8.38379 38.1616 8.38379 cv
39.9072 8.38379 41.0293 7.51172 41.0293 5.92383 cv
41.0293 4.76758 40.4854 4.06592 39.0684 3.46484 cv
37.8564 2.97656 37.6865 2.76172 37.6865 2.30762 cv
37.6865 1.84473 38.0034 1.52686 38.7295 1.52686 cv
39.2612 1.52686 39.7144 1.6167 40.1563 1.79883 cv
40.2593 1.84473 40.3262 1.79883 40.3604 1.71973 cv
40.8945 .677734 li
40.9272 .597656 40.9272 .518555 40.8252 .484863 cv
39.9976 .121582 39.5225 .0429688 38.4233 .0429688 cv
36.7344 .0429688 35.7363 1.02783 35.7363 2.354 cv
35.7363 3.56689 36.3496 4.31494 37.7656 4.91553 cv
38.8643 5.40283 39.0913 5.63965 39.0913 6.10498 cv
39.0913 6.604 38.6836 6.89893 38.0034 6.89893 cv
37.2212 6.89893 36.8242 6.73975 36.3496 6.5249 cv
36.2583 6.49072 36.1904 6.5249 36.1553 6.604 cv
35.6465 7.771 li
35.6235 7.81689 35.6465 7.86182 35.7144 7.90771 cv
48.2603 8.30371 mo
48.3623 8.30371 48.4072 8.25879 48.4072 8.15674 cv
48.4072 1.6626 li
48.4072 1.60596 48.4302 1.57178 48.4863 1.57178 cv
50.4136 1.57178 li
50.5044 1.57178 50.5493 1.52686 50.5493 1.4248 cv
50.5493 .269531 li
50.5493 .166992 50.5044 .121582 50.4136 .121582 cv
44.6333 .121582 li
44.5313 .121582 44.4854 .166992 44.4854 .269531 cv
44.4854 1.4248 li
44.4854 1.52686 44.5313 1.57178 44.6333 1.57178 cv
46.5264 1.57178 li
46.5835 1.57178 46.6162 1.60596 46.6162 1.6626 cv
46.6162 8.15674 li
46.6162 8.25879 46.6616 8.30371 46.7412 8.30371 cv
48.2603 8.30371 li
cp
60.5908 .269531 mo
60.5908 .166992 60.5449 .121582 60.4658 .121582 cv
58.9355 .121582 li
58.8442 .121582 58.7993 .166992 58.7993 .269531 cv
58.7993 5.73193 li
58.7993 6.53564 58.3574 6.93262 57.4624 6.93262 cv
56.5786 6.93262 56.1353 6.53564 56.1353 5.73193 cv
56.1353 .269531 li
56.1353 .166992 56.0903 .121582 56.0112 .121582 cv
54.4932 .121582 li
54.3916 .121582 54.3452 .166992 54.3452 .269531 cv
54.3452 5.77686 li
54.3452 7.375 55.2412 8.38379 57.4624 8.38379 cv
59.6953 8.38379 60.5908 7.375 60.5908 5.77686 cv
60.5908 .269531 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Juraj Blako) ()%%Title: (STU-SjF-nfv.eps)%%CreationDate: 9.10.2012 16:46%%Canvassize: 16383%AI9_DataStream%Gb!Q;Bg_G`dcgW3r!-&\*KmWO,&9G070.U$QAEUsJ90k@&+=GO]qgie84$G(SU'[FArr*L<HWFaF]EQcg?Hi-<n%%e3loYHQ*R_I%ra3Sb$eq2sb4&_>BGq#K9K3@Y7Nr-Kr!`m6Q4)GW>VOGMi'YIdD`&-(bIT\!$&_5\2P,b`PeHRa1UZDdS_hHMb[!]mr,=4V1NCiG%g0#cD^`Q^^SR2iHrL;?5.u5X$3#796LYE)(CXF"*!"SpeJ%hHH`iHgM#=+"BjTO@F^`2f%qVDdL90bC#blXmPf?[HcU6M2TEcqZd%(Q@,)N?>kDRs71sT:M8HF2-Q>KAg8gG*^&!o\C`h,L5G8N]7*%iU^l=$\kG8W')1.EXWc%NLI^p540s*`3hQDAE0qJ4WG!<$ldZ%%92>PBT[n[5QjkCP0P:o8&9]f@Yt(PL&N1D`aj2BJ(B,3ZJ#DYbS_e=sS1VH0cg&Chk&sL)2MV59lsh7PL;BMWcM_K/Looo\M&DSj%9]ARGB743YZ?,U.r4"PE\dSQeT=@1n,7]AQ&=;'p"dtX]-O9o1S@-Wa5u\ENc@otRp4+P$`8ZV])"okN`*J"sO#!e"ai*RO$mCL]%m4=TgEO4^>,Cn\p0S0I!NO'*?i)Ug-L=9*EcEP](,b0\E!tgQQ";A$cMZoq.%f;-R`&W/GJ"Vf*'@d&GjSu^pJ/QP,0U6qe"Li?P%^gWVgFTWk%IKN`EG(tO2/=3Sn!DELQnj'4P`Qkak\J0tT/&K'fq*.M#^'scQ%`?Up%"9Oen?Yq6^P9YqD`A0oL;WLu3/m=s4FA&3%'oTn/Yo(-2`F,`K%(;&4Gb2]E-=NBS'"1A`J+2]5'"1CZ@4V*^I_o->!c1jb^aBKnGc+AgD0R,YjnW!e50`]g50r8%0ZBDc9Fo.!%n%pHor@foEn.W6^I=e)q($lUu.D?%6"@$<6fH^.tqb9&$T7q]FTC<3]#_#*2QqnPSlk0/KrJ#g\YHUe6-fubq%pQl!_,&^<kM^>i%Hm%O<a-_dP9CNTZM0k8^a0]@10QouI)'dQ2s+@F]s558XKLZUJ)W/FW#62P@Y^^2:0j!kNY^c-U?GYLWnV<a(Eqg%?KWSY^i$TR7%/1$[e(dGr0A,oM&jG/[3V@R_g[_dD:I).tde3hA5>o55L9Z@IL+TGggfK1:FY]oSNghV9Rp()Vh<`m(Es"I7<Zg\X:J\ABMM.@:U%_48C[Y]LNr-F,t6%8r34"j6tp$SnTHn!H/[Fc7..%8oqjK_,`&%U0P3(cm*ehoGaNj]F=D1ug=2]YP/(oFK-KU@%^nS!.NdU03.F%MX4j;-??<2++.7S+en5D-ke3`irCMPS:jZgg`Ws:H3mmd(I-$I%/L5/@]RRBs#:MG;?#R)E(Yc_Pe[!cbo)N#?^/>#?Ta@PQ,!*$%,(Zp2$%b5^rQF<l*T\sRQd=]-jY-UGEu']/(Zd=L="<0EjY-VRaT&J-LLUQRn[RRoEeXOFrc+&e,aqAFV'q['n3n\Lo2-"sLVN!b%;3$P^,5<WoiY#/$*.0eRj:bc<rZ?M<1(j:4(J"KOi$X*XIYI0`@>kltQ@KO>mGrQF7VW`lmEfn\":\U+PMiGD0VBp]-#T9,:GYQN%$iUBF+;E`anggC6dtK7/_*!V06OGMr634oRqA@,_OS^$:r3/1)<KIPY"-9%(G6n4&=(DS.6j<Dl.C(rW2^.=.&\p#]G.@bBI5Ip.%__FHjMT]k1/escWVGlbc%e1#%=W0HQF/c'^A>4SVTGcfo*qrbX1B\(K+k'1b$`St;(a&*'YA.j529(b:O@+hEcnEamF)58bmp`dA%*&3&%*_AJSOMZ5SN^-@%]9q#&cu427^o'R8`!1rq_F>f*n/o*Y32$LR[t-6N8/a2^+`Gcc"I9Ad2ijd?8P<<OLH(DM_Khk/8/e7Z%ZB?Cn3RD]C"-WT(nk#VYg]JIOmM.EV2NIfl&Z5Ws`!4mIWF[$V%g0P=3<Nq>TE\^qg0#W,;VF\jj0>a2GsbBj&1lM7,f*JY[OP]W%ng,5"aaIL\72YWd01N0n(-*.'#Z%rHPr0%lXe]Vn`"2d0372OJ*DmfAlihj4M"q>V6W+_!7L%T_FGEra(MHa/X:$(2?5e"o)M4,R%XJ3QXfc!DC.',uaUVt12V\Q.fD$q0@*[bYnUV@rm/'?Qo6'5\=6GA*PY`.Y"7E=s%Gu!,n6j.O,Ys>T8/7RHKW3?Le*oW,-]Eji<%l^jktUpBGt@c%442&;eU6d9&9(Dm7==KVei0`r:(,70\)iqC<6A'9q):+0#:`<l(Q9-?opB1Ss-`-T:ueTMis9%)FQnAWnja@V[H%*[gLn0Aot58o[V;-J[USm&b\&T&Zkb#uQ`^+aoLB'3bJ$JpITM9giqnW1aPU80Z1I]E/P`.dSZ=adW,hIN%*04co*l3M+;'KM!BI%p&m=6;iOZCMEJ$!7Q@6T*I_KY1,n,lGZL,D,?cA;rck#b0^oac-+;7sH#2r3D+14Ss%b%EAh^<#GWruBK`)mLPJBU_,$9YAe8GLT%0@)rF2q4UUbQfD_Y^]bQ8["DI1Wh/.TIl.in98D/Ut2d-8hX^mnFDO[P:&>Up&k[38]N%'Zfi?]7WT"0:WCUg%>SdDf<Fr^][Ap&%qN[hq7qn[h$h7IZ<g`?km_aMS5']co]p(OKf0#%=`lWZ7*jqO!;\=F#Q5A4R`@c-5P"_Ll?!`gqg_S'YH!27.c'XW/6FD-`i/#dD%5ea!R6fi5Xp.I8Td.9MD2]=L-7tnk'W%%A$;3O*p?D32I4\'eP/5(@^13-oQ&_Dgt`KPYU2Cb/Hog,\\=Alsg/Fh;QD396&V2n^g%Yg+EG=QF0o]d+i'dL]/\kMUP>$g+7I_"+IL*41uBU=sr22s))s\T5@>n$9tY?-=!DWbIaJ>XrIC9425aZIL@4Y*'ZS:$>u_i*r0*%e#U:h57(oj;ft=-I[YM(.PEBNiJ.b(Q8Msn`jO-$c,H;8&m=^]?78j>N&.hS7)io>6o(/qG)[j\e8keX/mr1RG^sI?N-M,=?R)!a%lS-ZVZlR(#SCbt:P,q4dUCouZBgkCo59RqD]J@)bX%6ib*+e^eJ!['G5bdAIPp_e0RL/HPDnPG3iFeE(!c&.#"aSd1,`%5KE0p2t%i@WH!/?+Mt_kVgU6CK:TdWgm_A?T5UbnA6;83S(hF[GZ%U_,!G.cNVA1O6WYRSr5dOrZYT`+=EMVFZV#hGR=n;`OseLVaKmNf)P>%U\IJ#'-*'P-2\e(1!j!u7iY`%on\h-MdWDP>]"P=J$)U<UlBVuUo0@caKl2=(8]Ui2JM#Foig=Tm&<YOS6'9X86]Zf``=/@TY1@G%'<+Kkc5^4&N9I_pAb^I)@^J?gU]ejZO`\1lQj0X%C(Cl:W\Q*RZ7l)@X>5hcq&paR.6UW+6F]X7iNV2P^!__Zd?!Y!e,FD`V??in%Su0MZqQ%b>8\#+s6,BZWf*HcXs4<#tdk-QHgeRArPs-<c82Cnq,PRqNG<ikGMQTU^[DIQ06HY&)H9a:ta'N:'+q[#4MMsQSj^bLS%nQuG$HlBsrMG-ZG/'0<.nBh+\cP#,dgqa\7kRr%aCE,iR(-IVa^IHOQ`,AN2@2U:cW4Z0ab9]?Bm!$U7YG-M=^WC\U)pb$VhA$Q.%%?'8&2NZgkS:[7"Li>ni;9FinoIhSO,dC%MSV@iWo*4,FMJ3B8YmqD-$WF4j5,)8I6>7E9+,I@7c\%MddUV8eP,C&7iEml@+P)*g%fuTb?BilYPUtBHV#N;*QNR0<PTVNV0"WkmA@7c`$B1[Y?c2S)=)JH0Ac[s;u8U(H3_%6mUPt[>bWL0$j#>dmTbST@7S;``S.^fgX%Q<8`+[VXCEe$_`JD7#Y1=?P#4d88r-r2Jc/Gie[ijRl*YT8\oPY#mD6$PJ7M.:3sQ@'2I^dlq$+a5761$/Apn+KP3YEAjBtn3-S/%]$h4VX#]$uJ?IWc1XLG-Kpr-[2s=#2>p$8cXg0ojbqGu%1RgJXT61<a;hY$+#56g>O3h*Wlu)%mj]c4P>RJ<mE:,Fa`/d!S@)k4B%_s!9]h>D@lpmR$Qj`136C&4/MT$8^gnh6PJhu;7?kF4cha.6p7[%lMiaL0u6i(aOH8:do@AcZRXq/+H=KkZ#[_o.mVGkebmn/=I"%X$a8W`RWu&hOMj110F3$)7oGrqA$I=n%_dj%npo>QpL&*U]t!r3H=k%LBY%C`W0oU2a]6?`oH#Cm**5"4Zrp/pLR%nhDTuYB@<?1%LPq!5:Xh&jNjp)&`^8_3@OY!pTL!IC%B"UsLred.eBTC^\/3NKq!Q?0"EXC`UQu?,@'g@O,Am8Y!HX`t`-:,D[H4$cYcrh]e(NVW%FC@src:qr%*MJtJ7'QQ*TuM%,#JH5e1A4okfb??MO_nfkrTOj&\,p#d^e]I7,PGpMlT8VFK3t8=;7ia?/VG_%REZcSL(F44@"&9o%G#mYb]*7g86@UX%;mf:-CHr;;%H+)"R#Tn'GK'^23(-0JCGX\`#YA4Pf(M#QHT(gSOgl&L)mr6M[&rM&JdC4M`jl:Mdk"hk05@_L%5d:a3Kr#lCq*3<R!0H>5"5jfoA9T?n#215@%7VCF%==1X*UsZSI_)]<bkcqZbqm!/?^(!og^X=R-k<kiV#[AD5AZc%`QnK&&-m_]%[H`/Na*ggPi\m;iF9soOhh</q5L<*>]C+/4UA\.`>ath#C&mJ5f24F(X#"(E[da$F6+\Sm6ekA0A>-U2?cjBsiWKXJ):*URTl5W@%Uo")UgTU#Vm2TajoF2'2E1h,G-T:^[DLJ2:hie_T.46\>J(X"G"Y52>EE)rs.=184bGl&AreDd<G-AAY/8(1HX<mc,j=n"*5Sj[N%GsK?MMW6q((P%hO,#\Did*fnbhuC[%nUFXM(?8ilJ%I:mZ9^*\&)@VaZ#N:KL#LtEMJC6bs0EK.A_:CL8OPK0lgJ83q/)s4;T&NR%YG?3M%A!?*V*fb3$T`oT"?1Gb?^?YnJ%RT2:jt;Yksfm*"PuC<pfcZt1Fp.BJ*+LRk!pc%0jBJt!L8'3a/=A?62d]QQjCl1+*^-L%dZN=KNoRj<HE\T!<+GPS)[S8cL3dm)]B!&R0hH"?#iYoa'=]PUn9Q\YLT?8;WTJj_Yh!pK"/lKega1.tjbsIKr3/goOb.8MMo%e_%g6Dpq(54'?Qj^IJUqJ!*]<dOM\+a:8WL^G@jk`J;#a[5_b1T2rg+l&V&M^*9p<aS-^U)J=5/=3.QLGDQJW,lqfHK0BB.3gQ"VfN[%+r4aGV1W`jKuLP"^9^oKipbhR[77D557qL,:Y`+=F$Qf%1E8j[;X@'no*u>7hB,#VY]!kWs)"$F>HjOTa@>U>6c,jJLVuIU9<^@/%IkC&arc$QT%`cKK+.:LhaE:XcFf'dkB->jmZT/mkXlU)6#UAN'^/cR-S]+,edpbLFC0Gc"_Z_nKLn+Hl(mK7jr;sPZb5.C8[-(K5%R64rqRa`VMo?J=h_.#B,NB>92ZA'o0o)i$\k<u#-"24Y+=ITBI,j3D(fcVm_ZSU[#<.uBRbD#1sbg(Ik@o<uZ&kF%+d6S0RV6Ot`%/5o2rVU1b1eQF`i0%5HtfY:taT9E]Ur?[8@Qs*d_5L:>[kC=-unGF)aV#fN,@U0f7-\-N(LJu%'"G13ej^K[a7V"hs)+sVdefl$^%^gBEH#m@lp)0_r@fsCfhlcmA^csN,/Hg#(M<8D/#H'lkk?J($3eCW@TXfe%Y>ftW<Fs(rTp6FbkC0Q3>/P%G+Vcg%*=L`?Rm.?'0%pY^WU2IRL+'N`d+5D#^roRIgEV\u<dE4C$"NW<<[K*[Pncm%,d!nL\X2luQM2`>*]>2*7Q:)^L0d+u^d9_tl'/8i1iZQ$i=aD"38%#t+<p(rTQ*[9_1gl/U;/ad+6JKK<s3.L&L5329Mr!9c$B?[u:-HhWT7-itV>Y'UH.k7o@ud6l=1:h&49-:EnXW"GIE-">,5qjDTW%[&jEMMno^Eg5I_j+.S1?TIKD/S%g?jUu,q7l\kuKCLauk9INDjk2Y;?@nFLRHIIQc90o$nR(8(*UFVU^aXFZLCNg`O!!eDPi:Pdr%^mnq/o%.t$m#P.6U>':blB5J-oe7tLA)T(LCna@V@!;lVdtHLFE%28Wb"Q[!W&L1ud5m=[RkY9uL(5A0J)EW)`HS45Lk9*ZFBcRa%D(7*DVMoEcYB`r%a6E*o["7hT1#\eACu1XuBWs2T3bm#KD%hD4*]I/.YqH0%XJS-R"p)."9W,g3<+_i3<h$10DaG<OG@:^8LVB=o%/`5a$\Ga[#fsnGr>V$KuE%-fU,&\NDaoJr^3;XU,($"p`![g>Pb4-ReO227uCciK[9Ve+SfAJ<J@kt;3G=E,q0bll![9(AjatrWQ%jPY8tRAbDg12o@'ne5iVB^QhV2bF*\n[5aTE_3?61`eSo.4TCAK$i1\\Ll)GD4Et+?XF1L\Z+8kVV)k`iOmeZ(;mtqZQ=p;)ks%n%8pMX;Lo;IC_PZ]]MsbOEl'U*EfG(e,21Ch<6k8Q;E*&>Z(,R0L[ZirK/pqN(eGm&+oJdMXT@_a]!,2-2N9U(1r3n`*e@%^&!=d5f%T)^^.47g^GLXaVf=$ZA[0SN/)ehdY.e4>:Xn[.iq(prCD.8)pfe+ZOE;kVXe.p)V%qP;GgM@?Ci-M%d`-;rTi2E;p72",V+KaDf8%Ns=e]AK`T]QApQO[\Cq+h:.lO'J[MfkTtCeW\$&nWOC0>U=qqLRVH,@9\%2667C-*H$F%ta4O=\MdNfiRCXXCC]\Ip_H\XBmj0O8%Ng5bedeG)^eg-ph;6T)sMXc:I(q*^Bd_j.5PAD3GAN.+f.ZN&NJ?\bn`SHH+0kTL<i7(P@nn2KB#*jqLjgRM<ekjp/Ak@$=\K(mq%HC4pV@9Z8S8DB8b]Tb4&#&#o%ibX-+bAoK+g2HL5.^K]/%nV/?CD8BS'@ENS/KDD@\[XeNoq`bV?"]]Us&Jjd2NZ7BjiM^]0QgXj%%_pau(j:LhP?=k`MB/V#X`EPbEfmB8\ZW9uWYahkgi^KU7O#k]ZRGee#Cbe\HhJ'DB%-bT,.jdo+e(97<ca(mdFC!:W8,q/l%m\7%%*p`C@PI!aXJ)ZeT)lZNOa!\^0BHd8k<0o4$2AS*=`';5Cb3>LRFq%e01J\Xo06a:UWls>@]m;R^eWn2YP?#klW^Mp#X0(MV;%j'%Zfr)%SkUeg'49/U>k.6&s3'Ombi1kA\#\N?qdV`QcAnMp?hs/%iB.%UWn?ie>3rN%he`/+on_Q,Or&h5_8ct348ga;p+IH^5iUrP%f*E?l0b$pLrlX@srj[Bi;D3@Z/pp1CBBbpBI-So4pcj2[Jucj,KU"LfE-;),f'@HJnCu;kqPnsRbUaFm`5U]WB573]e^';I(Tr;P%HX#THNRM6*^F+AOoaTfPGP:NtbtWPfM=:B=//4_hSIacNd,HRG'76(IDj4^BLqVfuiW688mLnN?@A]Y8(.'#q^?kO'45^qGj*6!(%Hgk9]Adasij2[<I)-qc4\U9AWBB"WuLG/VQInaq=j*(Va1Ne9ZARaM+3$b]4a4T2^ngTbEH"$eG1`uQOL4);#/quFO;r6J[&L!GW%]^^QGTI)QEdlk:$T^TT'T9d3f+%oVh]\kGk@URtIG6p\3M=G.4,sPJD(n=6<*m`;JrL]Pi1m0W1!8_QV.U`@;nlIRImg9)sqtqKn%&gHPKW$>Yc,?>V7`C2'G')UqTR`-@UnLIT;/Tj+WPC0Id\kCVF:T`Dh+^ZmO228m!htPX9k0->eRr-BnQWX9ae7O+>q8cM&Q7r5"%[L:!F=Qo*eiZ.HA0/!\MR/)]]n,"mE?_['PWTJ)6hC;n)oW+?<K[Eoq_<<Q8_)pPn6g#80-kf6qZ=hGD;6G2P>ci3E_c_j-A0@I3%#6E?TRWD\8g75"+^2q)<VD!f8s-=*=&P.DKq'(n1YMY\=,sSbHV<0<lY[el\jBR'c<esDA0/T<(C?8^tMFA/Ap<CoIH1tAtQt+Rh%(X@*mOiE'Qfb%HE-O&@T3qj?&A+ua]Y86168HfIj4G+EH;<gLTblX`1S:[maHO>DodNX.kCYe150AN=G%-j,JK*q<L\J4OWPBoTZ%*!t/Ic'`?RpO0ioA<OoZm<PKt/S[kb.mM(hJC9ZAL+>csf-P'4k<8M.)./?:E5#$A1LP8Rr;s[tIIX.C1nKa3DBFtV$*og$5=/N^%IEoP%T4NM8+&<tj\`WY8#lmiqaT1HLs6PL#:BU.=h#5j6$U"-3RZI8Zhq2+YMI3MY$rB%_``B>9n5LPX*$D2o2oC#dE;ftLr+E8R%q0pPqS@sWfh.c;kq)V:KN!!d)d?KIf?r?@<Y*a<[jIQnXFI@8M[f,=EgS&lojq>g=ZV5RCEhE@q.Pm(H/s'W<1-P^!$&u@iM,3$^%jl-YMm+u_=c`Y9k\]3f46+WQ0I:grn64c!LHiR3?G+*&N<pa.%eVko#;.F"S^^lX1fLqdpdA$:ioUNY*/PP3pC?Ltp>/"U:Wd@VF%+8n<#Ac"LcmHXL0$,/Q6^i,bpr>Ri>UF-$W\n+BXYj*8DaFc_8RjV@ZcU^hF";hUQ2WmB<MgOs\Vhgg5NTV.:9HJ"<_a.BO74ee&%Gkm2s;84MVK1U[5+XhjFL]qu96%hXOndYMd":Xr1@=_3i=X93479W>W]E.Lu?X>CaVluDqC!`f$!Bsh21b0/apICNg0muQs!;#g$%F[MgLj:ol@/F%f7+51Q:68K$*(=#c(bQ<Gic!N8[:F^PGG02+s(F2!Po/[<bIBbOQW!E):JLK>S>sbfHj'j,J-=ZN)W6r:V6tMol%kQ\u"a"6"I`!O9jWm@oS/lRmK:jnWH.!&):C[d:9:BmMiL/Lq)h:ISm.>3J=5%Thi.&3U[<QmN1&N9rbcr1ZN+lQp-!GEWFW.+6G%_#)llHDA+qQ9X?2.5E4\]^cJ3_a.]Y0gnAQFVf$+BemWoM;=>5W'dd.\>QJg[Hm##2'8hs53iiM^si>CkQrK%RtA1k:uadDT2WD?%)[*Ja,BQij1><%/JEKfMAKQt;K>R,QSLsM(^Sc<+UYL^iZ>LZ-cu+X-&VW"`(/kGpLsY-(i46Y+?iAFEVTa%[BT"mr5.KCi_Y<?p%V-'l!k33B;gHt=W>.i*<5/])C@)pq,X2a-dYs[f2)7S(G:O]1S)`mQ&Jfs\o?L%?UTmY)1"fSqnc$'C]_-<of^(p:)Y#\,J0p3@H%QFNbX2qj)gTdbq;P@K(8L#''m!)F3r=C;oU^44<l\q$[]]_1L35/E)0cieYeHNki565.K,P9i$c]7r[b<UBT;;Bh@D3%.h'0k`R;%P(3+GPt,_n_C#N:s'Lll$D^6U<I$)qo._%Hi9BCmZEN-_Sb%8dggT?Fbf4f#7)pKBlnbn]Y^#sWmjMuSOTf9c`;\Q!&q:bMR^q0R%'o4ru:+VnB+\"a$k%?"Vo?%D:cAuIf=60=t\""$0J"9Ep[TFS2"e]1GBpdE6JT(O!H%+7;-@KNh)`?9:6'.7Q@1-#Z29&c@G^Al&%p?jSO\STHOPTnYT<rgG_75b;IgrnoknGVK?!J9'C1A^H*d+ohkrVYm5#6L%a=%$)N'FYC6ng!SXU"k``SOrK%@g3FlPq#7`jnX#_%/LWuCo,mGXA%jd*!NkFQa[lP,QN&6&RY^]Q=8BIS[a'/i-T;[3X(Q)5m\]LS@r68HnL#mXG]q6J8#pNuWQg(Uo&<[]24,\leDNMI%At)^78NnY^hlTH7qXFV13+FSd5%/P7@(qeX9+(C[4C?3#<dBGm[h]J((qb=YP%W<qI%qST%1[G-(+]3eimCb[pNl`L@'1P:I,jZk%_<c9io50QK)tl+Y9m8h!fuH23C$OI)(kTj_q1IauZHd4lN(Taf-$he\N3,a3UQiSHAc5U0Z_kE@/9ct`5a[>[Uq^=al"I65'Hp;"%5q"_i.L[-2(sFH4?@i,QqCQA'>);_uY]gR2EtdpMZfOMrN1-QpK]<:#^?<&@bZ1:g4s%`8l:o%GT-XA'ptS@^:;:1oKuu-AMuke*%-AW<93.(@D*_cs5Vh2jb8j/C\#ObdqZnY!eLWtZ1hR!paV=o]9'bETKA:O1mDL'7uQK8TYh:RPtE$BQ6kF=i;)gWC%I2HM"?W$/B%c.B?(n<DpnfCO`Cm`$j=l#93BIGB##^c+9+#3X0.lM6gV>f<2G"6T&,JUIP*IJ>dk^1a&Q0.4ZhI.ZAHR(Mt@#J'`/NsGO@/AK6s%,IT8RXpUasc9oRof:!L:)u$9;Yg2Kf*q>*Lkt-MG+.k_5^Au%>j2?ehGieY/O`Mc554Ts'c4Q.pjO)Z48`O"[B`q,(pPY3\)uHA-%2`Ok0G5```E3``kQtp)c#EIHB`e0(#+)M2aW`q(\F89!79-E<k'kM'^J%iWp6eC-OE9[9\^A(t'l?,hO0']c'ce`<<De=tM]^_KJ%fr_-nRIK/QTfcNDAoKXZq.D?3Y`)F;f80"djiPs:K'e#CKisV6irtfCY.q4dEtNaK(N'Qj(E1tg<\Hk].r^u-n%g,ZIjsh_!lY9C%HQVE/-X$Mt)1s'YcY>"ScMpqn`GmK035O#cIN1G,?]EB7@<cl,"bIc*btU!\1HcV-irXr&G1N-1YJ3D?mP\(FB$^$hg@LUY9=qN>%+M!(^3LbrApMYpraj3fJ79H-rpmM$l>tm$AIlun+hmZq-0t"7,mLm*Y;htZH?!L9*Ou\SWo`QO#b*AF+Gk)odNU>`Wh#bgAfMkDk%<fZuBmX;keZ@i%saZ4^9985nrr?aPn:\LK-g#:E!,t/9I`5bC$e>"_=-K\bVjX&N`PW4^?N>7PLqR>"H@Q.'l-!_R!:OJRT\H:o[%hj:Z^H(`$i:mMkN9n*DDj6&8rnC:c@YVWPb<AAaU%qJTt59n<2#9V4C&O.j<9/!T^roU^/)#Xc.rD`--NC2U?a!Y<'&>@cS\Qoq#%+,`S8hrRLFc\\t3AF]IS5Io$,fB),^#Y\U#([*<=Z#3t4,#7'r2+,?dV?hc:k%d:ti8rtsZg?`neZ=#nYq1@K`1W.+-GccDnA)H&%-bf(m&Q[COMI3#t&;Q*ElsfK4:Hq4$MiPN0jc!+</k.UNF0N?5Q\>kAN-AY&+(9-a#&V:W;+Q2P:grHa!^O'6'DB"#M5Y[m#eZo&%:[XOnLI%;U1!6@Lo4(r?M&QT3og9E0R>(YeQ>&c[\S.X^#7UjKNWh:,KRWDq;g1ttibR"@0009("$qtXZWt%cj-g3_n6F;aEaN^4%/:d?BKFnJKn=H"5lIm$Y1MQI1@7aBt@ZSRK8FYa%40o&^gmmLDmXi1U6M8HbHI$'-R'"S^8Rqc/3cm)-8EK%$(bH_"hM(FrlK*o_%%[_CqoAb)h"GIK:6=pWY0#YFRBJ8dPJZlF/pQSE=>ZX$]IQX3OC'&WK`i*U`>O!tX([]%3&7bK)DVPi^Wl-VsXC6/DZeD_K^]!O5%:MI2!WM\hpK]TSj4,U_(8B)hDV8RdNlYQK"mV=4I55Ue=Sq=3F-`6Z*3Zc'oYh5cp)JjrC`2>SA/GX0h5/=spJ6BM.2,M3U$,Fai%oe>-j1@E2!HH^_L+']2T@B=ZLKmsIhV;s"m:je\M92[L)^fnT-S\+>QcS.\r#n;qoC!!%pNVN3,'E^6K2U9=7#,PS!]NE%Imf;gj%$9T$TemrbIUeW;1chAJ!F67[u]LZ_"07&6(>-;n&mX.8o$-;&=giY*^f:+L-?RnFlRbjIA(o!U`(P\(!fUT3R2VA*0G(\ta"!HZa%<O9GCIUaei7=9W*^bl[q7h5;=l0DTlT*=71n4m[K82s8UePSDp#R$3]6Q":.(RU5[69[0ipL=`9pP207U/3:d^\3^rKQWMRhh=:P%eS=qO?7aYk#5g3iF'?_X]siOH)8GbtSH$&'XSg6Ibdh*Ph#05/W%u5\VsM:lFB#>JKn7kukN@-qQ)r]k?fK?(C2.gAQA+qi+<!=6%qc@^R=Q\4>!`>'RQV[398K)1;,b$,iP9`5uOFiAdWUDqg5:WD@"+ZL-6G1^<V1CQh5PYR5aj!f"heT+!NjkT%#M<Yal/cUd`atQ>%Z?`t%bsuusJ%i,#iGK#>MN%[9IkuZ\Jf\_4^*a;L``FSX#R8$)c:tp'Kl#LC&3mZ2RKKNP(+QO!^j5l\!<t_LJQ]Th.<i%U4m&38%GZ3R,Eg6O%JY#XY<@LS^jj-FN7Eq5hN_/-PWLPAG<o0*Z(;7U^0C=7lk&Uk/-%pJ'"FWSI.Q^$fS0rq6H$CXn9]^W3gM-mEQO]T1%+#k!,G=Q%]&73[DO0]o>]nT-D:;2s_%8.d=h^r5T!m`pP5@^hMf,r,OeG(sifXtjB2CnH0SnS,Wiu,k7QZkV1M/0HFG@9:Bk$:6B%:L6YEkJSJbGmjqVd3!i4#J"GdiJme:3u@'&2Kj`2.a>!`a\]Y55[V+%d<Y81pj>aARLBFTojH(5(kDtM'u%$Q5k/l"GgoF_%!VGh%be'p$GeufG`BU-oYKDL<ABQZ[nRo5YD3goRAQ3)eJW<*oNtU"h6h6C.3>EAULRGk;kE7<;5(EL@l%PnXJ%FMtW!mU`/&rI$O@N]f%5L(m"/,-<u;l^<&,4LbR#XhCm(0A][N';4P4932:SZ@gJNo)F*/W(n0^='DB$+/"@#<L@>P^8`)!7a-$T-RX;f9>:R&]Db@Z3nh!%#=!7Rn(n]*pcfXAc^fC>>7jlJURI=T]'bVse^1@ED05aiY#jZFE'>%X;MD/`_k9nHB2T_,M?\2Rnee-&9mK[u%Ma,*)`]I"k`CZq%rL+8(0tf@S`6NI4;N7@9?QYce(;X%0d;[q_GGZ^6-"/T,!5)J@YRdHcZlM$q/X4&5-`FbY2e7NVLMmHp[UZVMCquakN$r1<A8-=n%o_JlfeVegE<0psPa"+NlHR?TBF3qNcB9!AELI>t6Y>d%L*YgD,h<if09E,HIZa!b\_sftk6\aN##o%"#4t7S_ljM;(n7u\a1ZVDT%k'$iC)hpGIla-,Ce-p5K*$E%0^Vbp/o0T/\&(2_j4YAmL%YNArY$:L0^#Ie`E#D`[)cZ9/Ic\K@AT1$jU_7B\+)cA#hSPs^&Us'^%eH>@$C]Z0^h_T9%1b6Dl.UfJ-cFTPm5(e8"D#$d_$\hI.bf^e2T=\1)'-b"Lo?!3JZg"PNqg43-NHY\EZ#\[R?Z`ijl*J'AJ5f>f%BSSWXl1op/TMQY(qjWA</9_"h&)F?Kb,[H\c9O8J-]L3(L/Y:feu4ibO?U5OPnX#TC:P;<!\$R<.7Ws"0hQNTC*(s3f)RHZG--IK%-K?FQMf$j*9<W^AZdC0k?u&YDZe>=9QCV_3p^R,E<*MKn*+gnFGLZ5i]D2p&O<'pAYl#:';D"gf-p7,,(A>MXKrKLJq$TOV9^T2C%!+ughB*!K_$:W$?ItDjZEX3;*We(,:XmC*_=kJ;m(9lPE:h+Hsc>X+toKaYkgAs)*d4&J+I5up&H@gR$h?q]9O#qjLMi0Xf3LIbS%]WbN2^*.cgdip9]<5;mX;df&pJ@aF#Jpt56YGNQ>2Y3SQT(^+]gq3WD1iA2$4tE?nN>+N+)o1>*H5Ar&Os[ggojX`Ap-s4+V5C+j%]Wpb=\RRO'hS\btL5qLr2P_=>j,")Mc#9WL<OH_5Q4Bp`hJ]>4<)]mJ0,df$P3,JY34\I5UW3fsj&#XV<;R+HC!(?X1OT7*`Cn[#%:6duedq+u&9n<n0'Nf$?qI`^oVVoMd#B21=o,fiZF5Uj<m'iVjd$n5-2"U%X^ZL1m5,p'd3+;,]0i_63o0*N;LS=4HKl0.[!(-8=%pM/-IG(sMd>&P5dTVD'o`]t@KmU0D3+NJTbhHJ""S@tRZ!!$KD#6Vd*Q/&\hbk*R"<J%qYoJ>pIGj'mLORLod]D,]eiAWBP^.X1A%)gCj3FQ4p"d9Pgl?chl;EdWAnJW#d2q(Chl^Q3e)4Q4Gn,7nnOgRJa\As@I`DI/J9s7[)[qYU[]I&g5aiP0gk3WdM_a+Va1h$AGY%;=N@0(>Rmf&6Bi?/oEm0iHui>LqU_R05.6nb((pbR7^[3fUS\'3Uc,.o:)ds27^dR.d=tr5C85LPf1$IVYJ"m2u3(#H&qX\i_p.V%puK_%#^Ge=^08aZ]=:5EE%Q>:34@D:[LgEa72$g6?S\<G"*[,+Cm!YB&)>3AFNX5O=bQTO!@tl?M_osT=SX^`a!p:5)OKG3(g83-%Oi6_A&%F0O_:-_!2:=GRrVGnV+)*b7&PZP["EfiUSD;V1:(:A1Bl$m'48"`5*H#l53^nImFnRD-`21*R;O^TN]5[SL!sV;khsQNj%\YP9Co)-GqN;$Klkn2g6fpjG[Hd@[X?Q$TR=>W8]4*K0o\XX8[:SrO;dSc1$W`g9W3KSAhG(WT%%"A*<`$D.$QV56QnC_j;7nA1^%G"_*TI0Pl4c<]6k[%?qf%DG<WY7!OE1br8KV2mHOLbq0,4^'=+'hQDY46";[o>(DUhht37Z*5k/7IE<TKX:e?2LBkDl1[&`jBf@U%VkP51EV7F74mn6[G<M`1T.FOfU]?=!<)4DCigE!YaR_L2^K9iGH[<U`cCCZV6UMB`c,l4KWuH]*`f=?A+F@nN;b'A`bj-VfWHX?8%GJ*YoSon9?V")"?WU4IQSq!&f4pTj]Up3C+oRN'ihF>/XV_;2Mp0*@=+gj<H8!Vt#Hus`P6YNkuYJ&rB&8?=;0'!G&^3Z/98m!43%:rY=#Xp3a_IDN\J7G;E^S/ENaH)k33ooMM`+*fFl&$Dg`/q]4"a/d4QgJ@#WIAjD,6_pi)W'!O?D,-Y9<ge_g3,=':_Xm9epmKT"%qKUE\l6-<h)5:uWF3@&U#/<TopY2Q8+6h&;i9.),p?EiM?O#s1;E2FmpN9C.SN[o7jdGhuDd"7ID:TrGjq\+0;RgoRU+Q<H@Km69%<#grX9FW66*%f?KV7@.=O09.Oe@2;3\&W-QO4C$8['G1-/o(:[l+K<DOH,K1btN3$>i.p];U1PI=4BcniaQkL%$:`.U]?<`+DO3_%gMr/W8@+43;tr7D@\ah.P$c+57uk?,@ANA8e<Pp)SsJiHEde1r!48GB;qPO]n_34<5g$:;8B'PA7m`ZU$`\PWC#tn`BnS<jdAk_.%;MYMNp%WYAmCq-p;J(p)2p'ODVrc_\5g$33B//#/[X?A>>5rJ(!Gq=JX7g_5H[jRcUm]CbhpUGc/&QNGojb\I?j(_h_jN_<_Rk+0%VUD$Tiqs)jn#qSm;<<."VD>is;_`au?AWFbb+i<H/e`'`-*I:?jf'JOqcLEc\@Xl(?="X*o^>hKGFPr$o0l^bpLET[ChDca\6Jp3%VrA3fh7JN5(RE:@S6q%]2<I:JbJ<u1fP.DX>07];9tMJSl,TmfY0=.ShYVOA%eBm#=8_GPXSJ`CpH$@pS9r*orOY#_?q1,uZqET8%qbKG?n05dggn"Ag![Ak^J+rcP*kUkDn?Y.qHhY7sd_5X%qtGZo6_1i[-gpoR+6SVC-9U,RbG/9-s623!rS.!dH),f=q0:M@E'%qi%o^7UrH2GnL$to%aDKnCUI\4ejhVR?AnEu_W&p*H^_X[%DlJ>fpVVGKjg@:$fY&Om*5PKE/O5>ofFCsr4cfKt$Nf6pa=ZQ:Der-MT%edHM3(=rr=kfCX"Xe)d-J+<NciICV&EFlc>FLY[@/,64Vj3N<%:i-;Ak\1aOO(HUL,="sJMsr0_6e@0o$\Y9N.hq?C.-W66UHK(r%cat7Vi>n1K\._cp:%=$\S_!sAY]DRpVr5d=(n1K*#nD-i-hej3hP\aj4E&51O8+cd+]='@a)2?J`f<?L1_$(b'soHdcQ=K)bDrMU%dW/K<QB?oqG<qos</uH<X#GX;4B=95SOON3SC$W9bMH/gqkp@4$;uE9CtuU!ctXC+V/<Ar2"LQ\N:_oJ0Ij2(UIDG?!E'J'K%Qc4%KX>6F'RJeN-=th2jH19'L&OWdLqS6@.J>CDID%bnN%4,u^'6ob^.AEHZg(b0GC(lSFPibQdI"K^69B2;*]YZb!W+EPbKm3sNTu+n%rGGtk[^a0%&&&dOs*';:6T?T3I/3IWnG(]jI9\I*q?H&:?sFT>hp_F$56^2soidI@mbHt+TrD1,md<$A=X/G\+8Qb1:AAf[,OfHr%>Z/!8d.:FO^%i`k2@<q*MV60`8l"XR=@U9eQ4d>"j8/!nBd.\$c<UF5RB*:8M*@RdVudEbZ<OjE7:2o2Y##P&pg.jg_<!,9\Q3$i%&*]!,;%!h1)Ns%P@R'_)r5ACL"@Wn;cks]1hHXp*RH`qqSrUp8qKKbVCO5rc3U%TZO3U[$DZl?q$XZ"QY;_H5s&tR%(_8nM>ON`.%p<7<t/F2=tDG3?'[UPO/YQnZH[lH$r]>?,]bOtaC<O*=LOuZ!)er9!d\11^&hMCVD7?[E-I!9#EGFKJV1oBHh5Ll3odT^-T,ER8U%2E`t]`mOQ0Z).1`=U#JhB4/8r.QM(O>$60`?(02oCqCd<][BC'2;XU+"C9P6gW!F]1$i*=jK)P>Wb^m&%(#ftGVcBrYmqW`_?c]U%9Bd0CA#`j\:/S4ec02K`Y+?suFND87Phq9`Q%b@N:aP:`:_0.tI<Bk'1?GuP`"kA*]Gk@p;XP?r=o(l/)F#Oi4qh=Xi2[#hqOiAi%WH,52/iV8E?0A0[CI.F5[15cKLR/qtN2=;M`ui`3Yu?(Uk_>/jL(el*l2cS\OqgAVC`V3m**on*Z4Zr)q9Cj>+\>H-)GnHPEqu'_%Q$t+ZH+/eMVB$<">#JssQtqEZ4P^WED66ge;hk9Rh8L=,9UgE!Pq;XPC9's$9/bt!j#]l7[eHBcFWV1PFdOrmp+Ne8Uu[Z[>cH([%_5.8/^5n7Eb"B6`FT`.Z3m#IO="[FD?T!G)>WV32-d#@fQq6d3_"t3/adauQdjhRrEJGE;W\nc!bXgm*n"esn*IqX79=lRle.un:%N_,Wj8^P!FdrRbp\5o9&Pd^=H'j=J++4@L>Cp4nD6`Y.G"r0N"g?)X]Yk<EuMDc+)6RrBVmX:A(D@n;We_Kh[>[BB)hFNe(p=uno%p&X#@^?$8Wb4UVA1kJ##1(2&L)!Qs4@585\1k]748XGZ9<ko%c>2O?JSnq;O63rF1JLBR,SYG[NmDsH*3F:-u;r"B9,bHNm8:F@4%[b\paFpJM>)OG]&\%IFj0Mi;lL)h.pA92WWe;a_uQ8)"nIP).A!'pQZ[uL+kqfe16]/F<4bp(Vp9>su:Pg<0OnoV$qHXD0,LCl#/%OO$n;!REF]\PAoer9'7=@ZR*4aJWnH#Srb-<ST:pOeO,BXQU_LRaWVDo6dN7E+m;EX-JC;HZOAp8upl>)%s8\!q;CLbc*>hhq'V/%iKFsL'Pn,6/Ylp\'`X^po(Hc1!5`S1]`B_"rZlTn2D+BZhO%P&_IE.NEuO*bXENfBAKaQVgQ86>T-Sn2<Z,Dg(5/M9DNb/Wb1?X]%)!,P_P"aP'<Mi(L9#IdQN7sQ"C0bO2o5.51cEoD4WOq12Gt7ce9TS_4e0[sn`OgCq4Um.rZ.N(j@I!7\qGPkhJNLqulHXtKiq:H"%ZdI`iQ8<?N6T0!WYA,DtSIE<H$F"4+]A4<6Sh.7N:NZlU/EBQR]6Qs@A[+IsT'AFUT6gMAkg`VL>jonE:+aT'#k,Gj!L)sQ9qU$<%7BP^Q+L$qBIDI[NSo9=uR!igl!SOaEC/7u$ULl:C;/:QKiMZk#/Z;Ot`"ANQ2%W'!e)p!GS%K3#/a#8HhU_e*?6S*=&ll%EU)CKr%eV9=X[mR8OTQOeiKX5aZ"k%.mk[V9FBB2HC2(c+sE^+D9^%bj@BO2^;f%SuT).c?hDB-Hd/OnIEC?lqR%PZp3+#6o$>X<tW\G\Re%!XKAV8,MS#9@'@"T_kkY/Xg#6!l<RIU9tK;p57e8%@>AGN3I,POSIH:1L%>g!BXd",A>WUTtZR3qj%jD/eA"q]UDQ#<]<3EfQ6`X%?l2F=?]kZ3WFoc'%/b9\('*+/a<KG!1pbO"m<:d.Q2/Vr)mMEtG#7+_".qFYZOr5KOkYa3o\O*eBC@D`#`>c4\A%OJ&WX-Y(qSe>%WsK'aQ<?GY\^3"k0%@5dj$*IU8k@igd9O1g`!7Ng%25+Fa#;7u!19&@d;U^;72>mUhDpo((a7jKs&n].qimE7/G?T7J$4GJc%UMh%@ZPj7]cIlWF!DYtZ_@2"81[HtkaL7=2Uos)E(d]JR0t;lCO9E3g5Z;_s.hRi.WZoLGtQbE@H\(!\ipP?;&(UD<gmYP@'HlOUU8tD%&t9;[=].cuSh:!Xh3:nn[C'b09q><T&mJ#HM!2sTSsujR!`adHZ,PqS^rgTP:8]C0?V.LJ>>Qut`"^^hQC\P`-,Y,9iPa5OQiq+-%44fGOrFbM(H6ZHo:bE<9kFY6+Z'!QgDZp.+=$*fdj0I5#%0X,H/ArJfAgO'cZne9q8LV]\mC/t.$s\`X0P%Kb(.\S`Tdn/Pa9#4N%Bjh\:P%S;S#Ga<fGZ2*^55O(dme`3X_uK\aJ<b+37j&CWlW)<bS;4);1U!HUWu0QqL<dG`%S*`"f?fped$[lADGro8?9tKl(>QTX%cFebSjuc<HSTtC0VHRs%)ERHs3h,^p20@sqFD,m=!G^iBgS*o1"4Y\c=4#>t\:&,UbU_m&Ir'08SU*Z/EJ<(NceCA6")hENPl9Eq%,bn%OrD_RZEVmE7[SSVGH$t&-XKA+4fF_j]dgPqMhe"OPnJYcjA\?K..mC(:frXX!o3*[Lo3"VYW7Uf<JGJs-+7`eu=3at;?Z;4C%=D#-V0kW:6`g)T(dU4CIXd@8Jm-'a(F4P0PZ_(-2e_Znb$E1Dc$A*EXBJ[_"kqHmoGjhSK1!t/M1NhO8>rN^\h:+M0[n@-mq.8HB%0e%:p?ae?O8K3TDG1m:t[[)Fu-L86bBY#o,JY;(=#!D?m#u&#9$cK,XT6eJ2f>Q`2Q&c\t<p/\gI#A(Ao\*:50O,PnhQY(CWtJ@1%NmDGHj6#!cf3?Fqr%W'RCieU_\"4r2Qh:]AG$D3i-&`6/or>gS?3S5-Yh,_^40_L#TD>Mq/FTq2QOS-UdsJ6^Um5q6>%W&"AO)E8%/$5.h#=KHuJX;/;deG+a2XQ(QU5j/,riUh4/aE*hf#/C5K;sZ-!nN_[7^A8D&*(fsD1JTuPs%/$[NTD=MIXY!+^9.gZ=pjj9V(s<%Mea9&QC3HH+58N#(fWC/0M8?_R("oOQd]+G,63V;0s#b=ZM7p^FtYLD/-I[c/&C(GC=a``1O)CmQ[_1[h$4'6_pXNJkic"aB`jsR%V/eYXd/(n@EQhotijN"a2m^DHM,>MkL<Q=IX0@F$AtDZ7r08Z#gJ4jGOkfi.)cZ]sQ^b!aEQ+#RXUhE'R;S4s=::CMVdrsRVdjk.%/#)Z*?mgF4OQ<d;[ZLGB6U!*X<n5a5bg'eS5a584Bif<(,![XE/;_0>auDbO2"eqoS8G<cN!W)7m:J)Z$9N#@R8(<B/JQ0lOJI;K%`s$gtct$\(-cu1=R*J;nk(9]VmCu<]b!JQe?K9cO2GC:IaiLF,)ITVKrO\qjO\p:G=>*%r4sQh$/XZIlFb;A2<biGL]@H(]PE@T@%o0^N6g1bK13!\q"AkA/fm?5PnedBZ#GE0rF`iV5DoBIK6&hdFiq2PJ+JHjE:<=b;C6!_so3NJa6Xd#NMHa_fWVjUoS<D-O42O9D<%[OrCs$Z;uFgMS[>mLIdIebsgVF`khHB3HasH%QAPXttMu'eRPY[d!n;a"GWFFmtmTHq+sDk\M3qms0_834p>F6X"m+HFR8;5IPu'%SGk/)6eB6C[6rJb4ktc4WX#PZ6T04.%GXnnVu&q[_u5.uf#)3G6]pKF_q)`i]QY%k4)d?QKsq1)TH9+3(OAa3Ja;9:@PNLH*LKFO%Fb*:d0?0IhOQAWfRTBn:qj(:V7'>p?fM2*Eqj5o%,@kdAj@2+@4+f,gn3T+'i-?8VA:G$(fsesB6WoJ>p%Q7?[V.8AKU?qtZ_[Jq%C8eJ'#><^n$ZT-<.%gL6?g2]pMQ#:+D1@>4!.-EN*!897W.q.Xk8h]:2;U=NpAre5H%(ja!@'R9C1o2F7<%rs6Q-;._EHe!KAdZN%VsD)lbA`q."K$XebbhkCd@f(Ied-Wde)[akD];trZ[eLE8:<Tg7I&Xr!@q%KYesJ:^AT+G,*b<K*hjjdF*-e.LLRA0'u8MGDGp.:%QJO*sOW*'FC"nMEl`Yl:6Xp"BI7QXt?CJIm-6r:TSWqmDVM6PoL4QRpf9/bb%.2\59AuO.[W+fu\s#4?_AS?V@8#SQb$/%%L"e5_%gpIhko+%M'plCZVl"1Y??4(>0+0ufVJbdcP.F>^lfqe+/]g6,>2o9A/Z0-bQ:^n21On>pS]*Bo5O<H=NMobY^@Ccj>989o[>YnLs%(P3f'9/n8&(LWNc>)nW_@\L;76]slpTX(=Rdt<kc]#1Gcl&%9:rQkS5nZUQJGk$K;BOjKRI'"ZCS@?h6`=Zm,(@n0"a5X@CeL4c!%)U7m,V_87gQ0Y*>X2$s5nU8]J3@\L1&>a`QI.DnbZ.mM,?&JjoG0ii*.<[e%GcoN[.ocmX-<5;=2C`ls19<Nh-hFSi'mAeCD$-T=%@sFsG]2>ifL'kP<fGH&"<ne074B-Z8</]j8=4h5Eh<Ijt6E2X=6Usko8@?ESn:8`f;2&;o@o?`Z`-6ff8/].1XrAL;kOCPW2oSRf%@^idKZ.hjo(hrg6pdIK[Frm:IG'Mgt6@*RehOEe_+];^g8u3<,*n:r%_?0:&3mDR(4V(\1(G7D1G$&+Y/X]CQ.VAdV0/Zt"Pc5>g%q)P0l7$T1BV)+e\bkBh1giBIg?iaK,*q^FKdD?)8CSa2WR^[%uF6JtdX2NW`>T"2TfW_!tI%Q06]cQMc3PBLpFPj('f1C!eB&V<I%HF@lPjNQas2S;Ob]s#cS&@i8Iq@7V'S72F+c@*%/=*Gl\)p]G,b]F4s.95h7g\q%0lhWBkoY,^dmB5"MT\G^qh7f=qf0%9#eT?+W%J<GUJ<&L4Q/Y2n<@J6[te&r'_kf]RJFF(?:HW31HZ&EP0dsgIp3Xo<#[FGM^VUGXTnI6XG=4?C;p"!a9D5ujmenM(nnj(`IHF7j`%Q&u/Je*5sseF/)Q6oCNAY$Hlj%ol>:nt)la<n$<`d])u$*ho)uDph+MJ'_pk4d*0j2Vu3;:2g&HcE5l#$e9?Fj/9L.C9MB`F\j%'%'],OPcIfTgA2W1D*8A#mDB0F=QeJ.6l#u1@G1C\\&XMhBeT?*;:i5kkX6K6VfFD4^Vmfj8[Kh9MC-'%33c4N#Il3d'q3ZJ>j:Kj`%HF7kKq.9S@3^%)R:<P[h24]FnXohYPl.+4MSB&*g!-mHTMC8JSS1ceQi*oe>&9DO[Y&cLV[DF<7ecL17LH_n:O!IZm@]/h_9YCgL%I+ihNX\),q/nsXi0.f.!ejQ1@<!j<JX.K!@=sqFT.Bmp*gfF!A7hX\7EG;,<hC>/i2H#oF(_](><jc"/aeb#RFOm$2=6_5#B:H;#%Ar`>!N"<MSU1R."QojtfY,o1pgE1KLCgjItX:JMuk0Bccb??'[V0@N\mn]5Z]%aPY="D(kI>_;\*-5a=UNj3FEBf0q7?`AlXOJ^7%b`94Y[;Xgd"#e@1KeHWDA%b'Eoq&40ojDnX(TBJh`NPc?."SOtgj@ZDbc@''@K?4gpQ"MTdVUtH@'b5]V>^;s.&>V-pXa#V_U*N@%LXiC]aI(UG2N^uK;h%tB[W95#ZB=JG7.lDq7&U'&.&6GV=KWFpiBRS6DQ(S6G!e+s\JqPWEAuC%NQq-Q<TVt3q<6LY.0MpkHl]`A%\K.3rVE@kCK])3tJI%.QFrOEgDr00$J8Hp?2*$4n>?EDjU6sB!ropuh/8b?fJ.Pgk\Wqq_m.3SPS>De8eD+WVareI#@AS\L?;6pq%kcK-;4/fu6g-_;e7,irJW*<K:mNs=C*UEnr3*.0&@e4#?=NI_+mOq%q%N=&+q0;&Xf:==k^SQ1QeS55"]6[5)F0*r!;7p\J[-&]P%Gn?$+6-K]S[TqdF^6a&GOMUV%Yqj:m)X_abSPigoJ&^;>C:JH(h<sH,Df`ddM)UI?\3!+?A'oLnPO^W1O6)Sr%T8X(FN3.f^!_>:%pKCjcQ%LEm52gCsH*@5?*7j6cm]=.Q*,\Y787@jl?,JXJ[9cti3GNK2Ksb&:XR.!MF]/J[Jl#J/irKL&hgY6ugUDUW'o'&32G<KZ%&HL)W$>Ue!ZI-cV(>B8<pq:Y=ef*hEOG7=?O'C/DlY,oq]dimC$0\>He)#@%lJ+>Y(X&c4!"24hD,Cs^WFrJqAP?kS@Fi;=C0V/L%pSY\`@o6G*A1:5iV22*&C1?qnj%<G;Bsiag5#Z^^Dukt_(`VV>*(*tn)RN\fAB?PW"9TR_&7R'k2p<Q`*Q)MW`t7XMfXAdWs7C1'%V?Yk#f&J]r)chW/#`GdefO0_RcY2)gJIFj/-7=$-@Fk-jCg:4!4^2n*iuYf?2!%l?HJWJcSk\)rV5\c!X)V.HQO33LJ0$mPAgS3[%nUboC'#!Err7U3`^@9Ini_)kejsmXu<?WIN'ajb5'lN&JbfRf`*372FZ:gX-fNRn:X'RrZbmB<W?;1p@]1^[g;,Yr^q9F;q7R_RL%Dm(taR*dfp?*ImFqmSQEq]S>&%,]:dkomGpnMtE-Q'`?OVqEeKJL#qK>pUgM;SE="]?hU@(O>k[SJfrV*OuVPe&9caX':5^3//9?%5+>A]c=tGj1oKZ=HhqJXq)@833EU.chlPKf7!`#M^ACAj"[/[Bgpb5Hh30"7RF9>qf`5`\U,oq`Mt@K&V.SduUm_nskaPP)R9CPX%rH;h.mA.GH"SZ-F'#]U(Nn[.SA1a\=F:uRS=6$]pT1njp=hWM6Ctk`r^KjTUMV77<lM`NE\bWY3?<?&9A4VYPP('NrKI\0=LtZSo%N)=!sZss?p>4l&UgfUDu_-4o*eQpl\BGQ=tmpqa9ic\P,9FASBDk>at.W*WE9kb]N-$bqnKQGbY4iM9HCi1Fg/Xe`s@[ZK3GA3au%Z<8WLELqDJI50EQQ,WBsmu:>:X5If2nbUp7SX6<_a^r_%I?^fc?^g%`d<jm`o%(;`*;ot>,CPddYf['Zp9oI"m%\ZQpGRUXf3>Q;%o"EU9AsTiO7n\V^#q`4ZZs#,k0ku9TN-Au=acC-oNHD_![VE6l<&=!L<=@:;<elQp/Yn"N-A-T]4`bj*_92:j.V;s*^[+QGAVW6W%G,u*u1PBKF6$`'+(UX0t@3j\_RnSjs'p9l/S'Od5>Y+R^IF!I"\m*cgD0"K4fiUShHMrcf>VLQOJH]t^->@=hdN568C4!-gb,K[4%Q#S82?K7r`ZZ)I"":cae%meIQ^DF,9"hN46[3i[I*r`b\a#9OXA%e)]+ZU<%,f_*`^t-Y^f=aO??ZrCMZs!R1h9io'JXD/<PIso5%#fO`g@nS\0E:e@X!n<7&;%4YU6Zn/65k>nS[<8_pWrP#O@MiOVmt3J9Tm]\c_]7F=$;`T*-8g<h2-,Iuf]PXc.Rr9g$IG.cFfn-=%?A[oLl]oJ:gA4X[X\NE]q+s9JBj(JcTmV/hKu5"T\+rG#6QF7(@q=2"pgeUt+'M7kmKC0C%cu0__B&VP51B+c%sB@neak<c30[4(%<IdKf,&[ZRh6nl""rj)tGDLH1_/oPb;TX'cG=1bAY+N:@g;9^-G2);RlXue(d]'M*l!-H4<,,2$g\'B!g2m5:ZU0D/pm1+>)2sZ!%Wh7\NTsd,9c]TRBIBK4<c4DIH[F_s<(+Qj)E3::cj>'?jb4EfJkPCTjD>jCTh9P[L5Lj\M'0pZboeZ&urXRKGch5a--M+^8mr5G%%q2R7`G<r:?A$u6UYkX%FqXuu%c[;HSX#pVHf?a@o^Fe>.AU(AMH)PM_$[V,[rUb8-.B!%0I3.8HC>Q(blXp\2NW&t(oeTrOTltPH%Ffq?^iN,dCl;$O=kqAus;uJPN1[KLlhtf5jqG]\b:MK"_'^8jeF(8h2b[%iPl_h?i,J+LH9%s;M5P#?9lAF*Ich15eDloSq\+ZDo%*RFC7B-93sD;TF59QdH@-2A,8qO+MsDfHiU*cLRFT?"Ejh1P^+IbRqFkb%0R^-leMgNL2MrQIEM>k>]0\UN\=qAlF_D:AImS+A>s%qO+NGCNgBWHENn9WIB2aa1'#7%C>[$p3rEiI&c'icK!Xr93ZXf_tpomgDn21YqZ'GlaKo2TfU_"Xr,ma>X)B(FAMSaV(->/2oeb7%[QN0fbftG1"nDRXcLj7eh<X3ErN+P_mX)+/%)q5Zke!DO\)!W+STFaQ08>fhoi%EB9Wop_?1VTMWh7C;cF,dccbPQ4DSXsW[c=oI%jr9lBE_8EblXs0<(YQ_]lSVHe[l(;Cqcpo'ilYQQohua2[8[%tff_lulXqg^2N(/`:$;A@4,3;uih#?0R2<dk1\-"XqO*u@VrNj*%FKV7('81e$6_*ITeVDiH>X.mPC/=LYXfgL>>X.i%@7(d-j`CCE-O7alJkMBF[HXA#0d.F\$gTl<2"-\:T-QoM4RZ4J?*oK'W6XNE%n'u!-)ES`)hlBgs:/u&tT$So>A=2H\5u<sL.=k+<a_pJU,$5H>E5-^"N^1[.*=UP_-_sUV+c>&!kO8u"]26;23Xn;[7s!(FDt/5n%R]SWRMNCAT04%F\NZ=BYO!D^&LQ7rj@]>R2j)NI,RPnn5iHlWM3Fe'&D`^/Jf*9pUkKS3NBI&d#DjB48#!9#;288O6j&S0^]m=@Y%4mmL*i:Hk/7t5D(Fl1m(h"Qt;MU$t2-&UXpa3dSJKq-B/pR13@epHm4IFmo2n&_@0Fl,22MW.()mdRrWY8pmIG3h<V7C!?J>\"\c%q8bARj4Ol?^:j=X`Sj6N>^^6i$^^mj$Tmd<.P3Hk-/X"-jqSA_"-pPSV2';">R[cqTiU"W\ct_E(K=b1=Y,IaI'1J]kK\Fs&Wlc-%6!+'[?CtA12U_A<SH(lWbYDY,NlRWh:Tpt3VlS/%M>,Nq<'NsENUtGAUO;2"Cg<Q%P,HndT3N?CL?YfSLt>COJ6;UA`=[S;E/;DU%+N^j<o,^RW\"[&u$FKYW3le8U.Wd&6Hu!'QRPOceI(5!ECd;rO>bq"Zs*_tCQJS>h)<lnH-*EC7^Kk2X^KSmO>UB)hj%Dkf0DOVM%ID>9#F^.3qjmpa3&lreTWfeeq]&>TWYNU25G^&9?OtD*XdPb`HfEng%E2KJgkVpV:Sjia`?0V6S;!0b;kP,_#,9d,["r$.pC_XTs%*<d$W@bZrL-l?D[d>/$5!fgi)i%jC]QftPGpV5XA/:um`&-Y;p(-Y<f5P_bN[E<lFA-^eoRR74"=(t#"bk+iJiMCH,S6bppgc8'a%C9`3_<fk$M3<,.[0[u)talPIlET9>JA]qKVNr5@W27>MboC>DU-f58-E6@bd"+L\M;aU,2JH\[[[M#W\n<1\n],sccp72^Ql-<H,%QB&QW28>X]@<'3V@IA`W;(kt#E:+S8g3C&-\ODhtf\Xe%Mo$/ToZ[2!f8WWEghlo8?-X*Va_YYq#o:O%P$ke>_ccOX4Wi?5k2Ct/%8Q(S*,>:i(Weib;fT6<9m4_oc$7m,W?DN"O1GP207;d/9pV%Te@X68jdVqa?r;=_!-F;DM=+,Jo<!83PXSO0YKL`d4FBl(k%Xl2a%/E^:.jc[Ri;!d"-d5N2i`Gpg"IU0X9+LUB)Sk`Md`XSXR6kk8e^LSM+QQW;/iS%cQ`1pu"X*Y0HVrpX;],-Kn1%+Y7s!-EYpdu&m%("ekUgm8h'c@n&'<Mb%+G>\W8[Kh]+O]N3Pa]UDZd7>1'94)6tMtmO^3lP*sI]I7'2!=O(Z4Ca-EA.MB"V9lPYa\_89)(rPLL4FQ%r'<=)DK,E[J9OA$GMf2:e5=eVNqGdfE.Z9C(YbD(;'UZohbIQAodc"cYViAh)u;6A^ls!SZ!%G+GT%OeY?'pg2]2]Kd@2DHnct3M%=MO/`">,Ca2CZ`obV<1I1<K!8W(TBcVL\$()fG$_ji9kiT(RTO"j6gTiX_<kk:"pe^?RhAN%phQb:*rAS836!1>kn/$O^0V\J&@u%#Ii'Apa%.BLd2ii#te]F9d3t?.<Vf37esHN"\JJDRb*-8fB8t%&I$m8^P'>HSZ9[Lq`b,N>@L#`V:/bF9$N+S2oj@[O?qCJ5X`9H%@&/sT8FFUqbY,Qf87p<OEi(NOELLqrT>QOrJR/Q=E99rR"@V^#%7EC55p-.Ys&<SF(4hJN-h&Ng.$`C_(ft<Q:lFVFd*SE-pu#@/%aDVU(jL8bV1q]CU'S?LBp84j7"]Cs;Si=f=K!/$:NY?ft"[7)jGq:sVj44\,8arc8EFd?T`F&.I+2&]UWo/(Z5Vgq%?j9@Ye0-S"%iV;e2H3F;X@Nj/Ejh2PY.l`.14KI?_i))K-jHtWnpdGd(rqR<!#pFG8:[[+:m9?BfI>:5PPF]ljpn4%j%IT&Hk]rk)TQuI9-o!)#%aJ)V#kr3p9&gg"5$54OF,AOE)rolGIJHZjhd?LlNlVsL:mCNkL9TY?.Dp(C568QH."m8N&q^[H=!h7XN=hL?K9JDS2i3+d[_9RD-%1(,T#_5!V<@6lT?-O1pV'09tHiF@a&&1)`9&qD(?D$U,BVH<hL?Bi&`%IbB+kTuk5CP9&Y@7C@G9(QrYh!,r^KJ0,FZ.Q585QUdP%)UR[eJS:lH3sq5Ui$6Df!76bn"9M?'DFM1^FW4P6X`hU<_.+455(M_B]:Xe._21sS"s\u/3S-5foD(=sTP7L1csd*GiKWIsH8I\I%)[/Y)Fj)1G&0GmB6D^B,c6pMk/$t@TYl8p!dGol(BmJ,/d2e-1/<7l<]MEuZOS;``s&/7,q-T34NrNO9oNRe/2oSS(AaRRN;9$h+%"ai>QlDS7;.Ut^TW\5Ja6>CRV`>!QX=qTF_>sZ-('bEqe/U*t1Opu93Xst<i"F+O^DLgr@239Pn)IL%bk;L[0AjWR-TFtB3>A8CQ%L.Qs@6=iVRGMr'1dQhDT,:XrMF*9X=da.uuoM4Cs]emG>3"MIa'$eRqL8u+@lst68qA@/>+Co(;-*:-,mgV5A)o^dj]q.GZ,^2D:%1C\1]$N0O-l=6&-o1OW[L^g08bgHr[<I7<gpd3B$9+$maDA7*lO"rn!`OR[uN1T(J)=V$@@8L27P/m>/?fJ4%!,RA7COt`WNQ=M9%d0?ao$EEBdDq'/TEiVe[[oCajLqYSs$n*YXSIj!E_OZcIFQO(c4um\.j/6f(,'&8B7^O;jJ`ZuG9q[e>J\4;"'#qXNjkpYn1i/fd%OLKF3GRS+;-%ug-CUD,+&&eoK`*GpVW*NXp[b\4:'6c#2'[?Nql!osZJFE9N8I!HRLd84Z;N0Qs(YLU#jU<1PFe9`\#Mr_!pJi_E%0-(KOQ6pt6$bB=rH-T@IdlYF?U"n2DALRB<Z@4"MSE9L3`$!Z6SIA.ErAr/"2H`IL\bFWE<_<Q\ItWY,2'[3llln'?`FD/*P2-kG%.<l8`G7]>o!-\)W7Z!0WamhKfAXs_:(7)^(0Sn01"QnNI,`(h/)WV\pJbm7)hcP#MN;FI7q6;VBk\"mW,,Ki[5>g2PZ<@qgfoR)q%CkPQ'>$OC54dED=<q&^A--gYin4H:]U_+oj@1:COamd>K#Nr9V1^3!Di^Q6<!uq$po84?ZK!-WdMLehN;IN^,"&_i;dU]j7rZpZs%aLO/nZ1SKEU6c9n1VJuq2NdB$9ILQo_Z1KT:q&M4kEI_Ne."?@qWP[<P+eHPY_j[ALQ5R..Qq9,@m2;F[!0$12ob)49pQbg_cWac%3u!A$;:NL(eu,=IUr@j>O)eYMZkS&B9kOEhYpEM4$&5uEB2<JO+rFhBQp#Q+)@PQ,3#i@)G/*Fg(<TpgChqasnY.-_Kmt\4ZefF@%9UGI;4d9^r/h[mcU<oD&"Zq$]8G"\j#O4KejJBi-YgKHles55rZ95-,hk,+M?d*SGg3njA"eK\p*3T&;V02PgUU7p[o9+4j^PCau%k?$$h>GW5Js7K=<&R_b%S3&K0o*XXoiC*#Y2L.k!55A@Z1!K9T]-olIK;d">2s6gj>\0tX74(l'56gr:9B;cl^:c5a"fuCB$r%N'%X1Pd8i?BW:OS>:Nl3)G&oAoC*I$=X$O&$70TQ:85G6L4V*._A)%XNR"iU@8r)+S(\pZCu<Jk;?"E)Ol\BNqL@bU1]4.Eg%mC>kt0%13pc_Gh;aIcDndIEAX^"a?3%7^lhl%jFf;</slV@g>u=M(K*0+1bldb)C]/mIZR/M/%J]V.uKuM$A6hs\UbO>aGhadU>4a5(UX[^%7;E?L;):(a;C;g"3JDM4*Z?i]*n2$7J_[#?"!pjt$5hCs/jQr_P)NH;Q@Y@D#P</E"IC\M_?O3$=XGEpon!]4nOq.rrA(#s"0B.u%WmkfMe-I1A>(FeC"t$QWnBm#X:DbY0QYB9b&Pn!"ZKQCe7M9)XY\.K1\ID/5ONa='+.f[QGDs;]Nt]P?8gJCoe+Hn[^pI=FPXYW8%qiDj]Rr`e0/V_]rep49WCRq&F(;AhZH*3R)4sFk'nupm\+N\jKWV7Z65L$DfQ."^IXnh&ZlUV?DmQG_#iLA[dpflqF!Ehq-1>;e=%RXYWF?l&b[Lf4'^I?TDo4,>)/OaPSS.gSD)=YORs<(@`)Y]F^[X`IB"Q`(dEPSLGU!8kAL(P##.#apo`U/G?iQt'mkKmL'>J.6%G%R$j2LR/n'-)B,`G!QNRtXm$S-RrrC[.Ls5VU8_X7::+U;90BG^fJA3:7@U*6]gUm"F/`%"2aCX:Lg+l4jZ1rshr+#4PF6A-VrGPa%pQt1^?%S.#).)do>Zo+Z2#>S9psBJqd,9S3:WjmS`J4AV&$<Nu:X2R6HM[`jJcJr5P!7f`QF,)*M0inD,O&t*gdao<9"qFBKlS6M%':7=5d&8EpLP^2T(HNU_%':_I\IpmaUk`o+m4B]"7(M6r^Yuu'Hl9k4DFGc=ROtobQT2.j/f`C_*P?!K7;GB@MG\K8CKHIT$FqC,%`TTUo@KbjdDW.9TpkL.)#[cQO!q5P5=>>\6NfGk2A]$qaRr`Sfo1fGl,90->)A#\?opcG"kbbd>+jn7=-QKnLgK>YHHM5J_*Z+c'%SKf/HNID'&i^4:WqS$WudC`"<TY4<E*^g+[&rQ<VkBHM$*P2$sVlXL'pfM/d"3/CM#-/VT.=Z1l"0H.eS5rZH1=,sa55?/)e5Z-5%9IMM31)&MX-ELNlAL;(sn*ZrQn1'1)KEWcJ+L/`EoFtX.++ss:J;OZs2.-2R+>!#R:b9+)r6FL0*Ht@+WUnro->90FeV-0!d&:+$%$i)>+m2<ura6ceYMb1*QhdU$<j7.!"ZDKeM`k+A>2#s8?5+lo#WY*[Y=522s]Je'Ami%t._c]d;D,-#F#jjt]/mDfY'e7cS!4<)C%"N'W4T\X4kmJ#>)qh!JX_YF'6+KS1g+,^h)cl7O4d@^XTZnS$/m%)l_0E65KDUfm'&h4/P&Lf_+^F]`B!\5#15e=-&_%@6`@n"'H%8*+JOeLoo_g;.hSlC('mjE<^[11o+<O;4gK(P)u\"SS)O:lpjFh)%<+=[3D)R"UiT]0TR?Rrc&VE*L^T2ArGYKK![N-$"GD_KnV&%R#-Pt!'%+2;.a@>SDa>"e"E+k\UB0h$gL=%g5Ki+)OqQ*"rT%QfhuEmNj1(#)B)H)#K$N-!bY/'R&/Z2NMBSB#44crcc0(o)mg-h%4e(O/e/Pb*]fd<*ZH`[A6Z::?2L0.lp7\s.96j1T#&S/1ZUl^M[uX_+1Y_2LDp&]72eCa6b-pYdDGrGuC`qK<s1(kWB_8-<g"&)n%F1&N3I$KksZMfFO.OA;QatWggI$Kks6M&AbPcsZ"fd^gY/EWuKs-'^Yfpm!nWEktdkli?%dg:J;#g:a<2Meg5_I,@*FoDZ@NO@gH%)"8XFN$n!DQ`tPY.(G)M?Y`r:)n!)[*d\>!,4/3%>S`+.j`!-FLk"b?ps[]7X`[dRVsLp1)mhc7])ac_)mfgY4E/iN%4H&I(jcbj%s64IVb2uu\DmqVo_EY=\&hW&@+)l3'^ANMRrjG>`fCmg?`nlK3hV2-j(_;BHFtOhp,U*it"TFQX,f4^W&S,@-LqRD1\KKgQ"TH7n%nVA2lLQa:#k+_&p&W+Z>HglS?a$C:+As?f"&:TdP+B*k`Q=]/nco<$+U3)<40G9A`AGjr"R)S!K?_WZN!k&A)=@@-[L/>mR*5"V*%&36,nA<::E#12NmGRdtK'2eQ\bQQTEK+KHG,be_s6S9EQg;>I,'TGJ5/B>]iCID&OQAj0BP"_B5f*o<P!0/`>GR[d[*WSFC=Teft%<4U#^#1l^;1VDkcBV6`?"LnPiMDF])*#J*;S4-sX@c/&I*KJ1eFX.kp6mQ6aI7.[0(.BgLd6nDOLk_,W3lV/9E%L#-LjY2,LU\bA%!6gFC&I!r1c*?4QIKKHL\=611;2[h%Nij&c,Tbi6(gY2!R!Ff:)[57'IL1e)8_B(0a!#_$-DD+K3Wb_,T"r+ZK/#:,6(!KG'Y&CL%N@3^Vb*!/\?R)S,*0M)q61b<#65]hl*Ws'-HGINH)'FeK:1>[23!:uLA$HTmMUSn[rSPc3D9()eaQa*.*W!e(%+;NRI(4iuZ%Ua8%,d8t(UL-1!bb<0K[KY[XM&#3e$cLOppKFur*#TV3)4BBkJ+:-h^Z.?Lqg\IN^AlI8IfK@rqS1;"\nPt6-fpcin\ieQCrh4P&bHe,%e\;/ajj&p.:35Ouk4YCp&=tE7=i+g<.X;l[BY$<tLf)q$PbiJ!'ZufK=<p(C3V*5,%Z-XP+hVEJ4;5G'Z=&:F]_+0>$Y)qu,fnE3%Oqqg--[MuP4e-e:Is.BeS4<D-o1U!trqnT"O+7.J2A2j56J+K92:<HB*bPb>hI8/YP<rF^9eZe#$j(9+Qp.c16K9nk\oWQ8,(/"h%WJcKZjt]K33JB.dM`SUW#%#E<AjE$TpV05i=rC5G7T)h&X/,+)Ee\O?X0D`^G<8Pg)acZV4,.bue]h)C^#u[=s$Wiuch*,j\ukVG%_/OLi18r0cAX@J2)=Ot\BnoGc*_pJ3U/'qrarb$:R@tdSQ\p:5C.NT4Mug*i?.nA$>qh'[<HVb3&@9XrAtcEm(U]$o!mf>Z/5r]R%P<tLj=M:LU9@P;H1)=<8Za$=5!W<C[1b8<CXW<Qus._eQqhYlbUcaZ2$SUOJrB@bqpICX\k'C<:\8Ftpi8/"um`bi4dETJVG,a,j%28hTC_9BEg9//Y3BFcLA+rn@G)Q%^#6n1\8$X-SEL&LetBp%9N)"@SlCW8+2E&M$F305OsSejW+3CA[CnVWg(7WZMS,[@"KXA$St%UKYf&JoOMK)4o3a[Hj8$R)d[`5F!uoSOr^2\a;eRY%g?>:;UX>ahe<\rgA;2:-!>bV_V9J__SbKjp/Aj^maaLK^4X%-"C!T7YL?Y%N(P@.Bi8PsL1FK,68G\.Sjo43GpY)bh\f<$;[+[*0RGoX17SiMg.G?r"-$_E7YVW[l"R/e;KI\/kIB!Pqt;MW8[rKiVO6"W%P0?S%Uom?!2\T\,;qGk<0"R)0j\bWF#'3ge-K/6JatmJn3b:X>'#B4'=h7FCTh1?EU>s@Q+GSI0)efR"=fQ_X!A?$7F`%O($#I58dCCkg%`>Gd\,.M*8HVu/Cqm1Rs8UKoGElEhHZW!#\;&u6>_BRo1Ues_mpSd0:*Nhi.6.0MG6!Dn@`#Jc[Ae5\p#]3b@#\a%C:Z<%>2$tp#%@^#%iDdWdXS[O#Ug-*0b"/[Bc[XSB@QugaMDnmW$a9$j]@pE)'KQ!KffqTX!Dj>h"IZ/]gpjfsO$\J,%"T+?.$[Y+\s3rpSk0L*+%Rm1ZX.D=EscX:Sg'#U2'[&2@@L)-%VAX]SE7`;n:j<*0K-JlQ3<:l1:rBT/jq?<*!'AVcJSKBSoWq):C+#2l7`Pjo#@"m6t!S5uQ%`c#6\m+X]jUk)d]@0j%6=a,9P9`>E9Lt@Uf!pd#8(u+^l+BCY>lbfs#.^A;,X7knolPnImY2d..KQYo0N:-NjcZ:4AC9\C(FbE3,%[5.99?Vm*XA7.\#`Vtrn?_.b[oDoJ"4M9p*SM"><%P"0q*k(a"4l&)bL7C8@rNW;OiJBpuDmV3I+gn#0T"C0jU0M>(X6p)6\=jc@%:DF:J(O-b<@Vh?[;JTJ`%'NHf?q`@g!br-gc6sF;cC=,W8W\,?ocf-t6DU#KZ(CM[QrTmnTc,]heS&+^4OQP`2d40e2d4`pNAf&Q%9NW&aDu?FThc%.3l66I+<g^#_1)[1AlY0"L@B*+(#n:H1Xll/#i/Wq'F!+AuN,h1"[K3X+H2AjaTsQ1=nJs_Jb.cMjbsKV1l,g::%UK/V/f"eLlD0uV]40h">$uK0k)H/?_esqJR0:=u-K(8T@e!O%P3`K_`>\;?(^i2M?0*'lc;U8'8'W'm84;cK\ObRfs/+RLQ9#ikn%PQt?0V^1RD`*KA)E7^Xo4`EJc_C<r4:6oj.p)^L6"&GJWgr%c_NnE3-*j_dm($"r]1ii&ra/34l*fp&3D"rD9QaCbn4Z;c!V(9qn%p7'+#<6,Mq=o.6[Z<<Z6%EWHRVh-A)PQULuW/?$)*\rl?\4;9ooZ!FqMGrh9(,)RG[.kcg^h+%CAes;SSAi;QPibp33rRMtPPW_5%F."20"[+3PFi"T)-=!SY_\mfR.Dskeee"]V00?>BC&g1qCh^\iAUNm)1lo]\fJ=fPK:0H:`"T;%],&Rl,[Le`i?(i(XF.nFY3!7q%?qf,'3D<T\nil"5L6VFm1sd7%Fs@l#hI\h/g,(TJ5*i+k+tM2VhP(T5GGgi6B$QdG^nUN^b618#)WBGL7%iD.T=2p9oY+E]0Qp6?%!N+]cBaW(8khh=R!g3d*TDb1n-kbt$ZNK!TFlA6h4BuLL+P!>q"*QK%.Ftr>)*j]LN$(Z+I_2'm@<F@cj)0Uq5\YS2l9t+sh9Fm.%E]8V,mUjNKeUu3dgKb#:HgSqu5_Y$Wc+ONnVV"t5K^djWekB2Y%#N>n8-FuAj<u5bAa2f;SFs7jLV](?(MVB*p,j#N3P*)#f"$n\%(1b\<j]i0fF$hIDk(ZpmdqI2mc\-Fa(_b@C0g%ZO:QooO2<K[Q;OSXfN1NEBfr%?Wiad:ri)#3prn'sCrT_F0fItf8<a"(SMh?fM%4Ti;0eef)+Kl&j&hT3iqh:'B`lYL2l2E>9WDj'Te)irgCS:YQqnI<m!iErP.8)($:KOomLB(4]5DRa@=^pqS(g*N4[IQr&:DB;nZ%*mDjMh/&A;1Pd7P"Q1Wp+NBR5&U1nd@N86]]Rp8tPHp"RQ;b.6rb:5b&MC^C'>B.IFa"#gM#lp:`(,8BG/06:#A9##e*%X$h)&,u%18'W?\.,]Q,tqq"G0ED1F1X6,UeH$sEGi^(k@Qa*l7.[j(ATuF'DR+g'oe%;mb:Ef8Qk<[$>,4FGMil?G_luP:ROHJ@fbUPU`-fN%Jk59o`:cX(^Mm/]4)Ft%F1qFd%(<ggCm^NXNP'<\o8FJI'V$m0QjIFWi9Y(XmKlf-AC^&5+kpboG`q26-Wqe?9$iAjJsh2,g0m"H%6IR\W#?nN%#?o)0M)NSa9NZD02uVaKr8u;7n-cDfhS5eVHiO:I%YJk!fs0Cc\FKGfP?O;_c7WN>8/Wh>H6P(Km4%Q7hQ2S/J_Up&%KXO&:">OQXSE/8LEgD`n-^4q:8-BHsB'D[aKdNd\H6oQ;MPh`JprLmg8;.X*XH+```E@Q>Utp?(n_9rZo)?t->c6dG[sPNBM6Y/2%3YFDr1uZgprqYq\lsj6<S:`tIO7<?jBtQ6f_(iq7-PP]8bL1^j$B;kf79>qOdZg3E9OO?bn7iVS8(EuO[5[dCDEE-OST1W#":m6B%4=)E\*L7s.Uml:N&fY:L=ZK3YVr^#]MqBG?VGL`(hDIru%pEY86X'":L[L5OdbuTn2haZc))/LUiR`MnTWhu;)*)J%q&a#2"A+7H%&NM3F<l-<hb(L<OJqZIroE!K/P7ViGYjr+;l#@'HBmQ:9E1RAW?Q5-)6t3[grV;,^$;FIYV)MjFEt/qK+r.&Kk^RH)bOd?S@!W@p%S'S?D'ulWcB/u>JB4Zb@8'KgGU88?Zm'0,WqMR&,Z'B,h@V?R&h<"f?+$85))2lb+RDFAkduG[iA$OY8j<LB/0`ond"4K-=9'TOE%k\eb@c<'_1C@ZX#dP'PH23SPqW"WH153dpP,\2I#5/OA.0^&ddh$f4\GBRd.p]hST+r6fe1cE@P`HPj.B'('L+F>Clp^V]$H5*Qt%fW(1gj?k/h*Y09,orZ8/54hcXDXh_].[C7nL,(;D0LPI?>C8qHZ"ENo3/#96[8;bl[@@i?ng`2KVS>).;4C\CoQRP.5J6V2L2'Bf%C&EK/lp[RRbNG3.]>p$E_MRNTKKBcjkq>k=i7V`5dbcB4/\L`$R.eW)1^.jU;='8Z)QQsT5ti#o39*\lZ+(ds1L\iu7YLKW%()(,%BtD7j%IJ48m#l$(X1G3C.3>=p-S2j])t.,0b<_aJq3nEebqBKqIEfR:AW-7K093+M0tJs-0`[:&d5?GS'UO.1?No^&k0MjJZ?M[(%OX#a(J.*8(,\%oP0TJGIr"_24:Lh+,aeUX=VPK<d$`AVL"ao:EGGV6s]00E:H8[M5ZUfCOK`OA5-StLQ-;QdOT%DkH,Y$GX6t"V;%:AfH1'<-7-'0o</^#%B$f;)\k]^EH/;O6XOVhp7/i\Yq3/RjG2(CE-^;)es[qb/X?QVfOLre5pP_E7dK+)XV;Gjqi)_LqlWauoIk%90VSL&,sN[PUu[t_7uuhc%?P.7Y,mTYA1H6i.EJ,]*BE[V3ts:_'*e$lG:4pPU\c*nA.ecdd"+C^9(tjeI*0W0i[V5>kjYNolV(b%@s-`4=2j19J*i7L9X6]:jp6O'1^Y>Me15U>%[&WJ1>uR:oQYGp'$`\^]_#Q-#@Xu%#K9^J#7h1E`P4FC2Ag*Z"PL9$;4<+Q&&oR/%Fc%K(\i]$sI#3-R'H6)9q)RI*,l-O]dRF$Z9eSoPE)bCmN(YOfemmt[F0,-gou8Wh/aR=C%Y;.rM;r1p=re%'EcC5q2do8$7;DHk%IrI4`qbPYIT#ScKEt$,Y^3pphfFuVN%9Tk0bIR,u3ti>=L9nqZ9r_"&1(g8#k`(jp#FLP)AINNrSn3L7<5tRb*2l"UK6Vjg&J0_s%<i4iJ;XM&dObRi1[kb`YC12M#-+k)c^IMeV=ed,U(XD6"1JtEqTONFJ_-Y3F\<Bms/YOJi@VYLZ)Vt?qQ3"NiaeFbBW="@b8TXMi%dP@"g=jo^=%M%+>r53uk8sTa1!Tq:=fF3Gj5"SPk'n3K5jRr&&/%.eH]%URB!<GmrPXuK!$ql+]kQ7D'7R,@pXa78Q1`Ws$Sd-<X%G`Dg4T8e\V:(5`YF7a'YR;"FhoL/%%&_9'G8-XiNP6HH1IY_G`dK3NfKZDV,JT]5reZ=L&$>jasF*KQFCXP@n,XcmSR5Y^MO9L1j%D/IT]>F1q9=;p*BMRR_gqJKA]j`Ko<1&qmRKipB[X>ih_qG/B>=bG9O'-*+Y'8>?IDY@<i6qo"ji>?FB7Up/:B-+X71bg34-0!m`%>q39r]seL3C<S239Y,=UV<cOj>N1\P^O7#tVsrt3U".5QTWKRc:uO'^Z)#TrR2lFHbG.tk!\h:F$i9ZN0ssQ2Ftg4Gp+-dg&g_Rr%V)f>#*Yr!oe`kCJ\Ip/A2i\LVDt3MEX+0$>kTPKRh!9oPI)G[N1gRb8^f-tc*>^WHN/?5X(quW==^!I_TeW+[B&*?T1nAVSQjCJb%>sBU5Ze:_5c&!=tej+s:?<1NkUj%NNUj%NhZ)2;s!EH<`_pO7#-d8HmAOmXS-G2mg1;l:Ab/ft@(g7gs@mj`t]S#6=PQ1$6kU*!0%V"Hg15PlWhS4R3,%/9CWCCNH=$Vm=^a)9&]M)9Ah3[U"`\W1)Y#.1X6-B2:bgs_F[O+Wac`_J1HUp8Zpkj3$AT94$Pn:60r@HWk2%LnDLQNRXKBbZ5:m!VZjPe5c%]EWYs`U*5<qi`P\66mYEh(OhLr$fO!V?H5,)<AX@iFtkK_2W.c7s5@8h/ntb7W<V@lAWlYX5!BF^%mFe#](@pr*542C)e)&NEHD+++4UKS3OGp'cQaFOFh@Uo`;+%3@>.a2RisSbW7@XY=Y=_B^SgNG'X,+NtjSe=\'?A4lZ2aU=+j)*s%)dmLJ<5'!pRI#mXjG[0*QtJh`fZa$j]Tic9m:$R+B(]nM7T(\qV5UQA(l)'fYF)MM_<eHY9n'1j&@nLDejAN7ZkHmT>[.@6dch[g%jV(A-<_:*<AH<sDNc?/pm+/"KjMm6RJCWnP6(Nt>6EIp(T$a91TgF@h&[q%"!3AFe+g43G[bR6\M:@s4C&WYCgG:),]5+GM9q%;<%UD=:4Z"3&#TI$I$RrV.F%2s'tq-L5#+e1+I"DueU8R3#=f3<;ic'"P.d75iQnV'W2""16-)Skn&V^:F1>f(/Fcl/R9WI`)'"%=r)%hO?6n3HEq0bt9DWT&je3K_?\V`H"7;pdtaBUDJRA?F1-C(UZ["`*#piD#-mph9V01i,r9d-)gCqN,#8L;&.DR)s'LX5@"'HId2`i%pR&$,0&dR?oPMHLDR([SUcK>66@q;`*oJrJ`;2nP^*$7YbI5+KQ&H4`Q//_Je-uE`bEgcl!;E;Q39^1[Ys=718)P*`dul!a>`(?>%#P5`M_hO[V[ecH]>TQZLD:K5Ih=_9[L2\fDAg&%tlmErR:VEZWVgbF(LL+H:]clKg.*A%"BAt\t)Gt_T"kF]4gQXCqe/s==@;"V\%)![cYL@A*s`I1F)N3nS8_u)b^:6/0qk<\&o0[(;c@Xm=&1mc.h.,'g3;>QKsVaUP,=6\VW8C<$3rNo?*1Qig\\0i-qY#"q:K[]L+%Qg`D>+H5'p!dMaL*V$]-BqN+Ygld-&Oi6XAg0g;Vl%I`T*S^5:E-@b[kmK.I4DiQ`['WO4*bh)RHtN(J/fK96ZqUe3>:]fj2f7#p%cdOe#2*PN+=UCh"D)u*ge!P3lo4a]n3_EcKLEihg[VQ?>WgBiQfm)`?E/Q2^8]OQ^<;?:6)*"b=_Crn\I.)QM+p!t7hr98p:*B)L%<C.[f_4<-Q#Or`>G=6%8&R_V.F^]Mb#U(DiH9GtOXs<,[0ejIgR$%[gGTM'Z-)c.4QrqKDK.1RrqH.O$+Wmo$qp;=dZ(!g+]FSUT%>$ca4h4r.d`j36:6X<V:(l1fEYjflXR@#`KpY,oPJn$2Ldk5Pi%<XO?+de3U?[HV2dF78H4l8H2"i?Vk<_fXJ5%`"TP6gm$E!M?k%X)PLa-=70j:%9&pljlq''0kHsd)MAn70m>=XKj+_<1/XmZ&M,%hS#NE_%kLLqp^_jN>/,Eb36rS?qdXNM1M$+4=<]Mn9C,O4nq8s%";_4.kAq:0/4GR'<H*p(_+b=FZQ+CN99De`-Z.4'f!g!GJ;gC.EZN9W"UV6A^_ts[&tXp'0n044H*G3b"aa22MrgW2!b,mnE@AZ<%=J6%PZ)('`7iU?SF<akW-:LfIKX^e#i%P.;C35<MJ/U)TIs2aBNjGk/cF^u%ZXY?X$]'lXB'TXhF`)7:(ijO\&F:t#qLXOL4udlR%9SP$s^e\RPTaHNU:J52_<)&O\GRIiInO4C*?[W4!/^:E6[]u]HdG)+*!L=Lemae`C1m!L=T[PkAmP.K<GIJV,_,LNV4sFUTTt--"%i@m&D"-`6<%bua6kRK`;_9m5-Qj9PSSOZ>JQaT''Wco`EbWIIPgdEH=g$5n1h1;mB!%qtAbOl]k[RGCj_8RfuKA1SpN!A3\=u*ul%ZQiq]L?@g;R96(*Tm^?_*o(Ci<C%$fmj^7Q?P@ibLsD+6H,@oRB&+):#%"J*!nhN#&Y%ZG5jSMa$&8h+92g`n/(^($3gILffId8l%5(+B<n^S%?cQ7bX@"9gnP8u/-jDE!jSKr-sT5TlLnDmX%j9b,.f,<EAB$?OK%'<B-AFtMf=qU]eT8`hY9P<hKKZ,o*-4,)S4FYpT%h:O%p>kUA7&,.Oc.7dH=GM'!Q&1kp``SmBB:EgFY?;`-#0:8mCTdB*NXisbZ':VF]P=I5/GoGK$=!b:VL*j7L,_68V/$:mY]<od-%0e[qe]nF25/K0f@]7,:`mE3E]_<N#Q[pf%$VPnM(hEHXkFi2T4@C]F5J*4U/H0g0sQH)AabU#o,brQhcML5$3CeE>#m16h\,%82r%`rVFE/1c^8W=q/.(K>;$5,rWHMPCf\RMnD<FUr5!Y@G443AliE(q*eSH7@4##8*@u0,Z4)W(t'e@DAJW4-IYVOq"h;6K50.BL:Q0%J`4mKQlAdLXpf3E.4So!-6X1@YZ:p+F_5'u]\$PJa)8a8"m,o'rB'0c+m/\0ahTPJ&#mj(%o?6L"!g6G^M(!&PM%R""Qjq_:16hM%%`O6?nZVJ8)]6@8`t*N$n!tu[+CB1W?_GY'l#!7$/pp/o3cBl0IS4=C]mtp>MlQ&g-o"jOL].\"=7n6V1#PJ?2,h`D1dBVH"^[/t%`JI.IfD1V^L::u%F>*6J$3'\9DOn$e!Uerod(PAA(A_(ob'Q";ilL-BP:#8*caju-)D!U>2k$Lc^bId#lE@g13u.T"9M9O6E%.s)%&leg@9^&[u5^ups5"W-*csQ"J]G6QZb+1Z3hRT(d5h4sL_smmPBe<=P8DJ:j`A^l8G%I\P07iN!;BtOb9finrj:cmo\%i`F*>"l'%N&6]_3;A7PaMcleX?kFDZu@-NSgi<^9^lPh(;0i[4It>ml6=&?L?h4*Q,7U03$[NX=>c<]ZaJ.Jmc>l%%+NWK=_S&(<jLjRltj=-%Fm_@f]u/^9P>Z,]7s$hQTZ"iMRhjMBab5(i*`KC[n_5cg9kGuU;JMT,d;a'UIS0<&_mYjW$V+=-TR(b_0O`Od1j,WK4`)Zc9<Z?W%MAqh[;^:-*6q`)LJ9*nC^6L![Bp&Nc0^P$;iShf:?;Mt\ahC_NGA+Gr&V@-NKR6Xcil@0DUTN+$(U`A=9<R01`UdL&alm0-h3\gK%eC0RZ'j6TCSn@N4CJd7fn^`$^-u>o1MQ;.%4Et4i1p4CnM\%=@roM^F`(5Fl(U?q49Fm9nW%h19BS]V!Cma;m3KQ4Xe@2NS>11/\%R/Y;<CK;cA-:*tG-F!H-'s/[3\BEQXY%^S#Ve#'[[Uni_OD$)@P(lOBa+RX15&s\I;D8j"_=\LV>4p-m864eg(=+qDWF)E0M9D-:%DJQ[5T2p%HC[[c)C[W6=f%iNSHimRa[o9lKHQlk07BX4%MirL<(PCli]GP$PAg3mP]I-&$7\9h]99V_LbN=;T4u4iXoJibJ,)/<7%X@Y*UE1$SE9n"gBC<10.^n"7-n1K&.7inIm^W8`rPa,b>q.3.8o%<jXkndVHM"<A'ceA#&G@P16KC6EI!pCHPQL?Tg&c/Y]qk\N9%+l>ILPI\aX%a]n%!>oIH>b"3g$>eCpYFE!Cgf"RA!IW[SnfM7@!("Z>]l7Y6=d)eJKfOh?A*!g1gY<sc::QoC:WHh4r(aTo&cU+M%=Hd?sXL,o2Ae:-?3^;]Ng2grC9paU-r9%j$LW<S\"V2RUqlXUFQb,kEjct"kL@ms$,*%%p5ge@g+8/c&`+8'hKtcZ.rZ]rSi)o'o%S8J!^])5B[]WRB9PKT?i0"hTu&Rgg^r$qFU+VK#Se1as[VU`o*&5*W`A143F0LW&:)F9f/r(O+R1QR#Y]J=Esk%h0EoCX#dXfor%%I8=2f?p$kX@:)@>'-=gNE/$gn(T\]SN+OdpMf(hN-8:HZ%KF@pN/JWs`]TXI',!sU%isl,pF!K'5EH_2kk+D`n959bbDD.MWDLT^%"^p<jCLd,H!8jLC1b^EAN][uX+qMM/boTXhWZG;8bG%i!N@gXGe/MV`?LouZaqeR(*Ln6A5dKUJ_K_:d:CN<EQCDhWcC82"1ALI)%BRJpHqs&5?LCPClG]bc?jD^or;S=np\E0JLn,f[S;LQ?f<+fUQ=^lY'/>DEg$V=qaTUr%k\<lJI!ip+,RtLo+"Z@)HNF&(ugkqKU%JqmU/O_<mGl/L",qRPZ+-!M/?aqlqjD:D6V<DdOZq*RodZ-AJR\dB7VG=LaobLD$?V'lf=5O<@cN?h>\9<o6Sj&;:.cd1eG3iJ+k%;78&VU=m$$UX(TW)8dcP-D1)fs8/b'4G_ltn;o`[>^Ks+e@*JESBV>(EDN/plpYY>bp([(VKq8\Q!'=pB$oA2VE>smiZ?#R_h%LU%#@B@Qk;q(rl<X3B%*,[lmP5JU8RhtXDE*QF'!Po)[[5sr3\HTb#BfALr+O*0*"5=T``OfD#HQrZ48bQX;)XnAgcj/Za-hZRe(I?U%'6D&g[P?Df_ZaR2<8#m$Z5I`\g*f%3Jbpn.71P'I$tH@SQ@m`YV&dn>FPsd8npr!.om[*s)m=YZPlh8-QLHtP-dSm>!<P4)/2/Y-%U;/',U)Al$8dp1_kjcUTCPS3'>?7_&`gk*1-p)!"O&PetBeCICWp6?R=Pp#q`\h:=VEAL7Y@olGG'GU6\",?d8#tfE)NsRMcB6RH%(L*I;b;/oT/72M-qS[Gc4--<pdAY!&"`XKi7?rEoRCQ2kKpgF=^7<bq)B-h^o5q'n1<,ZsbckJWSgHEtC'^<Z1k]_g-[@f`m$c>X%Scn1CX=?^cPfHTZjH+So+2L@i'#QSZrER5[!1kcD$kC"7m=jE9e*fj6:K_T]bCk!R(_[":)"(AHdlQ;WNIerVLNDR.)A8:sBb1Go%@OD;k`#tT&I(aq@TeC4knS*Vue6lQ5IDh)]g%/:1J8=93n:s[+YlgM4Z$grk<Xlf`9853/SX"+G<;E[/4.4PNq!f=&@)?L@S/55K%j5L&oRB>?m\Df+B_cQ6.4JE&(+&'HXGa%a[4XoP[_T+*[.OAPCe[<7QM<?o*_m9T,6T/=s9nDgAdbC]!5Z`..k"jX_+(4/5O:;ds%Cj$`jKQSmb',$cO(,*k[`6V$bO[U\r=]o:;[['D>N:AG$Wk^(rneqY_4'F<)Z4]N0?htsPU$2E#:7)jqi-pNbjP\(EH!SJAh]N]S%X^<qnJh."oJpDCE*%ZRu/b!l]&uB8+i&;HK2+.NTGRX!PIt0YP&!)7b,_!HOj"?FsBM=H0jUuI5iXS6;$@ek%T,7e8?OQ@dC]BF6%FM8B?:TZ]fIC!XB3qr+Zn5g/rGY-sp&8-[rJD^C!<NLmY"%Tg<UPg=G9VRH)!b[:TTia@YaQMFH(K4E'NQXIu6h4]+!rhNnYJX7T%klk@Z]q:`u,F4p5cXiBr,^^3#(>\WC>7/sSiY1gdK$0hNV\Jh9[fY0#TP?)Oca*9BaTA!O<pb+FJjNJ(>ls"MpdPSIS?N/DrIQC/%@?U+r0o[FFMMVRMVo]6]q`ucB^dC<%a#Cg0:&`7[FE(PLJoR';)9cIG]loWljgXE1XWQ6)iuEq/d$CEiT$q_%/1SIRf*Rl(05F[]%3p!J?f*PJ0<s`4%80RAX*$'r`9YIbj^[3cF`q,?uB/A](^9pM(ZZ"Ad3U/>YMB2[C8?*Me@FAa)\BC'T*#lnIn#U'p`O**M!qlK1%!kpPHjJb3>@KA[@Aobk7G0WY=$/B8(+R\aS4J&nCV`&rg_3Dm^,**;g7Q:9O4g4eO4gt]Ga@F,FFF0:nMld42n'JCqT+0+5Ado7T%_&o8Ga\td&B9O^@\4k2BbJV,oeDf.G]0%*Mo-+'!RY=mADsds;>e!R8J]$"p06+>]ShNVOpR'R&#G-m\&UJgCZh1AOJbYh:T=L)&%'o3r#4iKgN[;l*lO&(VHGc3Y8mFcaYa\hXO\5H4D]PS'a1>u#])7,3J25f_;QZ6T7G[f[,MDP/qEo]fm*9Ub,1B*\W`loYE=&k[I%c9Lk7<Z`;DOn:c/7q4Dc5`+`^!B*r[Grc^Pjbt^jbWrR\SgLL=Wlm=c^>H8E094bD3<6^)C`tSMFd3g:RV&GimjUp'h5!Bfh_T70%13nDG9CE=nZ?NSKHSQ:bc`71s_<bN':Kq(LiGOd\HE+ZoX:j)0E8NApJ[5`FY;gNpGRQ<oQ5JPS3YL^.rS>1-d.GDu'j,)Cq00cb%m9!YET/>3K&)!ckmd=#?,i*n6P%BuHk$<VATf5nUK7R__<qQ"lC"\SpW2V`F'&S$#NIa"i:JN-IIFc:<Y0!(g(fa6nIHrBLFlZ5M%d4`U\>"OFM/l,>u%`>D!fKc.J?;j#!%.Wn:&\kMQ;g=lS2o<J$=u^/\"!asiqLu9g#M!>HIQ?t%Xjf#EiW_4K/@=9hRTcCYe='QF%^0Vi2PV]J:1;gf;`BEUbi5qg\2csk;#Er*2QGb+r)Ji2BatmI';9l\/apb<abL;-l8dtg0RY:`Gh(=Voc14P1<E/UP>#ah/pUnD<%!cuM-M[K5+V\/d=Q'Q3/oqe^fg#]+?4iu5YD/)r,ca^+u(=fH^Kui3[&+1`_0Z^nI'hK6b#jr`q?l8lI"%6WDJ89FWVdJXdN1PZ1%/V?t-irbSbrb=`aQ.+Fm4DQ"BXfi7)[t)SuFhk&:S>Tj70P?j,UlWah7Vk#3[RGVhWV,P9VZ)^%m-GNo*LXuW[>_X):>r?ND1,m'%VO_k(2[%$a7=m1%V'!cQXdt[.-sDW;UWg2C,QF%PT8T?6a4@TdpPt3JbDV)C9(A,:/cb\#mRhB\IH8"aiJ-4aN)1#h=:VofO.W'J%'F(8"-P9/f.6giWWC0`KHV&HU-lt&oD(pOk>q(%G/;hK9(s0^8^FqgRO`@X(@k<rLTr506't?>GR\RGdZS\UYr&bs+n:R>WO`f5a%^9P"7l3#sfUCT,G5&eNfp+rIHe.sF\#N>J'm'NCp:peEiFr;oYXm#sq%$UWC?\V3MNqO,r"-FGg2:#.r1lBe&_!S+%ns12QkmK1m%s!eK]&sRAA64MF4:p!Z>dLT3Jp;<joHCq/U5a3!hL!Kp-4lf,Z-7FZGcM5&n$kHa2LZs2:X#r?]'B<(@^*6@j*u.chQ^GA7g_(:p%=G4CgBZLke?6R#MO=Jakke'**+3IN(5Ajs52u]oP/S4/[9'k<V^_d7328fOjVC<oPPK([VqKt(J/Q$oM8OGj)ccK&3DVq%^G+[Nu%@+o:3A#3O'_j6)R=B@$_"cpB")@IU#p_pkj06"PF^-+IROT6]8DdS:E0D%t%3H=ri+IKZOqt;.i8n-r4^3r`Ks'AfTKDqXN#a+%n%s-s&XhgYH`Du]Mqs-pc7lM(>W)b2)M$1J/W\UY2#_)f7k_i\2XYseR/elS\-"A9SZO1XsP>]RWB<F_*"PbFI3YRmVm5H#2#i>EJm%,)f+PLZ_,I?X!!nmC1q-]TIk]*\B1fl4%AW0).KIH.<t8ARim=):)a6kE!7a`SNBMJ_&R30H<LuA!PCLXH"s95g++R#C!F_b]!rg%V"Qa]hR1&/*.*H%UL!:Jk`C$,5%a^nD`][eQV=]-@aGP(TG_7IYT0a10C?htMc$gL).PP5%WguBlATntkFdIeAb`3,c$\0Nk!!U9%A(ZaF>$)88bEmBkgMg8M=)`QBpd)qUS`s-<he>79f_a/9m<-ak`m)Y^EP$7Za+&*IOldm,3+ToD)`PsV`pKTCH+$EeHh.+cf)j+I%>iH8SSe2f@T_\1#c89rR6$$.aJ(Eee;2/MOD>jX.9:g^n.)Hh%K^'/Mj%CnoAt-9RkDD#ADjIA40@h#CR,q]j[ka[h-;WJTPrEWM%iFnZ7<XYC6<m-hQ4@u?Xc/hM7P;g\8Z'Xd8f$&1([V6VYD(8?\$^E[>*Q-9S``Uth,->]8mDs,P9k#t9`bKC4fWibCB2fCd%]2h!%N6ihR1]N0[gi\b<crS/R-F"OaPJ"7)D6l/^P:!h).U)8/jPlpK,;b89cm6Vu-F"Oi:O!b[8\/0anK3hn"])L<?oX#t`[[Z"=<1aP%O^",@:$^o9VY0X[1E<0%N/a:fTOZtmpo%oGr!-DDcbOK6@>n2Q1U&pS[,PfD@]ijpgK`3Rqckq9H,/<PFU%<Hh&%r>8J3YlAJk-,%q%'jhSq5iK_AK>,Ng\GfV%mY]T'^0#e"-#VH(*(M&:aTI7.<9)?+q]/+"o"h=^BmO2>dY#,=h_Mo+$Mi2",.E*;o=Sd<Ed$>t1?>%1&SSipL(!Xht,oU>2R"iJT#pF0]\<-`&id\JmaR<;LXA.7*^?$4E1_Sn,!bs7;['a8!A.tX@U6IkWHStDTk1dB31A6Bs`4=b60JJ%!65tif.LBRI`*S#G@kgh@LV4JGM@,#NVY!G8'Z&1SCtQ]Ia>s2K<pXj\+hSh:rTDCb.PL3%edqaM4\PBiN.T$S>ku&)`*h.9+,6j%V^*";b7Bg:r0@V;m0r5>Rc*2S/rV+175:XS[DS,UYt<'&&NL!F,*];]B_k]GV`%r>9EZ:m*nUr-njbBY!oe/\pcVEd#_o5g(N'!W%^Ys0#rb.fVmpIUTm8Fqs!/rDbe'8e;B]V@0_;"!49bP@)%="I5[eO1/@a=#nb;RAQUH]*oh4DVIN&1tq"V,N3h]\c?+AP6Y&?M!B%F%ZoGa0)(*nKBZ5F-SI]Jd-K[_[W#$UKKPcgdu!ESqadLcG=I<SqAeGCY*XGM+6MFV+ejH0o!i`Ii;t@2#^YogE-:Hh?UgdM?#e5%C4)u\Yo_/kQ,[a1Nn&ko%ZDg6`@pSC:IH+d'6)An&tq2fE]&+%2>Z5[NPKYWns.><B42cu6Fr#G\ReEMi;</)qi;s**9/Pq'(-JC%hZ:c-WE<&lV&)ACb"lRsj8b=iV@s4`=ebWcEZEW6_c;Ai:&_X\lARB+JZ82JM0'n'6kr?ccBX<,D\DlM=BUaabH_FMpZ59g.4D!#%QTDub+H4*9T;8#uemB_H*F1k.CG:aAPJIb<(*'%nY_H9%;Brr,!7g<STb'@7KB!BSiCME/Dt;2j\/-#'rqr&",3b#soE.!MmO0'7%ZhIp&_Hd9(a^hPR@N)4'<`W=H+YicieA,i#XZMi),K*4M09/"'&L#2s=E),$((Tf6E\$qV'ikAimcEFE#dPIuc&$:RNkCR+U`oFO%LU=cgLsd'9Fj@mR_'ac:F,+TD3H/d1DILG'_JfGX_^dr*in/eWA(O^565k=5%ojk@d$T#2*3\^CMTfSV1GG0<Gq]?&J(S^29Kc+a%if.14'2.EIQS.`1Jb`95B=ImBI=5$(J[l1QLh+NjnX^W$l.U0#dolg3:s3N8^1Mk=9s)I1IV89X0MVPf1U+=E(gHUgK>Gg_/uR!N%=N(*OIEZB<@Qlp8LD>cQEO6]*0=s+>3qdAMkkgYCSF>Ai..mBDAjT3kY0"IJTS.TB^O7nM<Oj1NSf++-^jQJ09CfkG1(EhZYd@&j%cA33;,^tCa?mldu"GnL"k/:4lEqZEY%7Wh(o!FOb;LNX14+4Rp\oZ!fH]=Fl^*R]C-EO!.N7R>Y1L,.Me,$sSp&:=KCuFLf0SiNr%1e5Cs]oN9e-u^6OfLW\g7`LTF5,R=LI7R_$e1psu8Nps%``@pUp9]<?jQ>k//&^&J,e`6\7pA<+Yt1i.0f/KF//V./>`P.5m)hu-%0_g<:&^N%qH"<NN?,&hZBY!2JmB<%)Tacf.AkQ.nSSL:K8?K0CKe[tsRP5JA`iVe1R:1NMIFe0^Q+gDtps,sM1/a.AhB=K.GW":!%^f$&fC$ZYOG]t)$nt(=hGt/RsM^q$\*/E/sb9W&pHR9cn7<kVAU2cW,kJs<(C.S3NgT,S,)3;>G(hb,fN-S]E?07%BJhO72N:M<i%NqJrZ=eEN(m('10Oj@s&PJr1C87?qdl-\;W,+8YL@RZd_#tKs5SW!q/`&V.EEDBPVAb\@,0G^lET2Q.2)_o7c%Zs3W`K?'#R$52.%=tQ)2/]l$5<g,Z[U3<bqhpMB=_"1#9A;-W7;s'QgYsO'ldMMTbNbj'56b5Vamb?:PWQ2dMp7$R-YNJ.L_]SpCn]Ut3p!8-^GMdl@%Rt(I]++F0LJ,\QE^An&mDh%Q*0E:Xqn%\ejO+7#l07WrnJ'_Q:s5D;=roL>5qX^oJs70OroY81<')VKCIe+*Mm^M*Q%r@KNlM~>%AI9_PrivateDataEnd