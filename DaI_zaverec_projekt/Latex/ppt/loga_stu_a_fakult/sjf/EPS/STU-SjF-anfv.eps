%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: STU-SjF-anfv.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Juraj Blako
%%CreationDate: 9.10.2012
%%BoundingBox: 0 0 143 83
%%HiResBoundingBox: 0 0 142.3555 82.0372
%%CropBox: 0 0 142.3555 82.0372
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 76 8%%BeginData: 6166 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFD1FFF7DA8FD05FFA97DFD06%FFA8A8FD05FFA884A8FD07FFA87D7DA8FFFFFFA87DA87D7D7DFFFFFF7EA8%FFFF7EA8FD49FF522727FD05FF272753FD04FF7E272EA8FD04FF522759FD%06FF8427F8F8F8FFFFFF2727F8F8F827FFFFA827F8FFFF27F8FD49FF7D27%52A9FFFFFFA952277DFD04FF7D2E28AFFD04FF522E52FD06FF7DF87DA8A8%FD04FFA85227FD05FF2727FFFF2727FD49FFA884A8FD05FFA884A8FD05FF%7DA8FD05FFA87DFD07FF522727A8FD06FF2727FD05FF2727FFFF2727FD6A%FF2727F87DFD05FF5227FD05FF2727FFFF2727FD6BFF7D27F8A8FD04FF27%27FD05FF2727FFFF27F8FD6AFF7DFF5227A8FD04FF5227FD05FF2727A8A8%F852FD69FF52F8F82727FD05FF2727FD05FF7DF827F8F87DFD4AFF59A8FD%05FFA859AFFD04FFA87D7DFD05FF847DA8FD07FF7D7D7DFD06FFA87DFD06%FFA87DA8A8FD4AFF522727AFFFFFFFAF272752FD04FF7D052884FFFFFFAF%520552FD66FF842753FD05FF53277EFD04FF845252FD05FF525259FD67FF%A8A8FD05FFA8A8FD06FFA8AFFD06FF84FD08FF7D27277DFFFFFFA8FD04FF%A85252277DFD6EFF7DF8A87DA8FFFFFFA852FFFFFF7D277D7D7DFD6EFF52%27FD06FFA8A8FFFFFFA827FD71FFA8F852A8FFFFFFA82727FFFFFF7D277D%7DA8FD6FFFA827277DFFFFFF7D27A8FFFFA8F85227A8FD4EFFA8527DFD05%FF7D52A8FD04FFA85353FD05FF7D527EFD09FF5227FFFFFFA827FFFFFF7D%27FD51FF522727A8FFFFFFA9272752FD04FF7D052884FFFFFFA82E0552FD%06FFA8A8A85227FFFFFF7D27FFFFFFA827FD51FFA82E7DFD05FF7D2EA8FD%04FFA85252FD05FF7D527DFD06FF7D275227A8FFFFFFA827FFFFFFA852FD%61FFA8FD07FFA8FD09FFA8FD05FF7D27FD04FFA8FD78FF7D2752FD7DFFA9%84FDFCFFFDFCFFFDFCFFFDE3FFA87D7DFFA8A8FFFFA87D52FFFF7DA8A8A8%FF7DA8FFFF7DA87DFD04FFA87EA87DFF7DA8A8A8FF7DA8A87DFF7DFF847D%7DFFA87D7DFFFFA852A8FFA8A8AF527D7DFF7DFF7DFD05FF527DA8FF7D7D%7DFD2FFF7DF8A8FFA852FFFF7D27527DFF27A827FFFF5227FFFF522752FD%04FF527D7D7DFF5227527DFF27FFA8527D52FF7D27A8FF7D2727A8FFF852%A8FF27A8FF5227A8FF522852FD04FF5252277DFF5227A8FD2FFFA82852FF%7D52FFFF27A87D52FF7D2752FFA8F827A8FF2727A8FD04FF7D7DA852FF52%2727A8FF27A8FF27527DFF5227A8FF7D2727FFFF7D27A8FF52A8FF7D53FF%FF7D27A8FD04FF527DA828FF5227A8FD30FF5227FFA8277DFF7D275252FF%A8277DFF7D52277DFF522752FD04FF7D27277DFF595227A8FF27A8FF7DF8%FFFF7D27A8FF7D2752A8FF7D2753FF27A8FFA852FFFFFF27FD05FF535227%7DFF527DFD30FFA87D7DFFA87D52FFA87D52FFFFFF7DFFFFA8A8FF7DFF7D%A87DFD05FF527DA8FFA8FF7DFFFFA8A8FFA87DFFFFA87D7DFFA8A87DA8FF%7D52FFFFA8A8FFA8A8FFFFA8A8A8FD05FF527DA8FFA8FDFCFFFD36FFA8A8%FFFFA8A8FFFFA8A8A8FFA8FFA8FD07FFA8A8FFFFAFFD04FFA8A8FFFFFF7D%A8FFFFA8FFA8FD07FFA8FFA8FD05FFA8FFFFFFA8A8A8FFFFFFA8FFFFA8A8%FD05FFA8A8A8FFA8FD04FFA8FFFFA8FFA8FFFFFFA8FD1EFF7D2727FF7D27%52AFFF5227A8FF52A852A8FFF87D28FFA8272752FF7D52FFFF7D27277DFF%522759FF7D52527DFD04FF27A8A8277D52A8FFFFFF7D2727A8FF52F852FF%FF5227FFFF27277DFF27A8FF2727A8FF27A8FFFFA8F8A8FF527D7D7DFF52%F8A8FD1EFF52A8FFA827A8FFA827FFFFFF2E5227FFFF272752FF7D52FF27%FF7D52FFFF27FF7D7DFF287DA8FFFF2727FD05FF52A8FFF85227FD04FFA8%2727A8FF522752FFFF5227A8FFA827FFFF52A8FF2752FFFF27FFFFFF5327%52FF7D5228FFFF5227A8FD1EFF527DFF7D277DFFA8277DFFFF525352A8FF%2752F8FF7D527D27FF7D27A8FFFD0452FF2752F8A8FF7D52FD05FF27A8A8%522727FD04FF7D27F8A8FF52F852FFA8002752FF7D27FFFF27A8FFA8F87D%FF277DFFA8272727FFFFF852FFA8002752FD1EFF7DA8FFFF5253A8FF7D52%7DFF7DFF7DFFFF7DA853FFFF52527DFFA85252FFA85252FFFFA8527DA8FF%7DA8FD05FF7DA8FF53A852FD04FFA85259A8FF7DA852FF7DA8A87DFFA87D%FFFF7DA8FF5252A8FF5252A8FF52FF52FFFF7D7DFF7D7EA87DFD45FFA8FD%D9FFA8FD07FFA8FFA8FD07FFA8FFAFFFFFFFAFFD05FFA8FFFFFFA8FD07FF%A8FFFFFFA8FFFFFFA8FFFFFFA8FD0BFFA8FFFFFFA8FD37FFA852A8FFA852%FFFFA82EA8FF7DA87DFFA87DFFFF5227FFA87D7DA8FFFFFFA85252A8FF52%7DA8FFFFFF52A8A852FF7D52A8FFA8527DFF7DA8A8A8FF7D52FFFF52A87D%FFA8A8FFA852A8FFFF27FFFFA8A8FD30FF7D52A8FF5252A8FF52FFFFFF52%FF52FF847DFFFF7D7DFFFF5252A8FFFFFF52A87D7DFF527DFD04FF52527D%27FF5252A8FF52A8FFFF527D52A8FF7D27FFFF52287DA8A87DFF27FFFFFF%7D287DFF7DA8FD30FF7D52FFFF5227A8FF52A8FFFF7DA87DFFA87DFFFFA8%7DFFFFA87DFD04FF7DA8A87DFF52A8FD04FF5252527DFF7D52FFFF7DA8FF%FF7D5252A8FF52527DFF7D7D27FF7D7EFF52FFFFFF7D277DFFA87DFD30FF%7DA8FFA852A852FF7D527DFF7D2752FFA85252FF7D7DFFFF7D7DFD04FF7D%5252A8A87DFD05FF7D52597DFF7D527DFF7D527DFF7DFF7DA8847D7D7DFF%7DA852FFA87DFF7D527EFF52A852FF7D527DFD38FFA8FFFFFFA8FFFFFFA8%FD0DFFA8FD0FFFA8FFFFFFA8FD13FFA8FD07FFA8FDFCFFFD34FF7D7D7DFF%7DA8A8A8FF7D52A8FF7DFFA87DFFA8FF527DA8FF527DA8FF527DA8FF7DFF%7DA8A8A8FF7D52A8FD56FF7D52FFFF7D277DA8FF52FFFFFF28FF7D277DA8%FF527DFFA852A8FFA87D27A8FF7DFF7D277D7DFF52A8AFFD56FF7D52A8FF%7D5227A8A87D7D7DFF52FFA852527DFF277DFFFF27A8FFA82752A8FF52FF%7D5227A8A87D7D7DFD56FF7D52A8FF7D7D52A8FF527D7DFF52FF7DA8527D%FF527DFFFF527DFFA87D53FFFF7DFFA87D527DFF527D7DFD56FFA8A87DFF%A8FFA8FFFFFF7DFFFFA8FD04FFA8FFA8A8A8FFA8A8A8FFA8FFA8FFA8FFA8%FFA8FFFFFF7DFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFD60FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                             
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:ModifyDate>2012-10-09T17:14:35+02:00</xmp:ModifyDate>
         <xmp:CreateDate>2012-10-09T17:14:35+02:00</xmp:CreateDate>
         <xmp:MetadataDate>2012-10-09T17:14:35+02:00</xmp:MetadataDate>
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>148</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAlAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWNeffP&#xA;ml+TdLivr2KS4e4k9GC3ioGY0LEksQAoAwgWgmkd5U8zWHmbQbbWbFXSC45D05AA6sjFWU0qNiMS&#xA;KUG0n/MD8y9I8lJaC8t5rqe9LGKKHiKLHTkzMxH8woMQLQZUyLRNYs9Z0m01WyLG1vIlli5ijAMO&#xA;jDfcdDgISCxXz1+bWg+T9UtdNvIJ7m4nQTS+iFpHEzFQx5EVJKn4ckI2gypmdvcRXFvFcQtyhmRZ&#xA;I28VYVB+45FkwfzL+cXlzQPNaeXbqCeSUGNbq5QLwiMwDJsSGb4WBanT3yQixMqZ5kWTHfPvnzy/&#xA;5G8uy67rjuLVHWKKKFQ8ssrglY41JUciFJ3IFBirB/If/ORWheb/ADLZ6BDoWqWVxqCySWdxNHGY&#xA;WjjQuXZg9QKDqARWnjirLPzG/Ma28j2Npdz6Tf6sLyVoli0+MSsnFeXJ6laDFXnumf8AOVvlvU7n&#xA;0LPyzrcxV1jlMcMTiMsaDnxkNO/XDSvVfOvmyy8peVtQ8xX0Ms9rp6K8sMHEyMGdUHHkVXq/jgVI&#xA;x+a+i/8AKrv+Vim0uf0X6Pr/AFSkf1inr+hT7XD7W/2umKp55J82WXm3ytp/mKyhkt7XUEZ4oZuP&#xA;qKFdo/i4lh1TxxVO8VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVSnzN5V0LzNp4sNZt/r&#xA;FuriWMBmRlcAiqspB6EjCDSCLROjaNpmi6ZBpmmQC3srccYolqaVNSSTUkkmpJwEpAS/zT5I8tea&#xA;YoI9atPrH1Zi0Dq7xuvKnIBkKmhoKjCDSCLTaxsbSws4LKziWC1tkWKCJeioooBgSknmb8vvKXma&#xA;7t7zWbEXNxbLwjkDyRkoCW4NwZeS1J64QaQRbIURI0WONQiIAqIooABsAAMCWOat+XXk/V9dh1zU&#xA;NPWbUYeB9Qs4VzH9j1EBCvx9x7HbDaDEMkwJee/nh+WE/wCYnk0aVZ3KWupWlwt3ZSS19JnVGQxy&#xA;FQSqsr9QDQ0xV5v+Vn5qfmH5b866d+V35gWCmV0W3069Tj6qoqH0SzRkxyxsI+PIUYH7VTXCr6Kw&#xA;K8A/5xX/AOOn+YX/AG1E/wCJz4SrO/8AnIX/AMk15m/4wRf9REeBXnVR/wBCa1r/AMeVP+5jTCr0&#xA;X/nHr/yTXln/AIwS/wDURJgV6JirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirEPzL/MBf&#xA;JejwXoszez3U3oxRFvTQUUszM1G7DYYQLYyNJl5I81R+afLVpraQG1+sc1eAty4tG5RqNQVFV22x&#xA;IpINpD+aH5oL5JWwRLD69cX3qMA0npIqRca78XJJLigphAtEpUyry5rcOuaFY6vDG0Md7Cswifdl&#xA;5Dda96HvgISCwn8yfzgXybrVppaaYb1pYVuJ5GkMQCM7IFT4W5H4Dv0wiNoMqehWd0l3aQXUYKpP&#xA;GsqKwowDqGAI8d8iyecebvzqg8vedV8unS3uIY2hW7uhJxYGdVcemnE8uKuOpFTt75IRtiZU9MyL&#xA;Jif5k+RJvOmhRaXDrV3ockNwl0l1ZkBi0YYKrbq1AW5bMNwMVYh5I/5x507QfN0XmzW9fvvM2s2w&#xA;/wBElvSaI3EpyYs0ruVB+GrUHhWlFXreKsE/LH8qrfyHc6/PDqL35125F06vEIvSILniKM/L+8xV&#xA;lmv6Fpuv6Le6NqcXrWF/E0FxGCVJVh2I3BHUHFXiP/QqEf1M6QPO2rf4b9X1f0PQel15V48/S513&#xA;5el9GG1e2+XdB03y/odjommRmKw0+FYLdCatxUdWPdmO5PjgVMMVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVQer6NpWsWbWWqWkd5asQxilUMOQ6MPA+4xBUhVsrGzsLSKzsoEtrWEcYoIlC&#xA;Io8ABiqF1ry7oWtwxw6vYw30cTc4hMgbi3fieor38cIKCEdDDDBCkMKLFDEoSKJAFVVUUVVUbAAd&#xA;BgSl+r+WPL2sywTarp0F7LamsDzIGK96b9vbphBQQmfTYYEpZeeV/Lt7qkGq3enW8+o21PRupI1Z&#xA;14mq7n+U7rXp2w2ikzwJeZf85A+cfMHlbyZaXGi3P6Pkv9RgsbrVzGJRZwSq5ebiQf5AOn40xVMf&#xA;IPlDWdOu49WHnu98z6LdW59O3ufRmid3KkTRzpU8RRqKvj123VR/5gebE0SLT7eDXNK0bUbu6iIG&#xA;rsQstqkgFwsQVlPOjADt22rUKp95gnmt9A1KeFik0NrPJG46qyxsQR8jirx38r/K3n3zX5L0bzNd&#xA;/mDq0Mt8rSy2qLAYxwlZONStaEJhV7jgV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xVg/5teedV8oaBBeabapNcXM4g9aYM0UQ4lqsFK1Y0+HfJRFsZGk1/L3zNeeZvKVjrN5brbXNxzE&#xA;iJUITG5TknKpo3GvXARSQbY3+cP5ka35NTTU0u1hle9Mhee4V2RRFx+ABWTduXj0wxFokaZn5X1e&#xA;fWfLunarPAbaa9gSZ4DX4SwrtXeh6j2wEJBeffmz+a+veUNesdO06yhkhkhFxNNcK59SrsnpxlWX&#xA;jTjud+o+kxjbGUqen2c7XFpBcNGYWmjSRom+0hZQeJ9xWmRZvKvO/wCb3mLQfzBi8v2mnRTWKtbq&#xA;3NXM0/rhSTEQwApy4j4TuDkxHZgZbvW8gzY15/8AMfkbRtECedJoI9H1OQWRS5jaaKR2VnCuqq9B&#xA;RCeR2Hjirx78qG0DT/zqudK/La/mvvI0+mtdavbh5JLS1uy5EYieQfaNF71oW3NKAqyn/nJyys5P&#xA;IFvdyQRvdQalZrDcMimRFeUcwrkclDUFadcQr0rzR/yjOr/8wVx/yabAryD/AJx9/Kb8vpPJfljz&#xA;k+lV8yBZJxf+vc/3iyyRhvS9T0vsin2MKvcsCuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KrJ7eC4iMU8azRN9qORQymm+4O2KrkRI0WONQiIAqIooABsAAMVU7i1tbmMR3MKTxg8gkih&#xA;xUdDRgcVVemwxVSns7S4aNp4I5miPKIyKrFT4rUbHbFVXFVJ7S1knSeSFHniqI5WUF1r14sRUYqq&#xA;4qpXNpa3UJguoUnhb7UUqh1NPFWBGKrbPT7CyjMdnbRW0bHkyQosak+JCgYqwL80fIHmzzteafpk&#xA;epWll5Rilt7rUIjE73sk0ErMVRq+mqFONO4PiNsVehsqupRwGVgQykVBB6gjFVlvb29vCsFvEkMK&#xA;CiRRqFVR7KKAYqqYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqxzz5580XyT&#xA;o0Wq6rHcTx3FzHZ21taIJJpZ5qlEQM0a9EJ3YYqp3/n6w07y7p2t6jp1/ZpqV3BYx2M8UaXUUtzN&#xA;6MZlT1OKrX4jRiadsVVvOvnjSvKNjaXN9Bc3c1/dR2NhY2UYluJ7iWpVEVmReincsMVSm3/Nzy9P&#xA;5K1jzWtnfrDoMstvq2lvFGl9BLAyiRGjaQR1VXDf3lKe+2KptoPnnRtc12/0fTkmkk062tLu4uiq&#xA;+hxv4zLAisGLczGORHGlO+KoPyF+Z3lrzy+rpovrg6Nc/Vbkzqih68uEsXB3rG/A8SaH2xVAeVfz&#xA;l8seZ9fi0LSrW+kvW+tG6LRxCO2S0kMXqTssrcVlkHGOgJPcAYqzHV9Sg0vSr3U7hWaCxgluZljA&#xA;LlIULsFBKitF2qcVSLQvzE0XWtV0vTLWC5SfV9Ej8xWzSrGEW0leNFRyrsRLWUVABX/KxVJ9K/O3&#xA;ydqeojTbaO7+u/pl9AeFkiBS4VHcStSQ/uX9FwrD4qj7OKp9B540y48xa95fhtrmTUPL1vBdXQVE&#xA;4yrcxtJGkB51Z6LSjBd++Kpf5b/Nby35jutCttMiunk1+xn1KAskYEEFvIIX+sUkPFjKeA4ct8VX&#xA;+XPzJtPMGv32k2OiaoIdOvLrT7nV5IoBZC4s2KyKHWdpPiI+H933FaYqltn+dnla587f4Say1G3u&#xA;2vrjTIdQlhj+pyXdqqvJEkiSu9eLqRVB1HTFUwn/ADQ0dfPcnkq007UdQ1S2EB1C4tYUa2tVuAGR&#xA;p3aRGA4sGJVT9+KppD5w0+bzHq/l+G3uJNQ0a1gvJ+KpwkS5DmNIjzqX/dn7QA98VSjyd+Z9t5p1&#xA;W/0628v6vYSaYzRXs19FbRxJOgVvQJjuJT6hVwRtT3xVQ8s/nJ5Y8yanp2lada336SvjeC5s5I4l&#xA;ksBYuI5DegSkJydgE4cq17YqzDWNWsNH0q81XUJfRsbCGS4uZaE8Y4lLMaDcmg6DrirE/Jn5t6F5&#xA;q1ZdJi07UtKvZ7JdTsk1OBIRc2bMFE0JSSUMtWHWhxVEeVfzJtPM2rXVjYaJqsVrZ3FxaSatPFAt&#xA;mZrVyjqrrM8m7D4fg+7FWX4q7FXYq7FXYq7FXYq7FXYq7FXYqxT8zfKl/wCavKk+jWUenSyTsC6a&#xA;rFLLDxCsKoYXjkjkDEFXB28MVY0/5UeYE/KrQfKMWsRXGr6JdW14uoXaSPEzW1wbhIyobnwSojX4&#xA;h8I7Yqj/ADV5L87+YNF0O6k1HToPN2gagNRtpooJhp8nEOnpOjSPMoZH+Ih+v4Kqvkn8t7rTfLnm&#xA;Ox8x3cWoah5suru71hrZDHAv1yMRNFErkniqjYtv44qgPy8/KzW/J/kXWdJGqx3PmPU1ZItWKsEj&#xA;EdqlraLx+0VhWMHFVL8s/wAmbjyF5gW9s9ZlvtOuNLisr+1uQvL6zC/JJITGqARqCyqrVYV+0cVQ&#xA;/wCWv5O675H803WsW+rQ3Fnq73B1qxKMOVZWktZIW/ZeP1CrA7Ee/Qq9K17TBquh6jpZk9IX9tNa&#xA;+rTlw9aMpypUVpyrgV57+Wf5Yeb/AC/r9vq3mTV7S+XS9FTy7pNvZwtGBaRypIskzPv6n7oCg2xV&#xA;KtO/ICay83aV5lj1GJbi01e81G/iVGC3EM8skluvX+8h9Z15HscKs60XyZc6f+YfmTzU9yj2+uQW&#xA;UEVsAQ8ZtEZWLE7Hly2pgVI/y0/KRvJ3mXXdVkvEura85QaHbKpX6nZPczXTwb7GskwO3hiqh5J/&#xA;KzV/Lfn3WPMLHSp7bV72/u3uRBcDUlivJTKkAl9X0eCsFr+78d8VQWlfkfcab+ZTeeY7y2lu5dVv&#xA;buaCaNmH1O8jRUWOv2J4mDnmOoamFUZ5r/KrXdc/NDRfNkN1YafZ6TcQztcW8U6alNFEF5200gk9&#xA;KSOQhl3Wqqab9MCsp0vylcWfn7XPM7XCPBq1pZ2sduAeaG09TkzHoQ3qbYq7yh5SuNC1TzNeS3CT&#xA;LrupHUIkQEGNTDHFwavU1jrtiqG8seQYdE88+bPMy+if8RPaNCkaFXiEEPCUMeh9WWrmn04qnXmz&#xA;QIvMXljVdBllMCanazWpmUcinqoVD02rxJrTFWEeQvy3836Z5lstb8z6pZXX6G0gaFpVvp8UsYaF&#xA;XVvXnMrN+9YRgEL8OKpp+Xn5XaV5TvNU1V4oJtd1K7vJX1GNWWT6tdT+usDVP7PFfuxVnGKuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KsU/M3X/Mvl3yle67oUdlM+mRyXV5FferRoYkLER+kR8dQPtGmKsb82/m&#xA;L5w8sflhaeZ76HTX1a7uLZOEYuDapDdEcWYE+ryVTvT6MVRGpfmVq+k/lY3m2eOy1TUJ5Eh05LL1&#xA;4bWR55xBEW+shZVCsSWqO23jiqM1vzN578sflzrfmDzBDpc2s6bG01tFYfWPqzIAtBJ6pVw3IsNj&#xA;0ofYKrPIP5pW3nDzTq+naeYpdM06zsriO5VJY5GmufU9VGWULshTb4cVYf8Alt/zkDqfmzVfLGk3&#xA;en29pqGrT3qajEvP4beG0a5tZ4KsfhkZGRuVd1PTCqv5n/Ofzhpt35k1ix07T5PJvlLUYNM1X1nm&#xA;+vzPI8ccrwcaRqEaYCjKa9cVZzc+cr6L81LLyesERsbnSJdTe4PL1RJHOIgg348aGvTArGfPn5l+&#xA;drDzNrGk+V7HTpYPLekfpnVpdRabnKnxN6NuIioDcEryfbFUR5o/NXVYPL/k+fQbO2TVfOUS3Fsd&#xA;Rd/qtrCLUXcrzejR34I1KLSuKq+pfmLrcX5XR+c9JGn65LZsJdWSxMzW8ltFIVuTas/puHjX4quK&#xA;bHbFU7/LnzTq3mrQ5deu7RLPTr24lOhx0cTPYq3GKacMdmloWAApxp1riqn5t85X2i+cPKGhwQRS&#xA;W/mK4uobqV+XOMW8HqqY6ECpPWuKvPvNn/OQeo6D5l826E9hb+rpD2SaLM/qcJ2mlt1uI5KN9tY7&#xA;gunGmymuFXt+BXiumfnn5guvzcPktrKxksjql5p3wGaO6SK1QOs7M9YWDVpxU8tjsNqlV35ifnh5&#xA;k8sfmInlnT9Os7+EtYqlqfrH12f64W5+j6fKP4OH7Q7jrirIPzp/NTUPIdlpf6LsotQ1C+kmllgm&#xA;JULZWkXqXMgoyfEtVp/HAq/8z/P3mXQNA0nzB5ZTTrzTdQlt4Sbz1uRN6yiB4/SKjjRqtX6MVTTW&#xA;PNmvaPqvkzSryG1kutfuJbXU5IfU9NGitmmJg5ENQslPj7YqkN7+Z/mC3/OMeSpo9P03SWWBrOe/&#xA;Fytxf+rGGk+pyKPQ5RueHF+p6HtirIdD85X2ofmP5m8rSwRJZ6Jb2M1vOvL1HN2jM4ep40HHagxV&#xA;j/nb835vLv5kaJ5YitYptMuWtk1q9Ytzt3v5HitgtCAPijq1QdiMVd+Yn5taj5N1zVLGezhktl0M&#xA;6lokp58pr0XC231ZwD8XxSo3w0NMVa/Nn81Nd8jeXtElgsbe98wagHlu7NiyxLBaW5mvHQhg3wHi&#xA;FqT17nFXo+n39rqFhbX9o/qWt3Ek9vIP2o5VDofpU4qiMVdirsVdirsVdiqX+YtCstf0K/0S+Liz&#xA;1GB7a4MRCvwkHFuJINDT2xVKvM/kDRfMfli28u3stxFZWjW7wS28gjmVrWnpnmVYV28MVW3P5eaN&#xA;f+ULnyrrNze6zp90eUs9/OZbmoYOhWUBCODKCuKqQ/LfTJPKGo+Vb7U9U1Kw1MFbi4vro3FyqsFH&#xA;GOV1PFfgG1PE98VTLTPKOlad5gvddtzKb2/traznDsCnp2gYR8VoKH4zXfFWPaH+S/krRNU8uapZ&#xA;JcC+8sW89pYTPIpLxXHq1Weijnx+sPxpSlcVW6z+Snk7V9cutVuZL5Y9QuILzUtLiuWSxuZ7anpv&#xA;NDTc7CtCMVR/mj8tNK8weYbfzA2palpmqW1qbKOfTbgW5MLOZCrfAx3Y+OKqHnD8pPLHmnVZNUu5&#xA;76yu7i0/R98bC5a3W6tOXL0Z1AIdevhtiqM8wflt5Z1rRtK0t0msY9CaJtGurGVoLi1MKCNPSkFS&#xA;BwFCDXFVbRvIWh6R5Qn8qWrTtp1zHcxzyyyc53N4WMzlyKciZCemKptoekWmi6Lp+j2ZY2mm20Nn&#xA;bmQ8n9OCMRpyIAqeK77Yqgta8o6VrGuaJrV2ZReaBLNNYhGAQtPH6T+oCDyHHpuMVY35g/JPyTr1&#xA;xqlzqC3LTare22ozOkiqUns4zDH6XwGilGIYGtcVZ9irAYvyU8oJ5uHmh5r6a7S/l1aKze4/0RLy&#xA;cKHlWJVXeka9+wriqK8x/lL5V1/V7nWLxrmPU52spYrqCRUe3l09maCSAlW4t+8YNWtRiqI8z/ld&#xA;5P8ANOsLqmv2p1CWOyewggm4tDGsj82mRCu03bnXpirrn8s/L915O0vynPLdPpmkPbPaOZF9b/Q2&#xA;5Qqz8KELQDp0xVNdY8r6bq2q6Nqd0ZBc6HPJc2QRgFLyxNC3MEGo4sfDFUn1T8sNB1bzdZ+ZtRu9&#xA;QurjT51urLTpLpzYxTooVZI4KUUjiDsdzuepxVu4/LTSpPOkvm6DUtSstRuWtjeQWtwI7adbSgjj&#xA;lj4EshAow5b1OKoDzF+SXkTzDeavf6rBLPqervDI2oc1FxbfVwqxraycaxCkYr1riqaeb/y38teb&#xA;b/Q77WUlluPL9wLqyZGVQzckZllHEhkYxLUCmKrfM/5Y+UfNOsxapr9r+kWgs5LKC0m4tbxiVw7T&#xA;IhWol2A5V6YqnHlny/Z+XdAsdDspJZbPTohBbvOweT01+yGYBQeI2G3TFUzxV2KuxV2KuxV2KsF/&#xA;N251eLSdFh0t7oT3mr29tJFY3AtJ5Y2ilZo1mJAWpUdcVYz+a3mTXdA8teXtI0q7vrXWnjl1Genr&#xA;ahdFLGHn9Xme3WUlZbmWKJpGHClcKp55u8wnVj5JitNUm0nQfM0jzXGo20qwSsgs2uLeBZjXh6rf&#xA;y7njQdcCovzHq6aHqXkOL9LsNMuL6a3uru4nFLhP0bctF60nwq/KZUI/yqUxVIbLzTqU/wCWujaw&#xA;mpSObvzRHD9d9Q/vLKTzE0Krz7xNbUXw4e2Kp1+Z1vLdQ6BcWOrXtktxqtpYynT7poUkhuZQknLh&#xA;sWHHY9sVUPzKHmvSItEm8uai6yXbDy/Kl1IWQG+ASG+Ox5TQSID/AJQJxVn1lbfVbOC29SSb0I0j&#xA;9aZi8j8FC8nY7sxpUnFXj0XmHW/0lb6z+mrltVl84SaJLoXrL9WWwF09vw+rUpyS3UT+oPiPWtMK&#xA;p7Z/p3UPze1iJn1J9I02S04NBfCGzh5WYl4S2teUvqP4DvvgVkP5p6he6d+XHmW+sZ3try2064lt&#xA;7iIlXR1jJVlI6EHFWAeTPPPmbW/zA8u2Fxcutrp+n3Wm65AKqs2s2lBdFlP++wI2Wv8AP95VNPyu&#xA;u9X1LzZ5ludQur+WK01fVbW0Ml+r2hjhu2jSJbKvJfTToxFMVTP8uppdWvL/AFrUNduZdUGpalZv&#xA;onrKltBHa3MkEMX1aleQhRJOR+I8qnArHdL83ecJdb0mymhuF01/OWrWZ1U3KMs0EP6Q9O0MIPqB&#xA;E9JaVHH4B7YVVNa/MG9t/wA6bS0S9uF0K1mttDvLJYZjatdXsLz+u1wF9APHI9rEEL8viO2KpZ+Z&#xA;vnLzdoXmXzQ9tezLof1XT7NBGWDWd5c8nhnQj7KS+m0T/wCUyYq9Ke/vR+aEGnid/qLaJLcG2qfT&#xA;Mou40D8enLiSK4FST8qbqfWLRtf1LWri41m6mvY7vRmuF+r23o3TRLEtsB8BiRFHLqa1PUYqknkD&#xA;8wb3VPzS1i2nu7ibSNX+sjR7eWKZLeE6VIIK28kiLHJ9ZjLTH02NKfFTCrMvIOrzXg12K7uzPPBr&#xA;WoQwxu/J0hjloiKCahVHTArLMVdirsVdirsVdirsVdirsVdirsVQeqHRkjhn1U26xwSrJby3XAKk&#xA;wBCsjSfZehNCN8VaWTRJZYdSVrZ5rhTbW94DGWkUksYkk6sCUrxB7Yqh5tF8qXWifoyexsJ9DtR6&#xA;f1F4oXtIxBUcfSIMa+nSlKbYqpXGn+S9R0Fba5ttNvNAiKhIJEgls1KHitFYGIUJoMVVb3SPKtxp&#xA;40G9srGbTo4lcaVNFC0CwxEcW9BgUCIQKHjQYqpfVvJmlaZZWnpadY6XE4n0634wQ26ureqJIE+F&#xA;AwZuXJe5riqJ1O78u+lbPqc1n6Rdbiza5aLiXjoyyxFzTkvIEMvTFVe41XS7YxC4vIITPvAJJEXn&#xA;0+xUjl17Yqhf0B5Wj1xdV/R1imuzKwS/9GEXbqBRgJePqEAdd8VREJ0iK4muITbpcXMqw3EycA8k&#xA;0a8VR2G7OqigB3AxVbqT6JcA6TqTW0wvUKNp9yY2EyNUFTE/21PSlMVbh0TRoLo3cFhbRXRkkmNw&#xA;kMayGScKsr8wOXKQRqGPU0FemKoe08peVLPVZdYs9FsbbVpy7TajDbQpcu0prIWmVQ5Ln7VTviqs&#xA;nl7QI9VfWI9MtE1aQcZNRWCMXLClKGYLzIpt1xVemjaQnp8LG3X0biS8ipEg4XMvP1J122kf1X5O&#xA;NzyNepxVz6Lo7wywvYW7QzzrdTRmJCr3CsrrMwIo0gdFYMd6gHtirV1oei3YuRdafbXAvRGLwSwx&#xA;v6whNYhLyB58D9nl07YqrmyszeC9MEf1wRmEXPBfVERYMY+dOXEsAaVpXFUNb+X9BttTn1W3021h&#xA;1S5HG5v44Y0uJF8HlCh2G3c4quh0TRYEskhsLaJNNr+jlSGNRb8kMbegAP3dUYqeNNiRiqhbeVPK&#xA;1rq0ms2uj2MGrzFjNqMVtCly5k+2WmVQ55d6nfFU0xV2KuxV2KuxV2KuxV2KuxV2KuxVgf5wWl3c&#xA;aTojW8Eky2+sW81wY7GbU/TiWKYNI9rAGkkUFhWmKpV598vXfmTyz5MtNIWe3li1aO4W8jsp7L6t&#xA;NBY3hjuZLWRVkgjF1wPFx3AqaiqqU2uk+Z9Q/J68Gp6LcJfXGvTalq+gqrerLaNrBubqCJWoZVeH&#xA;lx/nXpWuFVbWE1zWfyo82WkGiehTUo00i2s9LudOkubYSWsvrGzmLzcw5kVmoKhK0GKr/wA0vL3m&#xA;Sbzhc+YtEs7i4utM0D04441cpdRzTzJdWgIBVpPScSIv2uSr44qhvM2lapHa/ljI9nOsenWE0eoO&#xA;dKudWFu7WMKKs1pApkBLgqK9D8sVTX8wrd38zeTdQjtZTpsFjqKSyjRbvU0iMxsjEj2kKepAzrG3&#xA;HkBxoRTAqUfnh5T13zFcQfobT/XtE0C9EweyMzem13ZMYbYPwWK7MSO0QI5fCVAB+JSrNbrT5/8A&#xA;Fnkia1guJLGzs79JLiSNwYw8ECx+vUDg7cejUNa4Fee2/lvzfY+eIZ4rC6m0TVfN1xfXYMclLZ7c&#xA;yrHcgcdobiGQAv8AZqi7/FhVOL+21nTvzI1O5Oii/u9R1bSXsr6bS572IabxggmEV5Eyx2clqRNN&#xA;WTr1pvir17ArsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Untitled-5</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:A734A9120D206811945780C5360C7B74</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:A734A9120D206811945780C5360C7B74</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:OriginalDocumentID>uuid:567ec7d6-d4a4-114d-8ce7-c030c3d26d96</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:A634A9120D206811945780C5360C7B74</stRef:instanceID>
            <stRef:documentID>xmp.did:A634A9120D206811945780C5360C7B74</stRef:documentID>
            <stRef:originalDocumentID>uuid:567ec7d6-d4a4-114d-8ce7-c030c3d26d96</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:A634A9120D206811945780C5360C7B74</stEvt:instanceID>
                  <stEvt:when>2012-10-09T17:14:27+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:A734A9120D206811945780C5360C7B74</stEvt:instanceID>
                  <stEvt:when>2012-10-09T17:14:35+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 9.90</pdf:Producer>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>50.219157</stDim:w>
            <stDim:h>28.940525</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>SjF_CMYK</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>20.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>70.000000</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -82.0371 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 82.0371 li
142.355 82.0371 li
142.355 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0 82.0371 mo
142.355 82.0371 li
142.355 0 li
0 0 li
0 82.0371 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
gsave
0 0 mo
142.354 0 li
142.354 82.0371 li
0 82.0371 li
0 0 li
cp
clp
11.7363 46.7188 mo
11.9912 46.1357 li
12.0083 46.0957 12.0425 46.0781 12.0874 46.0957 cv
12.3252 46.2031 12.5234 46.2822 12.9141 46.2822 cv
13.2534 46.2822 13.4575 46.1357 13.4575 45.8867 cv
13.4575 45.6543 13.3442 45.5352 12.7954 45.291 cv
12.0874 44.9912 11.7813 44.6182 11.7813 44.0127 cv
11.7813 43.3506 12.2793 42.8574 13.1235 42.8574 cv
13.6724 42.8574 13.9102 42.8975 14.3232 43.0781 cv
14.3745 43.0957 14.3745 43.1357 14.3574 43.1738 cv
14.0913 43.6953 li
14.0742 43.7354 14.0405 43.7588 13.9893 43.7354 cv
13.7681 43.6445 13.5425 43.5996 13.2764 43.5996 cv
12.9141 43.5996 12.7554 43.7588 12.7554 43.9893 cv
12.7554 44.2158 12.8403 44.3232 13.4463 44.5674 cv
14.1533 44.8672 14.4253 45.2188 14.4253 45.7949 cv
14.4253 46.5879 13.8652 47.0244 12.9932 47.0244 cv
12.5234 47.0244 12.1553 46.9844 11.7705 46.7861 cv
11.7363 46.7637 11.7251 46.7402 11.7363 46.7188 cv
0 0 0 1 cmyk
f
17.3623 46.2139 mo
17.3623 46.2422 17.3745 46.2598 17.4023 46.2598 cv
18.8911 46.2598 li
18.9365 46.2598 18.9595 46.2822 18.9595 46.333 cv
18.9595 46.9102 li
18.9595 46.9619 18.9365 46.9844 18.8911 46.9844 cv
16.5415 46.9844 li
16.4902 46.9844 16.4683 46.9619 16.4683 46.9102 cv
16.4683 42.9707 li
16.4683 42.9199 16.4902 42.8975 16.5415 42.8975 cv
17.3003 42.8975 li
17.3403 42.8975 17.3623 42.9199 17.3623 42.9707 cv
17.3623 46.2139 li
cp
f
22.207 43.582 mo
21.6641 43.582 21.3691 44.0234 21.3691 44.9346 cv
21.3691 45.8633 21.6582 46.2988 22.2012 46.2988 cv
22.7388 46.2988 23.0332 45.8633 23.0332 44.9414 cv
23.0332 44.0176 22.7329 43.582 22.207 43.582 cv
22.2012 47.0244 mo
20.8428 47.0244 20.4351 46.2822 20.4351 44.9414 cv
20.4351 43.5879 20.8428 42.8574 22.2012 42.8574 cv
23.5601 42.8574 23.9668 43.5928 23.9668 44.9346 cv
23.9668 46.2881 23.5601 47.0244 22.2012 47.0244 cv
f
26.917 46.9844 mo
26.8892 46.9844 26.8721 46.9678 26.8599 46.9336 cv
25.7051 42.9873 li
25.688 42.9365 25.7168 42.8975 25.7622 42.8975 cv
26.5879 42.8975 li
26.6338 42.8975 26.6392 42.9141 26.6558 42.9531 cv
27.4551 46.0898 li
28.2529 42.9531 li
28.2642 42.9141 28.2871 42.8975 28.3262 42.8975 cv
29.063 42.8975 li
29.1128 42.8975 29.1362 42.9258 29.125 42.9766 cv
27.9639 46.9336 li
27.9531 46.9678 27.9302 46.9844 27.896 46.9844 cv
26.917 46.9844 li
cp
f
32.6841 45.4053 mo
32.231 43.8369 li
31.7783 45.4053 li
32.6841 45.4053 li
cp
31.5752 46.124 mo
31.3481 46.9336 li
31.3311 46.9678 31.3091 46.9844 31.2739 46.9844 cv
30.5381 46.9844 li
30.499 46.9844 30.4712 46.9502 30.4883 46.9111 cv
31.7329 42.9258 li
31.7329 42.9092 31.75 42.8965 31.7783 42.8965 cv
32.7803 42.8965 li
32.7969 42.8965 32.814 42.9092 32.8262 42.9365 cv
34.0601 46.9111 li
34.0771 46.9502 34.0483 46.9844 34.0093 46.9844 cv
33.188 46.9844 li
33.1543 46.9844 33.1309 46.9678 33.1143 46.9336 cv
32.8882 46.124 li
31.5752 46.124 li
cp
f
37.6084 44.9639 mo
39.0122 46.8828 li
39.0415 46.9277 39.0122 46.9844 38.9673 46.9844 cv
37.9995 46.9844 li
37.9766 46.9844 37.9595 46.9736 37.9482 46.9561 cv
36.8555 45.252 li
36.8555 46.9102 li
36.8555 46.9629 36.8335 46.9844 36.7935 46.9844 cv
36.0342 46.9844 li
35.9834 46.9844 35.9614 46.9629 35.9614 46.9102 cv
35.9614 42.9707 li
35.9614 42.9209 35.9834 42.8975 36.0342 42.8975 cv
36.7935 42.8975 li
36.8335 42.8975 36.8555 42.9209 36.8555 42.9707 cv
36.8555 44.7656 li
37.9375 42.9258 li
37.9482 42.9082 37.9653 42.8975 37.9873 42.8975 cv
38.8594 42.8975 li
38.9214 42.8975 38.9395 42.9531 38.9102 42.999 cv
37.6084 44.9639 li
cp
f
47.1953 45.7227 mo
47.1953 46.5205 46.7485 47.0244 45.6323 47.0244 cv
44.5234 47.0244 44.0762 46.5205 44.0762 45.7227 cv
44.0762 42.9717 li
44.0762 42.9199 44.0981 42.8975 44.1494 42.8975 cv
44.9082 42.8975 li
44.9473 42.8975 44.9702 42.9199 44.9702 42.9717 cv
44.9702 45.6992 li
44.9702 46.1016 45.1914 46.2988 45.6323 46.2988 cv
46.0801 46.2988 46.3003 46.1016 46.3003 45.6992 cv
46.3003 42.9717 li
46.3003 42.9199 46.3232 42.8975 46.3682 42.8975 cv
47.1323 42.8975 li
47.1724 42.8975 47.1953 42.9199 47.1953 42.9717 cv
47.1953 45.7227 li
cp
f
51.6558 45.6484 mo
51.6558 42.9707 li
51.6558 42.9189 51.6729 42.8975 51.7129 42.8975 cv
52.4429 42.8975 li
52.4878 42.8975 52.5107 42.9189 52.5107 42.9707 cv
52.5107 46.9102 li
52.5107 46.9609 52.4878 46.9844 52.4429 46.9844 cv
51.6499 46.9844 li
51.5986 46.9844 51.5879 46.9785 51.5708 46.9395 cv
50.2578 44.2324 li
50.2578 46.9102 li
50.2578 46.9609 50.2349 46.9844 50.1899 46.9844 cv
49.4756 46.9844 li
49.4258 46.9844 49.4028 46.9609 49.4028 46.9102 cv
49.4028 42.9707 li
49.4028 42.9189 49.4258 42.8975 49.4756 42.8975 cv
50.2578 42.8975 li
50.3086 42.8975 50.3198 42.9023 50.3369 42.9424 cv
51.6558 45.6484 li
cp
f
55.5557 42.8975 mo
55.5957 42.8975 55.6177 42.9199 55.6177 42.9707 cv
55.6177 46.9111 li
55.6177 46.9619 55.5957 46.9844 55.5557 46.9844 cv
54.7969 46.9844 li
54.7456 46.9844 54.7236 46.9619 54.7236 46.9111 cv
54.7236 42.9707 li
54.7236 42.9199 54.7456 42.8975 54.7969 42.8975 cv
55.5557 42.8975 li
cp
f
58.7344 46.9844 mo
58.7065 46.9844 58.6895 46.9678 58.6772 46.9336 cv
57.5225 42.9873 li
57.5054 42.9365 57.5342 42.8975 57.5796 42.8975 cv
58.4053 42.8975 li
58.4512 42.8975 58.4565 42.9141 58.4736 42.9531 cv
59.2725 46.0898 li
60.0703 42.9531 li
60.0815 42.9141 60.1045 42.8975 60.1436 42.8975 cv
60.8804 42.8975 li
60.9302 42.8975 60.9536 42.9258 60.9424 42.9766 cv
59.7813 46.9336 li
59.7705 46.9678 59.7476 46.9844 59.7134 46.9844 cv
58.7344 46.9844 li
cp
f
63.7373 44.5781 mo
65.0005 44.5781 li
65.0503 44.5781 65.0791 44.6006 65.0791 44.6465 cv
65.0791 45.2354 li
65.0791 45.2744 65.0503 45.2979 65.0005 45.2979 cv
63.7373 45.2979 li
63.7373 46.2148 li
63.7373 46.2422 63.7495 46.2598 63.7773 46.2598 cv
65.3672 46.2598 li
65.4194 46.2598 65.4414 46.2822 65.4414 46.3271 cv
65.4414 46.9102 li
65.4414 46.9619 65.4194 46.9844 65.3672 46.9844 cv
62.9165 46.9844 li
62.8652 46.9844 62.8433 46.9619 62.8433 46.9102 cv
62.8433 42.9707 li
62.8433 42.9199 62.8652 42.8965 62.9165 42.8965 cv
65.3672 42.8965 li
65.4194 42.8965 65.4414 42.9199 65.4414 42.9707 cv
65.4414 43.5488 li
65.4414 43.5996 65.4194 43.6221 65.3672 43.6221 cv
63.7773 43.6221 li
63.7495 43.6221 63.7373 43.6387 63.7373 43.667 cv
63.7373 44.5781 li
cp
f
68.3218 44.7256 mo
68.668 44.7256 li
69.0806 44.7256 69.3359 44.5449 69.3359 44.1533 cv
69.3359 43.7861 69.1196 43.6221 68.6899 43.6221 cv
68.3667 43.6221 li
68.3389 43.6221 68.3218 43.6387 68.3218 43.667 cv
68.3218 44.7256 li
cp
68.3218 45.3652 mo
68.3218 46.9102 li
68.3218 46.9619 68.2998 46.9844 68.2598 46.9844 cv
67.501 46.9844 li
67.4497 46.9844 67.4277 46.9619 67.4277 46.9102 cv
67.4277 42.9707 li
67.4277 42.9199 67.4497 42.8965 67.501 42.8965 cv
68.8086 42.8965 li
69.834 42.8965 70.27 43.3506 70.27 44.1367 cv
70.27 44.7256 69.9917 45.1338 69.4487 45.2861 cv
70.479 46.877 li
70.5186 46.9385 70.4849 46.9844 70.4336 46.9844 cv
69.5327 46.9844 li
69.5049 46.9844 69.4888 46.9736 69.4829 46.9561 cv
68.5596 45.3652 li
68.3218 45.3652 li
cp
f
72.3457 46.7188 mo
72.6006 46.1357 li
72.6182 46.0957 72.6514 46.0781 72.6963 46.0957 cv
72.9346 46.2031 73.1328 46.2822 73.5234 46.2822 cv
73.8623 46.2822 74.0664 46.1357 74.0664 45.8867 cv
74.0664 45.6543 73.9541 45.5352 73.4043 45.291 cv
72.6963 44.9912 72.3906 44.6182 72.3906 44.0127 cv
72.3906 43.3506 72.8887 42.8574 73.7324 42.8574 cv
74.2813 42.8574 74.5195 42.8975 74.9326 43.0781 cv
74.9834 43.0957 74.9834 43.1357 74.9668 43.1738 cv
74.7012 43.6953 li
74.6836 43.7354 74.6494 43.7588 74.5986 43.7354 cv
74.3779 43.6445 74.1514 43.5996 73.8857 43.5996 cv
73.5234 43.5996 73.3643 43.7588 73.3643 43.9893 cv
73.3643 44.2158 73.4492 44.3232 74.0557 44.5674 cv
74.7627 44.8672 75.0352 45.2188 75.0352 45.7949 cv
75.0352 46.5879 74.4746 47.0244 73.6025 47.0244 cv
73.1328 47.0244 72.7646 46.9844 72.3799 46.7861 cv
72.3457 46.7637 72.335 46.7402 72.3457 46.7188 cv
f
77.9092 42.8975 mo
77.9492 42.8975 77.9717 42.9199 77.9717 42.9707 cv
77.9717 46.9111 li
77.9717 46.9619 77.9492 46.9844 77.9092 46.9844 cv
77.1504 46.9844 li
77.0996 46.9844 77.0771 46.9619 77.0771 46.9111 cv
77.0771 42.9707 li
77.0771 42.9199 77.0996 42.8975 77.1504 42.8975 cv
77.9092 42.8975 li
cp
f
80.998 46.9844 mo
80.958 46.9844 80.9355 46.9629 80.9355 46.9102 cv
80.9355 43.667 li
80.9355 43.6387 80.9189 43.6211 80.8906 43.6211 cv
79.9443 43.6211 li
79.8936 43.6211 79.8721 43.5996 79.8721 43.5488 cv
79.8721 42.9707 li
79.8721 42.9209 79.8936 42.8975 79.9443 42.8975 cv
82.832 42.8975 li
82.877 42.8975 82.8994 42.9209 82.8994 42.9707 cv
82.8994 43.5488 li
82.8994 43.5996 82.877 43.6211 82.832 43.6211 cv
81.8691 43.6211 li
81.8418 43.6211 81.8291 43.6387 81.8291 43.667 cv
81.8291 46.9102 li
81.8291 46.9629 81.8076 46.9844 81.7568 46.9844 cv
80.998 46.9844 li
cp
f
86.5947 45.3936 mo
86.5947 46.9053 li
86.5947 46.9561 86.5723 46.9844 86.5273 46.9844 cv
85.7686 46.9844 li
85.7236 46.9844 85.7002 46.9561 85.7002 46.9053 cv
85.7002 45.3936 li
84.4443 42.998 li
84.415 42.9482 84.4326 42.8965 84.5 42.8965 cv
85.3838 42.8965 li
85.4121 42.8965 85.4277 42.9082 85.4404 42.9365 cv
86.2217 44.6016 li
87.0029 42.9365 li
87.0078 42.9082 87.0254 42.8965 87.0527 42.8965 cv
87.8633 42.8965 li
87.9248 42.8965 87.9424 42.9482 87.9199 42.9932 cv
86.5947 45.3936 li
cp
f
94.5566 43.582 mo
94.0137 43.582 93.7188 44.0234 93.7188 44.9346 cv
93.7188 45.8633 94.0078 46.2988 94.5508 46.2988 cv
95.0889 46.2988 95.3828 45.8633 95.3828 44.9414 cv
95.3828 44.0176 95.083 43.582 94.5566 43.582 cv
94.5508 47.0244 mo
93.1924 47.0244 92.7852 46.2822 92.7852 44.9414 cv
92.7852 43.5879 93.1924 42.8574 94.5508 42.8574 cv
95.9102 42.8574 96.3174 43.5928 96.3174 44.9346 cv
96.3174 46.2881 95.9102 47.0244 94.5508 47.0244 cv
f
99.2549 44.5781 mo
100.461 44.5781 li
100.512 44.5781 100.54 44.6006 100.54 44.6465 cv
100.54 45.2354 li
100.54 45.2744 100.512 45.2979 100.461 45.2979 cv
99.2549 45.2979 li
99.2549 46.9102 li
99.2549 46.9619 99.2324 46.9844 99.1934 46.9844 cv
98.4336 46.9844 li
98.3828 46.9844 98.3613 46.9619 98.3613 46.9102 cv
98.3613 42.9707 li
98.3613 42.9199 98.3828 42.8965 98.4336 42.8965 cv
100.829 42.8965 li
100.88 42.8965 100.902 42.9199 100.902 42.9707 cv
100.902 43.5488 li
100.902 43.5996 100.88 43.6221 100.829 43.6221 cv
99.2998 43.6221 li
99.2715 43.6221 99.2549 43.6387 99.2549 43.667 cv
99.2549 44.5781 li
cp
f
12.7158 54.8486 mo
12.6758 54.8486 12.6538 54.8262 12.6538 54.7744 cv
12.6538 51.5313 li
12.6538 51.5029 12.6367 51.4854 12.6089 51.4854 cv
11.6626 51.4854 li
11.6118 51.4854 11.5898 51.4639 11.5898 51.4131 cv
11.5898 50.835 li
11.5898 50.7842 11.6118 50.7617 11.6626 50.7617 cv
14.5498 50.7617 li
14.5947 50.7617 14.6177 50.7842 14.6177 50.835 cv
14.6177 51.4131 li
14.6177 51.4639 14.5947 51.4854 14.5498 51.4854 cv
13.5879 51.4854 li
13.5596 51.4854 13.5479 51.5029 13.5479 51.5313 cv
13.5479 54.7744 li
13.5479 54.8262 13.5259 54.8486 13.4746 54.8486 cv
12.7158 54.8486 li
cp
f
17.4131 52.4434 mo
18.6763 52.4434 li
18.7261 52.4434 18.7549 52.4648 18.7549 52.5107 cv
18.7549 53.0996 li
18.7549 53.1387 18.7261 53.1621 18.6763 53.1621 cv
17.4131 53.1621 li
17.4131 54.0791 li
17.4131 54.1064 17.4253 54.124 17.4531 54.124 cv
19.043 54.124 li
19.0952 54.124 19.1172 54.1465 19.1172 54.1924 cv
19.1172 54.7754 li
19.1172 54.8262 19.0952 54.8486 19.043 54.8486 cv
16.5923 54.8486 li
16.541 54.8486 16.519 54.8262 16.519 54.7754 cv
16.519 50.835 li
16.519 50.7842 16.541 50.7607 16.5923 50.7607 cv
19.043 50.7607 li
19.0952 50.7607 19.1172 50.7842 19.1172 50.835 cv
19.1172 51.4131 li
19.1172 51.4639 19.0952 51.4863 19.043 51.4863 cv
17.4531 51.4863 li
17.4253 51.4863 17.4131 51.5029 17.4131 51.5313 cv
17.4131 52.4434 li
cp
f
22.8638 54.8887 mo
21.6919 54.8887 20.9897 54.0898 20.9897 52.8057 cv
20.9897 51.5205 21.6919 50.7217 22.8638 50.7217 cv
23.3398 50.7217 23.645 50.7783 23.957 50.9531 cv
23.9849 50.9717 23.9956 50.9932 23.9956 51.0098 cv
23.9956 51.0273 23.9897 51.0498 23.979 51.0732 cv
23.7129 51.582 li
23.6968 51.6104 23.6787 51.627 23.6616 51.627 cv
23.645 51.627 23.6279 51.6221 23.6118 51.6162 cv
23.3848 51.5088 23.187 51.4688 22.938 51.4688 cv
22.4678 51.4688 21.9248 51.8604 21.9248 52.8057 cv
21.9248 53.7559 22.4399 54.1348 22.9438 54.1348 cv
23.1299 54.1348 23.3506 54.1133 23.6167 53.9824 cv
23.6558 53.9648 23.6909 53.9717 23.708 54.0049 cv
23.9849 54.5322 li
24.0127 54.5762 24.002 54.6172 23.957 54.6455 cv
23.6167 54.8369 23.3169 54.8887 22.8638 54.8887 cv
f
26.8706 53.1611 mo
26.8428 53.1611 26.8257 53.1787 26.8257 53.207 cv
26.8257 54.7744 li
26.8257 54.8262 26.8027 54.8486 26.7637 54.8486 cv
26.0044 54.8486 li
25.9536 54.8486 25.9316 54.8262 25.9316 54.7744 cv
25.9316 50.835 li
25.9316 50.7842 25.9536 50.7617 26.0044 50.7617 cv
26.7637 50.7617 li
26.8027 50.7617 26.8257 50.7842 26.8257 50.835 cv
26.8257 52.3975 li
26.8257 52.4258 26.8428 52.4424 26.8706 52.4424 cv
28.0996 52.4424 li
28.1274 52.4424 28.1445 52.4258 28.1445 52.3975 cv
28.1445 50.835 li
28.1445 50.7842 28.1665 50.7617 28.2124 50.7617 cv
28.9707 50.7617 li
29.0166 50.7617 29.0386 50.7842 29.0386 50.835 cv
29.0386 54.7744 li
29.0386 54.8262 29.0166 54.8486 28.9707 54.8486 cv
28.2124 54.8486 li
28.1665 54.8486 28.1445 54.8262 28.1445 54.7744 cv
28.1445 53.207 li
28.1445 53.1787 28.1274 53.1611 28.0996 53.1611 cv
26.8706 53.1611 li
cp
f
33.5049 53.5127 mo
33.5049 50.835 li
33.5049 50.7842 33.522 50.7617 33.562 50.7617 cv
34.292 50.7617 li
34.3369 50.7617 34.3599 50.7842 34.3599 50.835 cv
34.3599 54.7744 li
34.3599 54.8262 34.3369 54.8486 34.292 54.8486 cv
33.499 54.8486 li
33.4478 54.8486 33.437 54.8428 33.4199 54.8037 cv
32.1069 52.0967 li
32.1069 54.7744 li
32.1069 54.8262 32.084 54.8486 32.0391 54.8486 cv
31.3247 54.8486 li
31.2749 54.8486 31.252 54.8262 31.252 54.7744 cv
31.252 50.835 li
31.252 50.7842 31.2749 50.7617 31.3247 50.7617 cv
32.1069 50.7617 li
32.1577 50.7617 32.1689 50.7666 32.186 50.8066 cv
33.5049 53.5127 li
cp
f
38.1753 51.4463 mo
37.6323 51.4463 37.3374 51.8877 37.3374 52.7988 cv
37.3374 53.7275 37.6265 54.1631 38.1694 54.1631 cv
38.7075 54.1631 39.0015 53.7275 39.0015 52.8057 cv
39.0015 51.8818 38.7012 51.4463 38.1753 51.4463 cv
38.1694 54.8887 mo
36.8101 54.8887 36.4033 54.1465 36.4033 52.8057 cv
36.4033 51.4521 36.8101 50.7217 38.1694 50.7217 cv
39.5283 50.7217 39.9351 51.457 39.9351 52.7988 cv
39.9351 54.1523 39.5283 54.8887 38.1694 54.8887 cv
f
42.8672 54.0781 mo
42.8672 54.1064 42.8794 54.124 42.9072 54.124 cv
44.396 54.124 li
44.4414 54.124 44.4644 54.1465 44.4644 54.1973 cv
44.4644 54.7744 li
44.4644 54.8262 44.4414 54.8486 44.396 54.8486 cv
42.0464 54.8486 li
41.9951 54.8486 41.9731 54.8262 41.9731 54.7744 cv
41.9731 50.835 li
41.9731 50.7842 41.9951 50.7617 42.0464 50.7617 cv
42.8052 50.7617 li
42.8452 50.7617 42.8672 50.7842 42.8672 50.835 cv
42.8672 54.0781 li
cp
f
47.7119 51.4463 mo
47.1689 51.4463 46.874 51.8877 46.874 52.7988 cv
46.874 53.7275 47.1631 54.1631 47.7061 54.1631 cv
48.2441 54.1631 48.5381 53.7275 48.5381 52.8057 cv
48.5381 51.8818 48.2378 51.4463 47.7119 51.4463 cv
47.7061 54.8887 mo
46.3477 54.8887 45.9399 54.1465 45.9399 52.8057 cv
45.9399 51.4521 46.3477 50.7217 47.7061 50.7217 cv
49.0649 50.7217 49.4717 51.457 49.4717 52.7988 cv
49.4717 54.1523 49.0649 54.8887 47.7061 54.8887 cv
f
53.7124 53.3428 mo
53.1865 53.3428 li
53.1406 53.3428 53.1182 53.3213 53.1182 53.2744 cv
53.1182 52.6855 li
53.1182 52.6406 53.1406 52.6182 53.1865 52.6182 cv
54.4595 52.6182 li
54.5044 52.6182 54.5273 52.6406 54.5273 52.6855 cv
54.5273 54.5771 li
54.5273 54.6221 54.5103 54.6504 54.4824 54.6563 cv
54.1255 54.7979 53.7183 54.8877 53.2192 54.8877 cv
52.0474 54.8877 51.3462 54.0898 51.3462 52.8047 cv
51.3462 51.5195 52.0474 50.7217 53.2192 50.7217 cv
53.6724 50.7217 53.9956 50.7793 54.3125 50.9541 cv
54.3403 50.9707 54.3525 50.9941 54.3525 51.0098 cv
54.3525 51.0273 54.3462 51.0508 54.3354 51.0732 cv
54.0684 51.582 li
54.0522 51.6104 54.0352 51.6279 54.0186 51.6279 cv
54.0015 51.6279 53.9834 51.6221 53.9673 51.6162 cv
53.7402 51.5088 53.5425 51.4688 53.2935 51.4688 cv
52.8232 51.4688 52.2803 51.8594 52.2803 52.8047 cv
52.2803 53.7559 52.8066 54.1748 53.2544 54.1748 cv
53.4526 54.1748 53.5596 54.1641 53.7124 54.1182 cv
53.7124 53.3428 li
cp
f
58.3652 53.2578 mo
58.3652 54.7695 li
58.3652 54.8213 58.3423 54.8486 58.2974 54.8486 cv
57.5381 54.8486 li
57.4932 54.8486 57.4702 54.8213 57.4702 54.7695 cv
57.4702 53.2578 li
56.2144 50.8633 li
56.1851 50.8125 56.2021 50.7607 56.27 50.7607 cv
57.1543 50.7607 li
57.1821 50.7607 57.1982 50.7725 57.21 50.8008 cv
57.9912 52.4658 li
58.7734 50.8008 li
58.7783 50.7725 58.7954 50.7607 58.8232 50.7607 cv
59.6333 50.7607 li
59.6953 50.7607 59.7124 50.8125 59.6904 50.8574 cv
58.3652 53.2578 li
cp
f
65.5571 50.7607 mo
65.5972 50.7607 65.6191 50.7842 65.6191 50.835 cv
65.6191 54.7754 li
65.6191 54.8262 65.5972 54.8486 65.5571 54.8486 cv
64.7979 54.8486 li
64.7471 54.8486 64.7251 54.8262 64.7251 54.7754 cv
64.7251 50.835 li
64.7251 50.7842 64.7471 50.7607 64.7979 50.7607 cv
65.5571 50.7607 li
cp
f
70.083 53.5127 mo
70.083 50.835 li
70.083 50.7842 70.1001 50.7617 70.1401 50.7617 cv
70.8701 50.7617 li
70.915 50.7617 70.938 50.7842 70.938 50.835 cv
70.938 54.7744 li
70.938 54.8262 70.915 54.8486 70.8701 54.8486 cv
70.0771 54.8486 li
70.0259 54.8486 70.0151 54.8428 69.998 54.8037 cv
68.6851 52.0967 li
68.6851 54.7744 li
68.6851 54.8262 68.6621 54.8486 68.6172 54.8486 cv
67.9028 54.8486 li
67.853 54.8486 67.8301 54.8262 67.8301 54.7744 cv
67.8301 50.835 li
67.8301 50.7842 67.853 50.7617 67.9028 50.7617 cv
68.6851 50.7617 li
68.7358 50.7617 68.7471 50.7666 68.7642 50.8066 cv
70.083 53.5127 li
cp
f
77.2236 53.1221 mo
77.2236 54.0791 li
77.2236 54.1074 77.2363 54.124 77.2637 54.124 cv
77.7451 54.124 li
78.0566 54.124 78.334 54.0049 78.334 53.6543 cv
78.334 53.2754 78.085 53.1221 77.5361 53.1221 cv
77.2236 53.1221 li
cp
77.2695 51.4863 mo
77.2412 51.4863 77.2236 51.5029 77.2236 51.5313 cv
77.2236 52.4824 li
77.5576 52.4824 li
78.0283 52.4824 78.2656 52.3408 78.2656 51.9561 cv
78.2656 51.5938 78.0449 51.4863 77.6602 51.4863 cv
77.2695 51.4863 li
cp
77.5645 50.7607 mo
78.6904 50.7607 79.2002 51.0898 79.2002 51.8652 cv
79.2002 52.2275 78.9619 52.6016 78.3682 52.7822 cv
79.0068 52.958 79.2686 53.3311 79.2686 53.8525 cv
79.2686 54.5771 78.7871 54.8486 77.6035 54.8486 cv
76.4033 54.8486 li
76.3525 54.8486 76.3301 54.8262 76.3301 54.7754 cv
76.3301 50.835 li
76.3301 50.7842 76.3525 50.7607 76.4033 50.7607 cv
77.5645 50.7607 li
cp
f
82.375 52.5898 mo
82.7207 52.5898 li
83.1338 52.5898 83.3887 52.4092 83.3887 52.0176 cv
83.3887 51.6504 83.1729 51.4854 82.7432 51.4854 cv
82.4199 51.4854 li
82.3916 51.4854 82.375 51.5029 82.375 51.5313 cv
82.375 52.5898 li
cp
82.375 53.2295 mo
82.375 54.7744 li
82.375 54.8262 82.3525 54.8486 82.3135 54.8486 cv
81.5537 54.8486 li
81.5029 54.8486 81.4814 54.8262 81.4814 54.7744 cv
81.4814 50.835 li
81.4814 50.7842 81.5029 50.7607 81.5537 50.7607 cv
82.8623 50.7607 li
83.8867 50.7607 84.3232 51.2148 84.3232 52.001 cv
84.3232 52.5898 84.0449 52.998 83.502 53.1504 cv
84.5322 54.7412 li
84.5723 54.8027 84.5381 54.8486 84.4873 54.8486 cv
83.5859 54.8486 li
83.5576 54.8486 83.542 54.8379 83.5361 54.8193 cv
82.6133 53.2295 li
82.375 53.2295 li
cp
f
88.4482 53.2686 mo
87.9951 51.7012 li
87.542 53.2686 li
88.4482 53.2686 li
cp
87.3389 53.9883 mo
87.1123 54.7979 li
87.0947 54.832 87.0732 54.8486 87.0381 54.8486 cv
86.3018 54.8486 li
86.2637 54.8486 86.2354 54.8145 86.252 54.7754 cv
87.4971 50.79 li
87.4971 50.7734 87.5146 50.7607 87.542 50.7607 cv
88.5439 50.7607 li
88.5615 50.7607 88.5781 50.7734 88.5898 50.8008 cv
89.8242 54.7754 li
89.8408 54.8145 89.8125 54.8486 89.7734 54.8486 cv
88.9521 54.8486 li
88.918 54.8486 88.8955 54.832 88.8779 54.7979 cv
88.6523 53.9883 li
87.3389 53.9883 li
cp
f
92.1953 54.8486 mo
92.1553 54.8486 92.1328 54.8262 92.1328 54.7744 cv
92.1328 51.5313 li
92.1328 51.5029 92.1162 51.4854 92.0879 51.4854 cv
91.1426 51.4854 li
91.0908 51.4854 91.0693 51.4639 91.0693 51.4131 cv
91.0693 50.835 li
91.0693 50.7842 91.0908 50.7617 91.1426 50.7617 cv
94.0293 50.7617 li
94.0742 50.7617 94.0977 50.7842 94.0977 50.835 cv
94.0977 51.4131 li
94.0977 51.4639 94.0742 51.4854 94.0293 51.4854 cv
93.0674 51.4854 li
93.0391 51.4854 93.0273 51.5029 93.0273 51.5313 cv
93.0273 54.7744 li
93.0273 54.8262 93.0049 54.8486 92.9541 54.8486 cv
92.1953 54.8486 li
cp
f
96.8311 50.7607 mo
96.8701 50.7607 96.8926 50.7842 96.8926 50.835 cv
96.8926 54.7754 li
96.8926 54.8262 96.8701 54.8486 96.8311 54.8486 cv
96.0713 54.8486 li
96.0205 54.8486 95.999 54.8262 95.999 54.7754 cv
95.999 50.835 li
95.999 50.7842 96.0205 50.7607 96.0713 50.7607 cv
96.8311 50.7607 li
cp
f
98.9395 54.582 mo
99.1943 53.999 li
99.2109 53.96 99.2451 53.9424 99.29 53.96 cv
99.5283 54.0674 99.7256 54.1465 100.117 54.1465 cv
100.456 54.1465 100.66 53.999 100.66 53.751 cv
100.66 53.5186 100.547 53.3994 99.998 53.1553 cv
99.29 52.8555 98.9844 52.4824 98.9844 51.877 cv
98.9844 51.2148 99.4824 50.7217 100.326 50.7217 cv
100.875 50.7217 101.113 50.7617 101.526 50.9424 cv
101.577 50.96 101.577 50.999 101.56 51.0381 cv
101.294 51.5596 li
101.277 51.5996 101.243 51.6221 101.192 51.5996 cv
100.972 51.5088 100.745 51.4639 100.479 51.4639 cv
100.117 51.4639 99.958 51.6221 99.958 51.8535 cv
99.958 52.0801 100.043 52.1875 100.649 52.4316 cv
101.356 52.7314 101.628 53.082 101.628 53.6592 cv
101.628 54.4521 101.068 54.8887 100.196 54.8887 cv
99.7256 54.8887 99.3584 54.8486 98.9727 54.6504 cv
98.9395 54.6279 98.9277 54.6045 98.9395 54.582 cv
f
104.565 54.0781 mo
104.565 54.1064 104.577 54.124 104.605 54.124 cv
106.095 54.124 li
106.14 54.124 106.162 54.1465 106.162 54.1973 cv
106.162 54.7744 li
106.162 54.8262 106.14 54.8486 106.095 54.8486 cv
103.744 54.8486 li
103.693 54.8486 103.672 54.8262 103.672 54.7744 cv
103.672 50.835 li
103.672 50.7842 103.693 50.7617 103.744 50.7617 cv
104.503 50.7617 li
104.543 50.7617 104.565 50.7842 104.565 50.835 cv
104.565 54.0781 li
cp
f
109.919 53.2686 mo
109.467 51.7012 li
109.014 53.2686 li
109.919 53.2686 li
cp
108.811 53.9883 mo
108.583 54.7979 li
108.566 54.832 108.544 54.8486 108.51 54.8486 cv
107.773 54.8486 li
107.734 54.8486 107.706 54.8145 107.724 54.7754 cv
108.969 50.79 li
108.969 50.7734 108.985 50.7607 109.014 50.7607 cv
110.016 50.7607 li
110.032 50.7607 110.05 50.7734 110.062 50.8008 cv
111.295 54.7754 li
111.313 54.8145 111.283 54.8486 111.244 54.8486 cv
110.424 54.8486 li
110.39 54.8486 110.366 54.832 110.35 54.7979 cv
110.123 53.9883 li
108.811 53.9883 li
cp
f
113.876 54.8486 mo
113.848 54.8486 113.831 54.832 113.819 54.7979 cv
112.664 50.8516 li
112.647 50.8008 112.676 50.7617 112.721 50.7617 cv
113.547 50.7617 li
113.593 50.7617 113.598 50.7783 113.615 50.8174 cv
114.414 53.9531 li
115.212 50.8174 li
115.223 50.7783 115.246 50.7617 115.285 50.7617 cv
116.022 50.7617 li
116.072 50.7617 116.095 50.79 116.084 50.8408 cv
114.923 54.7979 li
114.912 54.832 114.889 54.8486 114.855 54.8486 cv
113.876 54.8486 li
cp
f
119.644 53.2686 mo
119.19 51.7012 li
118.737 53.2686 li
119.644 53.2686 li
cp
118.534 53.9883 mo
118.307 54.7979 li
118.29 54.832 118.269 54.8486 118.233 54.8486 cv
117.497 54.8486 li
117.458 54.8486 117.43 54.8145 117.447 54.7754 cv
118.692 50.79 li
118.692 50.7734 118.709 50.7607 118.737 50.7607 cv
119.739 50.7607 li
119.756 50.7607 119.773 50.7734 119.785 50.8008 cv
121.02 54.7754 li
121.036 54.8145 121.007 54.8486 120.968 54.8486 cv
120.147 54.8486 li
120.113 54.8486 120.09 54.832 120.073 54.7979 cv
119.847 53.9883 li
118.534 53.9883 li
cp
f
12.4668 60.4326 mo
13.7349 60.4326 li
13.7749 60.4326 13.7969 60.4492 13.7969 60.4893 cv
13.7969 60.8516 li
13.7969 60.8906 13.7749 60.9082 13.7349 60.9082 cv
12.4668 60.9082 li
12.4668 62.6572 li
12.4668 62.6963 12.4497 62.7139 12.416 62.7139 cv
11.957 62.7139 li
11.918 62.7139 11.9009 62.6963 11.9009 62.6572 cv
11.9009 58.6826 li
11.9009 58.6436 11.918 58.627 11.957 58.627 cv
14.0967 58.627 li
14.1367 58.627 14.1587 58.6436 14.1587 58.6826 cv
14.1587 59.04 li
14.1587 59.0801 14.1367 59.1016 14.0967 59.1016 cv
12.5117 59.1016 li
12.4839 59.1016 12.4668 59.1191 12.4668 59.1475 cv
12.4668 60.4326 li
cp
f
17.4917 61.2705 mo
16.8745 59.1982 li
16.2578 61.2705 li
17.4917 61.2705 li
cp
16.1216 61.7451 mo
15.8555 62.6689 li
15.8447 62.6963 15.8218 62.7139 15.7935 62.7139 cv
15.3457 62.7139 li
15.3066 62.7139 15.2896 62.6855 15.3066 62.6455 cv
16.5405 58.6543 li
16.5405 58.6387 16.5518 58.627 16.5796 58.627 cv
17.2256 58.627 li
17.2427 58.627 17.2598 58.6387 17.2646 58.6602 cv
18.4878 62.6406 li
18.5049 62.6914 18.4878 62.7139 18.4429 62.7139 cv
17.9497 62.7139 li
17.9219 62.7139 17.8989 62.6963 17.8936 62.6689 cv
17.6279 61.7451 li
16.1216 61.7451 li
cp
f
21.9512 62.7529 mo
20.7964 62.7529 20.2813 61.9043 20.2813 60.6641 cv
20.2813 59.4414 20.7964 58.5859 21.9512 58.5859 cv
22.3364 58.5859 22.6191 58.6387 22.936 58.8135 cv
22.9644 58.8359 22.9644 58.8701 22.9473 58.9092 cv
22.7783 59.2217 li
22.7612 59.2607 22.7261 59.2607 22.6982 59.2432 cv
22.4551 59.125 22.3022 59.0732 21.9854 59.0732 cv
21.3511 59.0732 20.8813 59.583 20.8813 60.6641 cv
20.8813 61.7627 21.3403 62.2666 21.9854 62.2666 cv
22.2681 62.2666 22.4492 62.2275 22.7041 62.0918 cv
22.7383 62.0742 22.7612 62.0791 22.7783 62.1074 cv
22.9531 62.4307 li
22.9702 62.4648 22.9644 62.4932 22.936 62.5215 cv
22.6084 62.7021 22.3423 62.7529 21.9512 62.7529 cv
f
27.6904 61.4463 mo
27.6904 62.2383 27.4072 62.7539 26.2925 62.7539 cv
25.1763 62.7539 24.8945 62.2383 24.8945 61.4463 cv
24.8945 58.6826 li
24.8945 58.6436 24.9102 58.627 24.9502 58.627 cv
25.4092 58.627 li
25.4424 58.627 25.4604 58.6436 25.4604 58.6826 cv
25.4604 61.5713 li
25.4604 62.0918 25.7432 62.2773 26.2925 62.2773 cv
26.8354 62.2773 27.1245 62.0859 27.1245 61.5713 cv
27.1245 58.6826 li
27.1245 58.6436 27.1416 58.627 27.1802 58.627 cv
27.6333 58.627 li
27.6733 58.627 27.6904 58.6436 27.6904 58.6826 cv
27.6904 61.4463 li
cp
f
30.4692 62.1934 mo
30.4692 62.2207 30.48 62.2383 30.5093 62.2383 cv
32.0771 62.2383 li
32.1162 62.2383 32.1343 62.2607 32.1343 62.3008 cv
32.1343 62.6572 li
32.1343 62.6973 32.1162 62.7139 32.0771 62.7139 cv
29.96 62.7139 li
29.9204 62.7139 29.9033 62.6973 29.9033 62.6572 cv
29.9033 58.6826 li
29.9033 58.6436 29.9204 58.627 29.96 58.627 cv
30.418 58.627 li
30.4521 58.627 30.4692 58.6436 30.4692 58.6826 cv
30.4692 62.1934 li
cp
f
34.3735 62.7139 mo
34.3394 62.7139 34.3223 62.6973 34.3223 62.6572 cv
34.3223 59.1475 li
34.3223 59.1191 34.3057 59.1016 34.2773 59.1016 cv
33.2974 59.1016 li
33.2583 59.1016 33.2417 59.0801 33.2417 59.04 cv
33.2417 58.6826 li
33.2417 58.6436 33.2583 58.627 33.2974 58.627 cv
35.9136 58.627 li
35.9526 58.627 35.9697 58.6436 35.9697 58.6826 cv
35.9697 59.04 li
35.9697 59.0801 35.9526 59.1016 35.9136 59.1016 cv
34.9287 59.1016 li
34.8994 59.1016 34.8887 59.1191 34.8887 59.1475 cv
34.8887 62.6572 li
34.8887 62.6973 34.8716 62.7139 34.8315 62.7139 cv
34.3735 62.7139 li
cp
f
39.2861 60.9814 mo
39.2861 62.6514 li
39.2861 62.6914 39.269 62.7139 39.229 62.7139 cv
38.7759 62.7139 li
38.7373 62.7139 38.7202 62.6914 38.7202 62.6514 cv
38.7202 60.9814 li
37.5479 58.7178 li
37.519 58.666 37.542 58.626 37.5933 58.626 cv
38.1079 58.626 li
38.1372 58.626 38.1543 58.6387 38.165 58.6602 cv
39.0361 60.4551 li
39.9141 58.6602 li
39.9199 58.6387 39.937 58.626 39.9653 58.626 cv
40.4463 58.626 li
40.4922 58.626 40.5142 58.666 40.4971 58.7061 cv
39.2861 60.9814 li
cp
f
46.6523 59.0625 mo
45.9785 59.0625 45.6274 59.5889 45.6274 60.6709 cv
45.6274 61.752 45.9785 62.2773 46.6523 62.2773 cv
47.3145 62.2773 47.6714 61.752 47.6714 60.6709 cv
47.6714 59.5889 47.3145 59.0625 46.6523 59.0625 cv
46.6523 62.7539 mo
45.4121 62.7539 45.0332 61.9219 45.0332 60.6709 cv
45.0332 59.4023 45.4014 58.5869 46.6523 58.5869 cv
47.8862 58.5869 48.2651 59.4023 48.2651 60.6709 cv
48.2651 61.9219 47.8862 62.7539 46.6523 62.7539 cv
f
50.8745 60.4326 mo
52.1426 60.4326 li
52.1826 60.4326 52.2046 60.4492 52.2046 60.4893 cv
52.2046 60.8516 li
52.2046 60.8906 52.1826 60.9082 52.1426 60.9082 cv
50.8745 60.9082 li
50.8745 62.6572 li
50.8745 62.6963 50.8574 62.7139 50.8237 62.7139 cv
50.3657 62.7139 li
50.3257 62.7139 50.3086 62.6963 50.3086 62.6572 cv
50.3086 58.6826 li
50.3086 58.6436 50.3257 58.627 50.3657 58.627 cv
52.5044 58.627 li
52.5444 58.627 52.5664 58.6436 52.5664 58.6826 cv
52.5664 59.04 li
52.5664 59.0801 52.5444 59.1016 52.5044 59.1016 cv
50.9194 59.1016 li
50.8916 59.1016 50.8745 59.1191 50.8745 59.1475 cv
50.8745 60.4326 li
cp
f
58.7612 62.7139 mo
58.7334 62.7139 58.7163 62.7031 58.71 62.6797 cv
57.7642 59.584 li
57.7642 62.6572 li
57.7642 62.6973 57.748 62.7139 57.708 62.7139 cv
57.2891 62.7139 li
57.249 62.7139 57.2334 62.6973 57.2334 62.6572 cv
57.2334 58.6826 li
57.2334 58.6436 57.249 58.627 57.2891 58.627 cv
57.9014 58.627 li
57.9292 58.627 57.9512 58.6377 57.957 58.6611 cv
59.0161 62.0352 li
60.0801 58.6611 li
60.0913 58.6377 60.1143 58.627 60.1421 58.627 cv
60.7031 58.627 li
60.7373 58.627 60.7544 58.6436 60.7544 58.6826 cv
60.7544 62.6572 li
60.7544 62.6973 60.7373 62.7139 60.7031 62.7139 cv
60.2783 62.7139 li
60.2393 62.7139 60.2212 62.6973 60.2212 62.6572 cv
60.2212 59.584 li
59.2822 62.6797 li
59.2764 62.7031 59.2593 62.7139 59.231 62.7139 cv
58.7612 62.7139 li
cp
f
63.5332 60.4326 mo
64.8584 60.4326 li
64.897 60.4326 64.9204 60.4492 64.9204 60.4893 cv
64.9204 60.8516 li
64.9204 60.8906 64.897 60.9082 64.8584 60.9082 cv
63.5332 60.9082 li
63.5332 62.1924 li
63.5332 62.2217 63.5444 62.2383 63.5732 62.2383 cv
65.2202 62.2383 li
65.2603 62.2383 65.2822 62.2559 65.2822 62.2949 cv
65.2822 62.6572 li
65.2822 62.6963 65.2603 62.7139 65.2202 62.7139 cv
63.0234 62.7139 li
62.9844 62.7139 62.9673 62.6963 62.9673 62.6572 cv
62.9673 58.6826 li
62.9673 58.6436 62.9844 58.627 63.0234 58.627 cv
65.2202 58.627 li
65.2603 58.627 65.2822 58.6436 65.2822 58.6826 cv
65.2822 59.04 li
65.2822 59.0801 65.2603 59.1016 65.2202 59.1016 cv
63.5732 59.1016 li
63.5444 59.1016 63.5332 59.1191 63.5332 59.1475 cv
63.5332 60.4326 li
cp
f
68.8252 62.7529 mo
67.6704 62.7529 67.1553 61.9043 67.1553 60.6641 cv
67.1553 59.4414 67.6704 58.5859 68.8252 58.5859 cv
69.21 58.5859 69.4932 58.6387 69.8101 58.8135 cv
69.8384 58.8359 69.8384 58.8701 69.8213 58.9092 cv
69.6523 59.2217 li
69.6353 59.2607 69.6001 59.2607 69.5723 59.2432 cv
69.3291 59.125 69.1763 59.0732 68.8594 59.0732 cv
68.2251 59.0732 67.7554 59.583 67.7554 60.6641 cv
67.7554 61.7627 68.2144 62.2666 68.8594 62.2666 cv
69.1421 62.2666 69.3232 62.2275 69.5781 62.0918 cv
69.6123 62.0742 69.6353 62.0791 69.6523 62.1074 cv
69.8271 62.4307 li
69.8442 62.4648 69.8384 62.4932 69.8101 62.5215 cv
69.4824 62.7021 69.2163 62.7529 68.8252 62.7529 cv
f
72.3789 60.9082 mo
72.3506 60.9082 72.334 60.9248 72.334 60.9531 cv
72.334 62.6572 li
72.334 62.6973 72.3154 62.7139 72.2832 62.7139 cv
71.8242 62.7139 li
71.7842 62.7139 71.7676 62.6973 71.7676 62.6572 cv
71.7676 58.6836 li
71.7676 58.6436 71.7842 58.626 71.8242 58.626 cv
72.2832 58.626 li
72.3154 58.626 72.334 58.6436 72.334 58.6836 cv
72.334 60.3877 li
72.334 60.415 72.3506 60.4326 72.3789 60.4326 cv
73.9424 60.4326 li
73.9697 60.4326 73.9863 60.415 73.9863 60.3877 cv
73.9863 58.6836 li
73.9863 58.6436 74.0039 58.626 74.043 58.626 cv
74.4961 58.626 li
74.5361 58.626 74.5527 58.6436 74.5527 58.6836 cv
74.5527 62.6572 li
74.5527 62.6973 74.5361 62.7139 74.4961 62.7139 cv
74.043 62.7139 li
74.0039 62.7139 73.9863 62.6973 73.9863 62.6572 cv
73.9863 60.9531 li
73.9863 60.9248 73.9697 60.9082 73.9424 60.9082 cv
72.3789 60.9082 li
cp
f
78.6445 61.2705 mo
78.0273 59.1982 li
77.4102 61.2705 li
78.6445 61.2705 li
cp
77.2744 61.7451 mo
77.0088 62.6689 li
76.9971 62.6963 76.9746 62.7139 76.9463 62.7139 cv
76.498 62.7139 li
76.458 62.7139 76.4424 62.6855 76.458 62.6455 cv
77.6934 58.6543 li
77.6934 58.6387 77.7041 58.627 77.7324 58.627 cv
78.3789 58.627 li
78.3955 58.627 78.4121 58.6387 78.418 58.6602 cv
79.6406 62.6406 li
79.6572 62.6914 79.6406 62.7139 79.5957 62.7139 cv
79.1025 62.7139 li
79.0742 62.7139 79.0518 62.6963 79.0469 62.6689 cv
78.7803 61.7451 li
77.2744 61.7451 li
cp
f
83.7842 61.7734 mo
83.7842 58.6826 li
83.7842 58.6436 83.8008 58.627 83.835 58.627 cv
84.2813 58.627 li
84.3213 58.627 84.3389 58.6436 84.3389 58.6826 cv
84.3389 62.6572 li
84.3389 62.6973 84.3213 62.7139 84.2813 62.7139 cv
83.8008 62.7139 li
83.75 62.7139 83.7383 62.708 83.7217 62.6689 cv
82.1025 59.5654 li
82.1025 62.6572 li
82.1025 62.6973 82.0859 62.7139 82.0459 62.7139 cv
81.6045 62.7139 li
81.5645 62.7139 81.5479 62.6973 81.5479 62.6572 cv
81.5479 58.6826 li
81.5479 58.6436 81.5645 58.627 81.6045 58.627 cv
82.0801 58.627 li
82.1309 58.627 82.1416 58.6318 82.1592 58.6719 cv
83.7842 61.7734 li
cp
f
87.0664 58.627 mo
87.1006 58.627 87.1172 58.6436 87.1172 58.6836 cv
87.1172 62.6572 li
87.1172 62.6963 87.1006 62.7139 87.0664 62.7139 cv
86.6074 62.7139 li
86.5674 62.7139 86.5518 62.6963 86.5518 62.6572 cv
86.5518 58.6836 li
86.5518 58.6436 86.5674 58.627 86.6074 58.627 cv
87.0664 58.627 li
cp
f
90.8848 62.7529 mo
89.7295 62.7529 89.2139 61.9043 89.2139 60.6641 cv
89.2139 59.4414 89.7295 58.5859 90.8848 58.5859 cv
91.2695 58.5859 91.5527 58.6387 91.8691 58.8135 cv
91.8975 58.8359 91.8975 58.8701 91.8799 58.9092 cv
91.7109 59.2217 li
91.6943 59.2607 91.6592 59.2607 91.6309 59.2432 cv
91.3887 59.125 91.2354 59.0732 90.918 59.0732 cv
90.2842 59.0732 89.8145 59.583 89.8145 60.6641 cv
89.8145 61.7627 90.2734 62.2666 90.918 62.2666 cv
91.2012 62.2666 91.3818 62.2275 91.6377 62.0918 cv
91.6709 62.0742 91.6943 62.0791 91.7109 62.1074 cv
91.8867 62.4307 li
91.9033 62.4648 91.8975 62.4932 91.8691 62.5215 cv
91.541 62.7021 91.2754 62.7529 90.8848 62.7529 cv
f
95.7061 61.2705 mo
95.0898 59.1982 li
94.4727 61.2705 li
95.7061 61.2705 li
cp
94.3369 61.7451 mo
94.0703 62.6689 li
94.0596 62.6963 94.0361 62.7139 94.0088 62.7139 cv
93.5605 62.7139 li
93.5215 62.7139 93.5049 62.6855 93.5215 62.6455 cv
94.7559 58.6543 li
94.7559 58.6387 94.7666 58.627 94.7949 58.627 cv
95.4404 58.627 li
95.457 58.627 95.4746 58.6387 95.4795 58.6602 cv
96.7021 62.6406 li
96.7197 62.6914 96.7021 62.7139 96.6572 62.7139 cv
96.1641 62.7139 li
96.1367 62.7139 96.1133 62.6963 96.1084 62.6689 cv
95.8428 61.7451 li
94.3369 61.7451 li
cp
f
99.1758 62.1934 mo
99.1758 62.2207 99.1865 62.2383 99.2148 62.2383 cv
100.783 62.2383 li
100.822 62.2383 100.84 62.2607 100.84 62.3008 cv
100.84 62.6572 li
100.84 62.6973 100.822 62.7139 100.783 62.7139 cv
98.666 62.7139 li
98.626 62.7139 98.6094 62.6973 98.6094 62.6572 cv
98.6094 58.6826 li
98.6094 58.6436 98.626 58.627 98.666 58.627 cv
99.124 58.627 li
99.1582 58.627 99.1758 58.6436 99.1758 58.6826 cv
99.1758 62.1934 li
cp
f
12.4668 68.2979 mo
13.792 68.2979 li
13.8306 68.2979 13.854 68.3145 13.854 68.3545 cv
13.854 68.7168 li
13.854 68.7559 13.8306 68.7734 13.792 68.7734 cv
12.4668 68.7734 li
12.4668 70.0576 li
12.4668 70.0869 12.478 70.1035 12.5068 70.1035 cv
14.1538 70.1035 li
14.1938 70.1035 14.2158 70.1211 14.2158 70.1602 cv
14.2158 70.5225 li
14.2158 70.5615 14.1938 70.5791 14.1538 70.5791 cv
11.957 70.5791 li
11.918 70.5791 11.9009 70.5615 11.9009 70.5225 cv
11.9009 66.5479 li
11.9009 66.5088 11.918 66.4922 11.957 66.4922 cv
14.1538 66.4922 li
14.1938 66.4922 14.2158 66.5088 14.2158 66.5479 cv
14.2158 66.9053 li
14.2158 66.9443 14.1938 66.9668 14.1538 66.9668 cv
12.5068 66.9668 li
12.478 66.9668 12.4668 66.9844 12.4668 67.0127 cv
12.4668 68.2979 li
cp
f
18.4375 69.6396 mo
18.4375 66.5479 li
18.4375 66.5088 18.4546 66.4922 18.4883 66.4922 cv
18.9355 66.4922 li
18.9756 66.4922 18.9927 66.5088 18.9927 66.5479 cv
18.9927 70.5225 li
18.9927 70.5625 18.9756 70.5791 18.9355 70.5791 cv
18.4546 70.5791 li
18.4033 70.5791 18.3926 70.5732 18.3755 70.5342 cv
16.7563 67.4316 li
16.7563 70.5225 li
16.7563 70.5625 16.7393 70.5791 16.6997 70.5791 cv
16.2573 70.5791 li
16.2183 70.5791 16.2017 70.5625 16.2017 70.5225 cv
16.2017 66.5479 li
16.2017 66.5088 16.2183 66.4922 16.2573 66.4922 cv
16.7334 66.4922 li
16.7847 66.4922 16.7954 66.4971 16.8125 66.5371 cv
18.4375 69.6396 li
cp
f
23.2886 68.9434 mo
22.6084 68.9434 li
22.5698 68.9434 22.5527 68.9258 22.5527 68.8857 cv
22.5527 68.5361 li
22.5527 68.4961 22.5698 68.4785 22.6084 68.4785 cv
23.7588 68.4785 li
23.7974 68.4785 23.8145 68.4961 23.8145 68.5361 cv
23.8145 70.3018 li
23.8145 70.3408 23.8037 70.3643 23.7808 70.376 cv
23.4634 70.54 23.1357 70.6191 22.7056 70.6191 cv
21.5508 70.6191 21.0298 69.7578 21.0298 68.5303 cv
21.0298 67.3066 21.5508 66.4521 22.7056 66.4521 cv
23.0845 66.4521 23.3735 66.5039 23.6904 66.6787 cv
23.7188 66.7012 23.7188 66.7354 23.7017 66.7754 cv
23.5376 67.0869 li
23.5146 67.126 23.4868 67.1309 23.4526 67.1094 cv
23.2085 66.9902 23.0566 66.9385 22.7397 66.9385 cv
22.1055 66.9385 21.6294 67.4492 21.6294 68.5303 cv
21.6294 69.6279 22.0938 70.1484 22.7227 70.1484 cv
22.9995 70.1484 23.1357 70.0977 23.2886 70.0361 cv
23.2886 68.9434 li
cp
f
26.3726 66.4922 mo
26.4067 66.4922 26.4238 66.5088 26.4238 66.5488 cv
26.4238 70.5225 li
26.4238 70.5615 26.4067 70.5791 26.3726 70.5791 cv
25.9146 70.5791 li
25.8735 70.5791 25.8574 70.5615 25.8574 70.5225 cv
25.8574 66.5488 li
25.8574 66.5088 25.8735 66.4922 25.9146 66.4922 cv
26.3726 66.4922 li
cp
f
30.8701 69.6396 mo
30.8701 66.5479 li
30.8701 66.5088 30.8872 66.4922 30.9209 66.4922 cv
31.3682 66.4922 li
31.4082 66.4922 31.4253 66.5088 31.4253 66.5479 cv
31.4253 70.5225 li
31.4253 70.5625 31.4082 70.5791 31.3682 70.5791 cv
30.8872 70.5791 li
30.8359 70.5791 30.8252 70.5732 30.8081 70.5342 cv
29.189 67.4316 li
29.189 70.5225 li
29.189 70.5625 29.1719 70.5791 29.1323 70.5791 cv
28.6899 70.5791 li
28.6509 70.5791 28.6343 70.5625 28.6343 70.5225 cv
28.6343 66.5479 li
28.6343 66.5088 28.6509 66.4922 28.6899 66.4922 cv
29.166 66.4922 li
29.2173 66.4922 29.228 66.4971 29.2451 66.5371 cv
30.8701 69.6396 li
cp
f
34.2036 68.2979 mo
35.5288 68.2979 li
35.5674 68.2979 35.5908 68.3145 35.5908 68.3545 cv
35.5908 68.7168 li
35.5908 68.7559 35.5674 68.7734 35.5288 68.7734 cv
34.2036 68.7734 li
34.2036 70.0576 li
34.2036 70.0869 34.2148 70.1035 34.2437 70.1035 cv
35.8906 70.1035 li
35.9307 70.1035 35.9526 70.1211 35.9526 70.1602 cv
35.9526 70.5225 li
35.9526 70.5615 35.9307 70.5791 35.8906 70.5791 cv
33.6948 70.5791 li
33.6548 70.5791 33.6377 70.5615 33.6377 70.5225 cv
33.6377 66.5479 li
33.6377 66.5088 33.6548 66.4922 33.6948 66.4922 cv
35.8906 66.4922 li
35.9307 66.4922 35.9526 66.5088 35.9526 66.5479 cv
35.9526 66.9053 li
35.9526 66.9443 35.9307 66.9668 35.8906 66.9668 cv
34.2437 66.9668 li
34.2148 66.9668 34.2036 66.9844 34.2036 67.0127 cv
34.2036 68.2979 li
cp
f
38.5044 68.2979 mo
39.8296 68.2979 li
39.8682 68.2979 39.8916 68.3145 39.8916 68.3545 cv
39.8916 68.7168 li
39.8916 68.7559 39.8682 68.7734 39.8296 68.7734 cv
38.5044 68.7734 li
38.5044 70.0576 li
38.5044 70.0869 38.5156 70.1035 38.5444 70.1035 cv
40.1914 70.1035 li
40.2314 70.1035 40.2534 70.1211 40.2534 70.1602 cv
40.2534 70.5225 li
40.2534 70.5615 40.2314 70.5791 40.1914 70.5791 cv
37.9956 70.5791 li
37.9556 70.5791 37.9385 70.5615 37.9385 70.5225 cv
37.9385 66.5479 li
37.9385 66.5088 37.9556 66.4922 37.9956 66.4922 cv
40.1914 66.4922 li
40.2314 66.4922 40.2534 66.5088 40.2534 66.5479 cv
40.2534 66.9053 li
40.2534 66.9443 40.2314 66.9668 40.1914 66.9668 cv
38.5444 66.9668 li
38.5156 66.9668 38.5044 66.9844 38.5044 67.0127 cv
38.5044 68.2979 li
cp
f
42.8057 68.417 mo
43.3145 68.417 li
43.8589 68.417 44.1416 68.2129 44.1416 67.6865 cv
44.1416 67.165 43.8696 66.9678 43.3267 66.9678 cv
42.8506 66.9678 li
42.8228 66.9678 42.8057 66.9844 42.8057 67.0127 cv
42.8057 68.417 li
cp
42.8057 68.8574 mo
42.8057 70.5225 li
42.8057 70.5625 42.7886 70.5791 42.7549 70.5791 cv
42.2959 70.5791 li
42.2568 70.5791 42.2397 70.5625 42.2397 70.5225 cv
42.2397 66.5488 li
42.2397 66.5088 42.2568 66.4912 42.2959 66.4912 cv
43.3779 66.4912 li
44.2656 66.4912 44.7417 66.8652 44.7417 67.6748 cv
44.7417 68.3379 44.3965 68.6885 43.8477 68.8076 cv
44.8315 70.4883 li
44.8608 70.5391 44.8379 70.5791 44.7925 70.5791 cv
44.2607 70.5791 li
44.2329 70.5791 44.2158 70.5674 44.2095 70.5508 cv
43.2637 68.8574 li
42.8057 68.8574 li
cp
f
47.373 66.4922 mo
47.4072 66.4922 47.4238 66.5088 47.4238 66.5488 cv
47.4238 70.5225 li
47.4238 70.5615 47.4072 70.5791 47.373 70.5791 cv
46.9141 70.5791 li
46.874 70.5791 46.8579 70.5615 46.8579 70.5225 cv
46.8579 66.5488 li
46.8579 66.5088 46.874 66.4922 46.9141 66.4922 cv
47.373 66.4922 li
cp
f
51.8701 69.6396 mo
51.8701 66.5479 li
51.8701 66.5088 51.8872 66.4922 51.9209 66.4922 cv
52.3682 66.4922 li
52.4082 66.4922 52.4253 66.5088 52.4253 66.5479 cv
52.4253 70.5225 li
52.4253 70.5625 52.4082 70.5791 52.3682 70.5791 cv
51.8872 70.5791 li
51.8359 70.5791 51.8252 70.5732 51.8081 70.5342 cv
50.189 67.4316 li
50.189 70.5225 li
50.189 70.5625 50.1719 70.5791 50.1323 70.5791 cv
49.6899 70.5791 li
49.6509 70.5791 49.6343 70.5625 49.6343 70.5225 cv
49.6343 66.5479 li
49.6343 66.5088 49.6509 66.4922 49.6899 66.4922 cv
50.166 66.4922 li
50.2173 66.4922 50.228 66.4971 50.2451 66.5371 cv
51.8701 69.6396 li
cp
f
56.7271 68.9434 mo
56.0469 68.9434 li
56.0083 68.9434 55.9912 68.9258 55.9912 68.8857 cv
55.9912 68.5361 li
55.9912 68.4961 56.0083 68.4785 56.0469 68.4785 cv
57.1973 68.4785 li
57.2363 68.4785 57.2529 68.4961 57.2529 68.5361 cv
57.2529 70.3018 li
57.2529 70.3408 57.2422 70.3643 57.2192 70.376 cv
56.9023 70.54 56.5742 70.6191 56.144 70.6191 cv
54.9893 70.6191 54.4683 69.7578 54.4683 68.5303 cv
54.4683 67.3066 54.9893 66.4521 56.144 66.4521 cv
56.5229 66.4521 56.812 66.5039 57.1289 66.6787 cv
57.1572 66.7012 57.1572 66.7354 57.1401 66.7754 cv
56.9761 67.0869 li
56.9531 67.126 56.9253 67.1309 56.8911 67.1094 cv
56.647 66.9902 56.4951 66.9385 56.1782 66.9385 cv
55.5439 66.9385 55.0679 67.4492 55.0679 68.5303 cv
55.0679 69.6279 55.5322 70.1484 56.1611 70.1484 cv
56.438 70.1484 56.5742 70.0977 56.7271 70.0361 cv
56.7271 68.9434 li
cp
f
13.0371 22.9756 mo
13.8833 22.9756 14.5713 22.2896 14.5713 21.4424 cv
14.5713 20.5928 13.8833 19.9116 13.0371 19.9116 cv
12.1899 19.9116 11.5039 20.5928 11.5039 21.4424 cv
11.5039 22.2896 12.1899 22.9756 13.0371 22.9756 cv
.2 0 0 .7 cmyk
f
13.0371 31.3975 mo
13.8833 31.3975 14.5713 30.7124 14.5713 29.8667 cv
14.5713 29.0205 13.8833 28.3315 13.0371 28.3315 cv
12.1899 28.3315 11.5039 29.0205 11.5039 29.8667 cv
11.5039 30.7124 12.1899 31.3975 13.0371 31.3975 cv
f
21.4604 22.9756 mo
22.3076 22.9756 22.9922 22.2896 22.9922 21.4424 cv
22.9922 20.5928 22.3076 19.9116 21.4604 19.9116 cv
20.6123 19.9116 19.9263 20.5928 19.9263 21.4424 cv
19.9263 22.2896 20.6123 22.9756 21.4604 22.9756 cv
f
21.4604 31.3975 mo
22.3076 31.3975 22.9922 30.7124 22.9922 29.8667 cv
22.9922 29.0205 22.3076 28.3315 21.4604 28.3315 cv
20.6123 28.3315 19.9263 29.0205 19.9263 29.8667 cv
19.9263 30.7124 20.6123 31.3975 21.4604 31.3975 cv
f
29.8804 22.9756 mo
30.7305 22.9756 31.4165 22.2896 31.4165 21.4424 cv
31.4165 20.5928 30.7305 19.9116 29.8804 19.9116 cv
29.0332 19.9116 28.3506 20.5928 28.3506 21.4424 cv
28.3506 22.2896 29.0332 22.9756 29.8804 22.9756 cv
f
13.0371 14.5518 mo
13.8833 14.5518 14.5713 13.8657 14.5713 13.0186 cv
14.5713 12.1719 13.8833 11.4878 13.0371 11.4878 cv
12.1899 11.4878 11.5039 12.1719 11.5039 13.0186 cv
11.5039 13.8657 12.1899 14.5518 13.0371 14.5518 cv
f
21.4604 14.5518 mo
22.3076 14.5518 22.9922 13.8657 22.9922 13.0186 cv
22.9922 12.1719 22.3076 11.4878 21.4604 11.4878 cv
20.6123 11.4878 19.9263 12.1719 19.9263 13.0186 cv
19.9263 13.8657 20.6123 14.5518 21.4604 14.5518 cv
f
29.8804 14.5518 mo
30.7305 14.5518 31.4165 13.8657 31.4165 13.0186 cv
31.4165 12.1719 30.7305 11.4878 29.8804 11.4878 cv
29.0332 11.4878 28.3506 12.1719 28.3506 13.0186 cv
28.3506 13.8657 29.0332 14.5518 29.8804 14.5518 cv
f
29.8804 31.3975 mo
30.7305 31.3975 31.4165 30.7124 31.4165 29.8667 cv
31.4165 29.0205 30.7305 28.3315 29.8804 28.3315 cv
29.0332 28.3315 28.3506 29.0205 28.3506 29.8667 cv
28.3506 30.7124 29.0332 31.3975 29.8804 31.3975 cv
f
38.3062 22.9756 mo
39.1523 22.9756 39.8394 22.2896 39.8394 21.4424 cv
39.8394 20.5928 39.1523 19.9116 38.3062 19.9116 cv
37.458 19.9116 36.7744 20.5928 36.7744 21.4424 cv
36.7744 22.2896 37.458 22.9756 38.3062 22.9756 cv
f
38.3062 31.3975 mo
39.1523 31.3975 39.8394 30.7124 39.8394 29.8667 cv
39.8394 29.0205 39.1523 28.3315 38.3062 28.3315 cv
37.458 28.3315 36.7744 29.0205 36.7744 29.8667 cv
36.7744 30.7124 37.458 31.3975 38.3062 31.3975 cv
f
38.3062 14.5518 mo
39.1523 14.5518 39.8394 13.8657 39.8394 13.0166 cv
39.8394 12.1748 39.1523 11.4858 38.3062 11.4858 cv
37.458 11.4858 36.7744 12.1748 36.7744 13.0166 cv
36.7744 13.8657 37.458 14.5518 38.3062 14.5518 cv
f
47.2075 30.96 mo
47.8877 31.312 48.5215 31.4019 49.4624 31.4019 cv
51.0825 31.4019 52.0005 30.4961 52.0005 29.1812 cv
52.0005 27.9692 51.4346 27.3911 49.8936 26.6309 cv
48.6465 26.019 48.4775 25.7129 48.4775 25.1362 cv
48.4775 24.5459 48.8735 24.0361 49.7783 24.0361 cv
50.4253 24.0361 50.8677 24.1382 51.3994 24.353 cv
51.4795 24.3882 51.5244 24.3643 51.5586 24.2852 cv
51.8765 23.5942 li
51.9097 23.5259 51.8877 23.481 51.8193 23.4458 cv
51.1396 23.1509 50.5615 23.062 49.6445 23.062 cv
48.0913 23.062 47.2524 24.0361 47.2524 25.1812 cv
47.2524 26.2339 47.7505 26.9028 49.2354 27.6279 cv
50.5054 28.2632 50.7764 28.603 50.7764 29.272 cv
50.7764 29.9849 50.2554 30.417 49.3833 30.417 cv
48.5444 30.417 48.1133 30.2241 47.6377 30.02 cv
47.5693 29.9849 47.5137 30.0088 47.4785 30.0762 cv
47.1504 30.8359 li
47.1274 30.8809 47.1504 30.9272 47.2075 30.96 cv
56.5225 31.9009 mo
56.5225 32.4561 56.2393 32.7852 55.6616 32.7852 cv
55.2656 32.7852 li
55.1855 32.7852 55.1406 32.8188 55.1406 32.8882 cv
55.1406 33.5439 li
55.1406 33.624 55.1855 33.6572 55.2656 33.6572 cv
55.9336 33.6572 li
57.0107 33.6572 57.6104 33.0581 57.6104 31.981 cv
57.6104 26.2241 li
57.6104 26.144 57.5767 26.1099 57.4976 26.1099 cv
55.6274 26.1099 li
55.5483 26.1099 55.5146 26.144 55.5146 26.2241 cv
55.5146 26.8799 li
55.5146 26.9482 55.5483 26.9819 55.6274 26.9819 cv
56.5225 26.9819 li
56.5225 31.9009 li
cp
56.9414 23.6499 mo
56.4995 23.6499 56.2627 23.9111 56.2627 24.3311 cv
56.2627 24.7842 56.4883 25.0112 56.9414 25.0112 cv
57.3843 25.0112 57.6104 24.7842 57.6104 24.3311 cv
57.6104 23.9111 57.3843 23.6499 56.9414 23.6499 cv
63.1636 24.1831 mo
63.1636 24.126 63.1987 24.0928 63.2554 24.0928 cv
66.4287 24.0928 li
66.5073 24.0928 66.5527 24.0469 66.5527 23.9678 cv
66.5527 23.2539 li
66.5527 23.1748 66.5073 23.1411 66.4287 23.1411 cv
62.1445 23.1411 li
62.0645 23.1411 62.0303 23.1748 62.0303 23.2539 cv
62.0303 31.21 li
62.0303 31.2891 62.0645 31.3232 62.1445 31.3232 cv
63.0615 31.3232 li
63.1304 31.3232 63.1636 31.2891 63.1636 31.21 cv
63.1636 27.708 li
65.7026 27.708 li
65.7827 27.708 65.8276 27.6738 65.8276 27.5952 cv
65.8276 26.8691 li
65.8276 26.79 65.7827 26.7559 65.7026 26.7559 cv
63.1636 26.7559 li
63.1636 24.1831 li
cp
0 0 0 1 cmyk
f
47.2183 19.3936 mo
47.9893 19.7896 48.7251 19.8696 49.6665 19.8696 cv
51.4111 19.8696 52.5332 18.9976 52.5332 17.4097 cv
52.5332 16.2534 51.9893 15.5518 50.5723 14.9507 cv
49.3604 14.4624 49.1904 14.2476 49.1904 13.7935 cv
49.1904 13.3306 49.5083 13.0137 50.2334 13.0137 cv
50.7651 13.0137 51.2183 13.1025 51.6602 13.2847 cv
51.7632 13.3306 51.8301 13.2847 51.8643 13.2056 cv
52.3984 12.1636 li
52.4312 12.0835 52.4312 12.0044 52.3291 11.9707 cv
51.5015 11.6074 51.0264 11.5283 49.9272 11.5283 cv
48.2393 11.5283 47.2402 12.5146 47.2402 13.8394 cv
47.2402 15.0527 47.8535 15.8003 49.2705 16.4014 cv
50.3682 16.8887 50.5952 17.1255 50.5952 17.5903 cv
50.5952 18.0894 50.1875 18.3843 49.5083 18.3843 cv
48.7251 18.3843 48.3281 18.2256 47.8535 18.0107 cv
47.7622 17.9766 47.6943 18.0107 47.6602 18.0894 cv
47.1514 19.2563 li
47.1274 19.3027 47.1514 19.3477 47.2183 19.3936 cv
59.7642 19.7896 mo
59.8662 19.7896 59.9111 19.7446 59.9111 19.6426 cv
59.9111 13.1484 li
59.9111 13.0923 59.9341 13.0586 59.9902 13.0586 cv
61.9175 13.0586 li
62.0083 13.0586 62.0532 13.0137 62.0532 12.9106 cv
62.0532 11.7554 li
62.0532 11.6523 62.0083 11.6074 61.9175 11.6074 cv
56.1372 11.6074 li
56.0352 11.6074 55.9893 11.6523 55.9893 11.7554 cv
55.9893 12.9106 li
55.9893 13.0137 56.0352 13.0586 56.1372 13.0586 cv
58.0303 13.0586 li
58.0874 13.0586 58.1201 13.0923 58.1201 13.1484 cv
58.1201 19.6426 li
58.1201 19.7446 58.1655 19.7896 58.2451 19.7896 cv
59.7642 19.7896 li
cp
72.0957 11.7554 mo
72.0957 11.6523 72.0488 11.6074 71.9707 11.6074 cv
70.4404 11.6074 li
70.3491 11.6074 70.3042 11.6523 70.3042 11.7554 cv
70.3042 17.2173 li
70.3042 18.0215 69.8623 18.4185 68.9663 18.4185 cv
68.0825 18.4185 67.6401 18.0215 67.6401 17.2173 cv
67.6401 11.7554 li
67.6401 11.6523 67.5952 11.6074 67.5161 11.6074 cv
65.9971 11.6074 li
65.8965 11.6074 65.8501 11.6523 65.8501 11.7554 cv
65.8501 17.2627 li
65.8501 18.8604 66.7451 19.8696 68.9663 19.8696 cv
71.1992 19.8696 72.0957 18.8604 72.0957 17.2627 cv
72.0957 11.7554 li
cp
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Juraj Blako) ()%%Title: (STU-SjF-anfv.eps)%%CreationDate: 9.10.2012 17:14%%Canvassize: 16383%AI9_DataStream%Gb!R&pO;BgZN,;YJ9QMhKFYEk;\BAT(]ktE5^FRfLCa_&"+,O`r,J>,W`X/k`ftoGGAbuM!OedABf&Oq,e(B>>>5?tl*)l=:YJBk%Irm7,9L^%?G@bkH/.@]0E&8Vs4-N@*MC*"uOdl#F5JhNq'PDi&YpdmE1NAP#(B8KScGHC3+$89RbBSda9a#nlrcFK%RL3!_--^N=%X3kHs^&$t"@bM]2'C^.OK4*Id\jHM6J\Ua@b@uI3)@0%;<#Am>JE-l-89E5IQEXVGWWL\S<lM,;R^tt]qI'RcJI3cphUXXCJQ[@C%CVWM7s1C"o_JlkaMV[B-2LY0g[1R'CT<:.[W(@Pc8ANY5;d9$b:V'1";(=kekldJt`oo*F-X$DS<!!U6jUO_SF?%B1)/"b^-H!)6%*HT6[;NW@pL#[8Q_P5C\phM/QST\=^qkNCr[eR]rCQA7Yg3I\k)Z:0h+!$8:'`Q$"\#Y?.hG$L59W7l#$5^CE%>7=,aiNT>8TuR?%)$!JsEJAX<*"#?S,.#Au&hE?C&e(EpleOdWW$#ctKkYmWO(oYD'?P2-[PgmSVQl6TEJeq:W.^@0,"-qfBdP.dVTC2T!5Us/":O-+%G8"p\6Q?P*dr[!(dID0,RZ'<q0a9=9.aHD.;9Im3T^YO)E@12\C03HpqO\u3E=2b$Q:kX9[0SI(nOe?7g2YZ[#hiX9Q`&XOTHqb^%i2e^@.TZUT2<DEmDVE4\/F0ACs)AhR/0Xmgi%H"&T.C@7;^qKE/<[Ki./])p@;7V+;km3[b4Dho0#b+M(X'ZCQA)kO(?T(/SgQ3j%.@;KJJpC8P&!fte@'3H9k(:A+-d5RA_Hb&(/6OO@P[Y6eiH^g5o.18Bo/o_0H!CR*(tTSU#@k]OYTuf$!rW0b@4p1Zp^)#X2Na<b%1tX#I$1kqJ_,&^$64$m4[L%E"-eKX<#pE_<@E>ZAn.W5LI`&Y!9b8\L-H6R;_03XjR"sk`446?tk*X/UMO7$*':6Wha0is1a*#;P%@Eh@cOW=-,k(;uQT+DY'6/64FL3j>X_d'EoUk^[)E*:gWp^*R#lYumA:L%u9#(FEoY^Q!SpEJ`49NR/p@O+&9CJOY[oGOeRVE2qT%ksjlg>E3J0CQ@_7nRBS8^Mj\R#P5a^&^H'3K;ERgE@PcHr.MU7J&CtgRc(L@'BXkJF1;Nh'A:3d_\b(O'-8L56F[KU*-2JL"X4bY%:GL[Fm4d'F?;*:[F4);/D7K!f(Vu-*j75/Ms5BDVai)tnq]+&h6f??6k$LR2E>aP$8?3q;KMDmCA*t[kYOEVbXmcmaFJY<1Q'HfK%2'S9<V%ma,\run&]GN7R8^eCMKATc]daB5Ti"Y8ls$;hQs-.I"kA\K%pl4j(rt5Y9XF0'CA.h*SP6?)-qTJ&AMXlc,$3g@/I,dGH%S)`uWjW"5b9))Qb`da6NL\3[o48=[0'gIm0r!hB#`/:fZcgd*gVOo^?89"AMcV\\Rc_hBqpr1+AaX?2Za^bhY:;G`n%cp31n-Qi1%jj7A/PY]0Ep_V8q5gRCe-G^r]/GL_:"i"P$#C&SGi"O<L:[oE<+6`<,%$X;WJ*7D/5gS@-@7JQkKpV9S3$n[\SPMhb90nrD75:$1%@Zl"C``@sQYcTU58*rQ!8#c;0/?.-$XoZBadj)$om;T*SR7)95V"Nq79;&B(Ab2!u\<X"'*1&M+>JP+;PD"+`h<T>0?._8S++g>d%[$"L*G7mf+7D4DSXFZ.U5s!t2J2N8daRKst$$m#f(d.>AIY]4FWFS\s8ch>@hQntk,[SC\Q_7fFnPV#LSmb/C;K2ofS>="##,2Lk%/o_?[/kEZ(kkbuFQ&N[""9D@7qu_>d-=Dn6\X`:h*chX>#JQChg5(q<Y/a@IBa>1>(gFik_JLGV!EL`f*6a+@%s,`.WQ/*I1G<f,%Q_4p#:fdN9pF:_^G`@teAI7Eo:\+\nme9fif*:sVUj7PZn-Qj"$/ONd6oR\X<Afuuj-n#&'lQb9B$jOKVM+gQb;X7D,\;"ueMN*2%\.%=?.(p7s8b,IL'@iEoOppl]C6V\j@b`Ldoj:&^:.a>_W=BP(5VFAh4<A4G4Ks!j+4bRJ.4TDOgm@LJpH@YTX;)%S@'(m$8dRZ&%3QWrP%SIB"DZpMd&'Tl&n;m\s\"Z#>2OK(gEsti(<8gO+6<F^q%9&2W$I[!(TfL+YF9sB`\-bPIS;3pE[583c*<*h$Ui4%mP44;Z%6*cM[E6k3r_OBMR_DDE,r6?NMKqU$N%GN7tNb+11^n8-nU`R%CC8o$K"aH+N0#-QT"^o$.RRS_m/P%rsI>A!W>^<5bTctRHC?$a@%+&XV\fME;O8^3?OPB&/LL$31m`sf<Z(`Vga=@\',0a/<[`&pE^(=s>Q>gGhaQ/om=WTAJs;s?$"P=UA$CK41W)2_$I!Ol97L*q8O%e4OG\XWc,QCG'<b[?SiIY36%sc6[CjooEmm&oF;W,\8sHV!sH3H15Pi-Sc%r-'KU#)KW,,I@(7IC#o;e1eFI]E'Ihr;QPEn?dMh`%?;mYc5h&=/YI4bIUa"(1qND[,X[;f@kYLCo.I`T\^ih6q@3cd&I`YVenK/#o,l[sD<fp3M2H1AioF[3kJci]G@[]s\PuO$5>!h9^%o-^f)J@\Sd&`Q::NatLJ:SM$EqVh.a*0O')Le!-/7J:M,.Xt.[P<9[0&5!PW8N`5jS-kl[c"-.C/Lg3l5"Y$6l@J&dr5X*B;(3<6%TjfTA^58F.&usSH<9Iq$f#O^WMHD$,Iq"E.;U+<D%&TikNW0YE!2%oPEA9"mTJVujOA5;8QfO(Vb:Ck*jBIhBj="]6UC"?!7"!9i%YCa-A[#+:tqY3NoR7&p(E$V-:!afl`#r`Ntj^lV.,X^.*84sUuC2.2`=MD$fTMS_3WSgYG5-_5Q^SZTTpkdoRr!B2jl"_JUYhb9)%T-uQs9.GLlV^[iC`D-t9+W(pn'D^\tZ'>ZG&`'2.7H,dg<YHd58rBDXX%.IE;k3KG@\jh(+S:mf-S]F10OD^6U7.lK/[aKG`isqH%/<$(N>1ot=FZ&-P8L%P2QACa7>0#`H<9q@mp+n%VXsDd0(D>IsqF7a)qJVSG>b'?u/5ci,MFf:90rGWn6p(Y+YE?jkOppjfCrLV6%qGjdrUn9>Bigs%!KH_oNV)?WY)j4EVNVa#T.)qsf!;h<Son`@@^a?^Q23VLCAXsM[>#+UB<$%%k+);+lm"RM>QGR\,/klRi]`A'^%c@4]Gc[r5D1r\-Y2T0>#Dj8Z_QE*#P,XKbIlP[c,R_jaca#-I\G++U081KP(ebjIa3HKH:K3:uh[RI]l1itX%ha2hWF*aZ!b-0B2%ZkUC5dG/@@LnAcX_2/gk@J!+)2j`Z[c^FR''ZY,be%^RXCp!gi^ZeJucA/P^h[I(Vkt\jb'>9_Uf11=APV/Vk!aBq_"))oSjXa)Y%l!P[P`/e)Hpt]P,XZg!(&tK2G[J4dNB=!F'<gt@%QX6Gr0`QV-N[?50D+l[8ehK`6oU,4/o"PYBaDHq<,lT_i06S_,d892T^IEVr%":"*G-ChLRA,Z5fbpK4)O2=\m2pJM8*;([Gld'#hr)c7;eG("X#CmDKdSXa@qjG>b$-q+'G:k#*b:apuCrl\;*M=8"W\5'leqkiG%!Z0+JIjW%L&ZJK;Io"IE1[X\G!2\1N9pT]]BB6Z$,<1=988IiR#>L>d:sOfJP1H\Si7G)`XBjEtAG)I555kQn<Uf#f]_^A#F'^k6%hC.Oe]R@G8^_Q:XJKoc3d@%li!GK;.WZYu;;SA',Cj%0-i-SF[B$Xno^B%ALiE4k-d-NiQ2bW'uN#eqc'-M5"+BOBWh1jX+J6G\,%[J$=']6#Pti?ZX"&Bt/!]`s"/026siFX?o;YYFORa><%*pb_8'b&tZfq"aH[IQ\VUL5BP<msfd5;iht#RRnLl<_EH1NZcQ7(WGhB%2]rS1?^7\l24=qA@>aY1cH%<)N1:5>Q@GR3_Gp!gFOBob.k]+t/@>J"i,NG9rmdR@87)(?@?PO9j:GsfC9l2Kr?%l]F>akM&8!]`%O+i-*b)i.0J%&^s&_]`EgLqO6%cG?5UIK';T/u^t\pmLJd$Bp#ec&FT2\GC1rl/:C^Ei%-^MJfhbk`u61i-KJ[91_'r`r7lcgbFi%d=j1_[!=pTm'>Y9/f105s$]r`s+?Og56(U8[`8?Q(b@#/rr7+H/8`s]7W*qJ`4W'V_J&^U8%@WMs/lit2kt;)fAE@>o#je7Ul>=k%X/Jb;q.$<OJ,\c'nK1u8jPOhZ&=UIPB$lRoC^GK>](!8KgX#8oC;%i@J\=R2Xu0F?I0#%Mr9FP/R&,;E$9uD53ro9+^@b%a=c_To%1uVht]2Y1q@6,1$_N_(]3.K&R-5/.kEA*+U+AO%Z.e%I)$q@9>V\7ed-bf#GUHUq3JE/@tg*t@#TS3WK'I=oYcDE!@KV_TbQa(NI%14uQf^J$Z"ij(N/M?@K5#+mkhB2<D^S;Aslo;mmL,Qh5-#UcV\Bsr(F"bY[bC?Z_tR=8B8LS@%[b67/;:ntW:5YVD=R$Cc)/o*KR%pI\P83H)NfV'(ft#>M.raG<JW.8>Z=C,lNA[4]@qWkK1Ze&As-R&g5l<-pH@/k5kNQZcSp=[eI4e<@Ltf$Fo3JbYSiC^^8G3_P+Q%ZJ-<m7a""OTd>fd]N">pLTBi>E&M?MdYW:p+(Ya%kM:]\-[rXbZ*$i[q/!%ReX_X7Wbt,Q)9bTZM+5o4cqI<&YPb4Q^KSqD*Y[,7%-KUbAk<K@iUS$)4X7RTQ8jY*m@)Q2S'Y8S:g:r:u'At/mc'4D%j3?UZMYrR1d\9T!:lT(XPReOnZ7)/,C64Aa@ZY?I7[$][[\R\r%h<A;&78%O(]!EjKV_%dfdd=BU"E=o!<#=*hqNK;H&-<>#rr[L[#Um,`QUQ$'+Pr=0<,aGjA(f&9=GjF>0rQq*i]VF%&TqjP0;6,`%N8<ep]$nBp=oku&BAu/nXE1-mE]mWAP%cd<9P4\aS>.NJlYM,Q2Cqh19%Pgn^igLi<D?V\[g5Q/PXp,$-E0IEiQPl<3uC9:K8Z^2%L$9:J64n]P"ET(R*YYQH-Bq!9iS8S.")oh",!a:9O'jaMBP4<tZ:b:ifn'KFGoIBg[+'JtDDodPd;COEEV@YAh7uL5:Et`m(n&^h%0V3X>l4n`=!FA]eFBM3W.-^?&`]_E\A!TbNkjri3-Qq!Ug&'gj7%g?oFUpcF??&jk,8>Q3:!>Dm.q1mfPR1JaWNt)tqk!JfF^#)1%&]6i+ZrP)`6$O^d_j6RSo),?46,pGNrU*&rYVtY@bG+,IdsTUDA'QM_:Ofs[+t:U>"I>O%4bd3%r#(8+E5c]^*oK;_4?2@`I:/8_%X8Ft`L'JAdQPejfXEp[B;'Sbmn3m%EQrlo,,2=,'dBok?,!6Tp?,]^2AEqL<9=29?O_7!J_pB]02XYgODt2?u#bn!U1;dADW_J2$%?BqL2rF[2&fJk)oJ3;1BRo^S?R*GN7%2fos9h-'*X)5iu]&M9B/.P'5Nn(LT9-Kt`h<C.`Mi&6QbI'nLpO?/"_crX^n\`/a2p/UT%-K0@F?FCbIRUK]_&<g]S.e`/6Xr.3u(MB?b,%?Kc9&O4c,C03bhS!;#HT%8ta:`2<l5KT>E^C0BEb>O&(/\Kp.DO;4G08#6OFi[q%m7PV.[XmK,P=s7o1YXj?-VOMOn[Z#nF%N`?4HZkn.4VbW8Jt1,S/9KjD7$"Ccd.<Lgm%2!QYh_Zcn5f]`Fq6uXq*qn),]#ZUj418%La]$UKe;n=(VS5eVe_uQ?ridfeG3*VL)fDci3"Wi=O<eB0W49BpY[bQ;Yq,>k&D_75Hh\m![-MN:o7SUnUIo59RSNM4A`pNnL$RB%-f+T1^I-.Vi@?%_.nnp=Q9>PkL)Po1d[t^*J50=/Q8/\u).Uu,Ad(L1]lL5^BO(3j&<YB4e%uTgCnb[Ndj?FF%aB?+EFD.<`M3J)%Us]f41<W;,7UAsPnnuUP<YVWLG''[B[am>lbI+d@=&j#T\^e)GFN-.S>V-(reh=g/$TZ4ui`uDO9s)>Sq.DogLFfO[!r-*=;X7F6%'1Y*U7+A7_1dEn?3OGQoTHAo2QSRf6k-%?;%Llu.\4%<m2`*ePH]lD)MhO0'jIY;/TDm0/Z%X)q1<u1mJpM;Dbo4H%P!$kSKEGb[%R0>^i[P>04D$B'HC!H].T\4^LB*5NI/CdnLft^1ZR>"1?7)nEc<q5`9)<V.$iF$-]U2g#B3.K"ocFT(QC@nkF.ceP=cW>EPF]E]g%d-E-@]&CU7HWMZ$a6DAb3I;LQ8Cq33=#k9N:ZR";ogSkc[JUABg#GM@Pdst^\f]hG;S_0sEL/=&4;LSZWLV0*cP's;FZrT4]mU0U%%@$9&.l^0V=Sb9_ibGmP;t90"j'nY6_/lSC#OVu)k>4t_DoHe&P6ZlTn3-<sPe,[qNsg_+_mRY=#>^ur$''5UDnihh9PCO147Vgq%pHti<qIUs5UjS$0K'+<)Z.Ld"/Nuq?m^2o-(I+r@%FSIPn+^-pW!3)hVm55Fh]<Da8T+*dr[`FKMdM<R)?EcflI5F`h"cZe+dZMg%IiN?"bkL)n%/`0bjXpe)Y!OQ4I?JN&Ni0BQO57W%p$E4\9E"XF\+g^(S:N.+g\KUGlm@-0SCQi]0_7n:Q]8V`hXp*&%_aTrOfPrr%JZ>"l6\cU+h6OO+1_o7%`6l[sHLtMa'IN5U:[$EDq@2LL^KXs:r]1Je;CNNmb*P2jIRVqrqmTgZg@tLJ1:?EK2u#rbTCH3rR(][E%Io2gYp(mWG3S\&SEZYG/n9oB.mm7)"I&pFcoD+lJ8R^s90i[eHFim]?XqO\PY+$)cb#_iDHg]4N^"j/"Kj!\(E.1$M;p7\`ULb14%_p&LGMcb?]]e,n;@$gKS:#P$Fqhs,Xb9jj3ZhEr<hl\S5#R^jf41^BE?\'bX0)[h\-rb1@nG">AIM?&t2Z_KUbG?/sAa+Ku*`AWp%`sfr%k+XR,bPB1=c]s)2Io*,M0gl]I%X3*]%XnO5^(r6SdteUn)nf#"?%,F5<r1lMoOg#<@T*]S"Fp;[2h1B,KJ,Ch,'Pd&WrD<=%+m%13qeVN%OL*4T6]OJ$rgZ%)V2p<((c'pS4?r,MdY"1^LC,,8r5WQG'FOP3OfR6g4<cX,FL(T:;p.,bCk4f(]nW?f4_2EBKCA,M%`8]H<EV9l%fa_k!PRq:ZYXIL=9rN'(2iC_tCDK",WhnSsc5^DU?6F0Vnufd78GZmRD,odGhYE0Mcmd-I6bWrP0/q;F8%sE%n2T4B%YJ='k1<O4W;H<AMW4[/Y!p]m#n*<u6D_l#?mE'SIpWq=!!L=_j#f&gJ*qnQe2F34eBGaIhEacgs*m4:RPt%lfQhARDU!c-MXEU&Y%i6#Q=!:"]J%Tt)MQ]&8./g&H+lT+k#=)\J6+dED)`NB66qi;n!ooVe9>lmNo3*M8CmPFKUX!>HKO?WUl9G4hK`;Rs(<?P4gY2Xn]%BSWdAd@qc>?2'\PS\\+9ohjfpUY&EMKD>(<=?u!$0R)Egm.."6c/X)"._X!CR$WE2CPG&bduQbI=/f)Ir-O=:459hPG<b!I-=*^+%:L?5,TJA;ETF0k2,q&S;e#i+._%TJsIegnWg/DdeZ4J:hPA;O@)o_YlRoYIMd`MJemPF<W=(n<e1=*FYX@=p7J;OPOB6BP3RaG?)%]Z\7?`;0Vo5[,;H[066W(0Rg*HY`_>YK!ee!U2D%ICS;.rKkiXibe/mZ8A/'$+`s2VXq8ek`PV:=<EX]cPT`n3q^X9'l^\3&[CCh%gqF4q^_Gl#i.He,7;*POn/W$h'hdVY5#m'mjc:Sr5AoEbLU'2BU'B0mO2W)dQQmW1=ZMD!+EJ#7o;#LY6BdjjW>YI`UV`bJNXuo`%Y8\A&X^'Vn>bXb]T\A>8?H?\d]o#P61kZ%!0$?8]E\hqL!Z`R@WYTlXWiJJ>"tGP8i;-tC@k!KB<J.S4k.C]p</27/;D\An:!2BX%:^S+_PCc'U)bU!l[b1#-S>HJbS[RPng.5$o(2\Kp&g<RX`%%W^QquZl\S9&_6s)@OUf+1n[XVl68m`,JVpe,6<1M`KV`0?O*W$;,%ng`7!=hee6`23>hhcdRO<*hCZ!(C>TAY4HE5LA_q+p@tNd&G<#iT?Cdi@Ze:?bHeNh51>3HTLm9^Z*G67b+JC>JJ<I2MV0VH-(KL%Xo$4^$95N5,ee5i<7T&c%WLB[7tAL8+NX,$Y%\)_S@eN?$f#,fJ)e*71S^1gh?>@!^8<6Jo?[_,$ZJE+MYEDAT/\]KjEgp&S,7K1%+)FFSClet&F`O07j90t3U,(eUqiWr)hqdE.YK99%I*B>K+'i*k'4e^R'7TXh"9JRJN.GH3RI!Fti1T%sI:-ujaQ!79H0f$.dXVb;%0D+#hQ/^ijm,9(Jq2)Wb_mMuA>-Vo.Pjt<WT?Hrd>j&K]kd&05"g3KH#(0'h7)YZB;P2;^Gg3^UmphI;3@V2G]:7k,/68Q1\9!]W%#$UUW6Rko9T,q.r"*jLi5!AUIp\3rq5/#*1J8QSK^W;FFi?n<Y0AO(pQ@Wk_('%f>-Of3<=56*cp2H[l>PQirDCG3B_'A94fel9I%I]]re%MnhmI%D#4g>(iF9\1*%2@=G0DktB>XU&1?5l_<CZ7.Ism!KD&BlHH&FniiNRZfNQ^ZeTMd`j@YoMrKFKY0@MAmT(;6COfY%8qU[S*GWc;\&*N_q3s(/!ooUR"c6783#$0VEbDeX,N.hc/7^2#_a/2ch^T/N_3cPo1:]JJMY)Ae,k@,gXr%1!h5?kn8a/mda`Pm6%9PI!lHqkBjmUGF]LC47HN4M"G-qpN47Cl_pn<.IfT%jg"^+h9?$F*T^U4[XtR3gb-`@prH4eFd9L#dnF[K0MhqiOFVr;p!$*1[+F%LBD2&oN/mD1XIf[\.=-.pN%*!0R6D"+a>%M(Va9^ks4t,oi2)U>Utc:![iP8o/!92KD36MagdQ<=g'NLi4?HO9S<HV`aU1EM^LZX%(2c+sj=@7YkY-AEFS<7[IcoI0h'^R9km;@&.j;&FqEIen-,r,4HU+.#dbXJu<jH0G2_F3WM4b&b1gW!U/OgH_W7Y64Y%2IkV*I2f%Ze<iH1O!1fIp8u'Hf5<,2C0e5i`huNqO-73j)b/&fIh'?cePTqm^7YrFLV@,(<2ha7LGpMf1Q\eL;!GFkfMs_V#ed"ZDko"cqY+#%6J:X]$f;FZn)r-Nhdb>u[+Q[Q>0PT&Vn\$46M'*fLl4BejToE\6KCda7hZC@$/^H_%;\K"*nYne%fn!+A95=)h??j?16RB?aMd%.%LFN-XZ>nF])H1qS!+:d%WZJ+oGbca,Ki@MXh.c!E&WWnu^f^2C"f*mgRJ7NBP0>["`&4E/kj<b:h.c<f_!Wuc;CPs]jotq_kQb1i%c-D1gj$G;@*b$)DANt,9hR.(NLQO%t/.TGi&9-^C8'0?8r41=8:daaB4A&rkcUOa;qc)a\+iEo7CnI<+ps/Eo/`1:)Qb5DNkio*"%@A2nYHOP3]Fd-Ka`t\TZ'F/.ARt,5jMTlo`m`gT^e1,t.k<99IZnU)T:")\c2=Gm,0#961*Y=6g8s9RtTL'.85-GciQI?']p?+/)%K',d=!EM>cKJZ5rm,IUqKD4/>JNa/C/.1*/$G"$T^0`]WZg#e`X_*t)\A"(]AhD3%jlSYb)NaoFo;2:el<g($\_<m\Q"mnFq:q]J%s$f!pXgHABq*aPYQj<XATY&**[5Y,.Ea"3h26cs#;^o:Qro7u^jt5AR]SkWNn[`s@lRPRZK$S+n*qXpFaTP8;?=8/QD4k<r5gZ+f%+FcIieag&ML0s?"^f3(_M&p"]*HlEOo)Ye*L5egsQ7@(cZA:Upo7AMKn+$]$Y1kG@P%i/18sO[)kMH7mk"a9&PVf;_k,u45j6I]2%+\Pqad)PM^ZFTRbR%#TjjX+XbqFjHQmua(I("/YaV<VL1"iHr9Nssfc>`lu'U^edWB2q]!Sb_3-pX[J9FXJCt\Tp>m$'Tb;2uhsL%$!dOgnn;/#3D+b$]V8YBN]!Hq/kB(cU?>fAZFFU*J]-G##!IcB!M#j3L<>5393:jZe[RsoWK$QGD=M@;5LsuNRd;D#ZUhj\RoMep%Ca%tWT0BoQ\f[8/KqH.0D6>+P(Y=^5?J=0_@?G9>ohdZIa*poZUI\A4=+TR.^>3tiW!+q?r[hHCDMH5<^uH5lHMi@MYq82E8Sq6e%)8%N_cJIt98?G`d^Xjhb<\5D#q%=K>'\GZV_&NPHqfYgDpt8G3!$mGUk+0A9mf$b-<3^eIem@KWgFr0(Rr?U\PFkuUX3<aZPZdT7%ONBFDDl"#7QpI@Z<XJ<l>F2jNJ!h8E#ajoND=O'!4N""e_HH8ZH\Dg7RQI\e_j\f*2%.NRj":J\&*)X[rcP[FM"/I^k8Yn#aD'e%%9@(,k_9J.DHG)F;FcUbBS+HLhE,K.@HoO,-XquGEYj#KS1nQ>:,>Rane8;fZ4YKU.66S6.$riLD*PnmrDBFG3]F2$u]3$LXAZJ$F%X.flUii=<KJ<h33rPo^2CX$,c/@j[2#"bkV\MWdCZ5;k;)05J*?FnHQr>/jnDjuI5"1)7mrV'fg".F)lLA+_%lD_oV^XVgh)#/&-%(6Cc\aUO<g@Ys_>>Qk'"B\cV^'P?-5RsR0iS[^c.:HXE`I#`#&oO*Z\GRLl3n61/<?M9N![k:S?AZ8c#H\oD*\kKLfPS^'dXjoHR%T1TA=a.SXRL3t_"q8dWnFrX6>.s2$5YYmQT8DObSZ&ca4Ufb5oR:_'-GW1-L3V8$&_6uHGcU@BlqhoI^4?J#mQCU&o!$DuqSn5;@%HTJ`Z\1=!!R)aq-db,cMN]6l>R#E]7!$Y:/Bp;,*#0.`a\-V%_ne++2f,gM^f%uF`Y6-oL`d"FA^0%)Q5/-$tPS$\_Sta%BCuBX5%c$cIh'<^L?\Pr/3nXRp$VFT@*$E6YEpnt<RO]S2Fc6I#%#KV?E"IB>+BGEd=I:FA3_!,`,fF4Cu(0L;nc<YT@mWI]jkl]F\]7mS1%@Gpeu'm8MW*aCRpp`-^.J0(?VTLfAuZ.p4>#Krn[jR<4*]L_<u+0YMfg51$Z^moHbR(P63Hhik$ID&r/o3Cme`Ok<<cWp<4(]l89%_K/D57EGRoHFf=^%/OgUm,C*Wd:t2V\k;QSdI'ud6=]i^V4AW;fj?eZ(V^U4ONme$X+6E2`U9,bO!=N[nWLFWAi*YZYTR?l_Y?<T%7;;;gSbc`DWPth2SI6eWalW%#Z3R3,$QS^7"#l1PNIfunbc/W9C6L@R2"i$M_&![uh!jt/HZ-lQ]WJp+<WN_A#2i^;Z-:[:@Ea#2%9@*RnZN8"4c33CIJrsKD%:$#U'a]CS<CiaR_9jd,*nP`QD@>@Zfh/g2n^ljt>t!dEi(;,pE-"?,EVCMfWB9;'JM'V_FM%I@Cu=>m%BCuc@YEYY[r4i.ihd=GTmj=9c4,8b<DnJ`Y9&4R^XuV:\S"lNp#/4T'5A%m(aor@R$fE&VI_V!,B=k]gn`G^Uq[OEafoqEdG@'i6%'@4uET?KJ<_e*[kKq%uH>DOl.Ca.8u&!TXqGVg4Sq@-8O=1ebihNpQ)aW[l[d?$,#$q)C$"E)c,ci2M,(ViWN?Jq6Be!eBk"c>Nc%ek;&[W9QX/an7+UW,kb6^H24A,>8VQB2*+D6idn5.=U@_+msAKI)sY)T3h3/MX4G%T7\r0WquqQU3BqopdWWZO/$-\Z9G@hr,WKI%[PC*hj*98l]M%?-D??`O7A^9FZDt@/dH72$oYT/>5J1nCicM?gqP:o_W$rLs0.I@*8D&^e"eC^3K1DH3<*mH>O[:[7EHJpN+T8=G%a<ghm>b<NN@D]1re31uU7mj^*H?s0qY#$;42'$d7;Sr_OJ?=(DZkSsnJifTR3U.kHNEoeI;`I?#-rV[Ya$P;jKCtR)+PZ7<W(-\E%%/\rg=ZL$Q(p:/pb<N@hq07.7.uqF-&6*Tl+oIpMJ+]0(bN/\8jiqGl%:C._rPlYe8L4L@Q`F[3!nur=-![Q!bL(\]jJ>[Kh9J#,%o#r:M&k1+aL8Ig[\_?WB^`>bbi-oDX$.'ulM8m@BBSUbT.#?^Dcsg4nZB9KC&S(ub/]OQ2Dpk1[C`7u[6ikYL+i$!lp<[uj`4$<d%7S9W5VVRXG3ZfDAWS3\0X*FejKs!opdqD,'SRp;G#d)5=*>2t43LQtqf&iA+A$&&_MVU:Q\/l6jn\.sl__:2tWXIjkEJo!s%#Gp@%6adj6Dpk#4@CmJ)&!A$_",GABB@?n86@V!,VT[BMaGOP";03Ud&T+.o4+Wm-ab[m\D1rrP^iuNiSak832&cn&X'cX[7Z'i-cm>[f%WZ/s,foLNhd9YlHga5m7[Z<W)4rfN;KbQ!FddabQeS,`;28[<N-n^5jB0SY$s#h%9m?pBCMI$MYI<!j(0(Ibn]3m.*g:M9,Z>R@8%hmD1@Z:gfb)K'.77B^=P))qG>MGJsofC%dJ1D9IR1E-_r^AqG'!O6f+L9:#8AZL8s1`_qgdZC27Z27$k85aoH>g..c^:L+cMdosL%f3W;?*FrD\j(JPTlC+7f@L&l1<GRPlS2j2WlKS`Bam4r88Z+_Rqp6(OTNd(o&=i7P@.;Dk&PJ8_W$_YQ)p-Fh5\FO`e6:,[1N=9u%YlbRuJfmC_rJdnJ;/KEdNCq++X1,Ad,uL1hgY"pXD!+%7Q3"96G7<U\&N-&[<GU7kcF[aC;U!'5DcN):(4bm[XW-95>6rO9(Jqfj%L"%j&jilBo"aEq+')+[%nQ@h9JT:RPH>P:*p$;h[4V/Chj_X@L@T4-lS7F7tAtS!)luX!TaFOh)^H6Q>'XP=M%n$,=[/=r:"osq/%'`b6NSn&lQ;s5P"Xi7O37eamLgc@-FA8[=]q:na&WCX#^&kl\;+1l"DQV%IlXZE\"F!94\QEj\/T@U"ID:ra:]S4V`$ls>3IA@co%QlAY^\$.=D<g1.4):GG)HFk>p:Kq<TY0\FtP%8KhUS"Ti3.BM!8;?-5+F])7g?QTQbR4CkI;'R2WR:,;FnhbH<hQ9s%;b)NmB['c%;t+:4#2C3XTHlJKc8Mm6b';dc?Ktc&`EZUB"BtDuPd.A.U8,//<_.=%<JACa<.PSZ+S;=HgtW-GW!e+kPAe'?f^UWQ_%n9gnR#['%%8sEK?BiKt,].B$XPAK%4cUUn^rQ)b_)+`)+O'+0L=(@!D#>Li\@CurW(>hr&@hL=7c?!IG(,X8apC#t09gDk]kB&,gh3WLL+t/`%mZVt>b,J&WF3B$CI*kR+'oI6R*H"q$4$IlaY+JXqi7A5[I=-cTJQ9;C$=5l9Xq5`p:m&tc(SQo%MS>S4Jlu?0b&QIo7H5U3/L7)_%p6kl)7N3)i]Uk9Y<B<Ioi>0CKVO%h=YH,3;C6;4kc6'q$loB5r&mq7[m[8Q>o9k!':]'a?WIuRDEYBjUr3lZ5SMb18DGW;r:VkTA%[7p7I.%W$E!(l[CMSr].)+r-h8Ubs2][+TqeDQQ\Ql?B7nVp_B"5(^q+Bs#[U5#FliPsit,$BpPJ'YjF@sJ,J5B0l&YN"<el]!XI%EoK6R^3gG1,(2\dXukE"ZjK]S<%GS?Oe01tidu?3`^lTkC[?jKq\>n:[t8e^$!r<ZON,&J?-cHk(hr@$Ol@hiPp+R#I_\#"-])'b%[8C-W^AYj8+D$VibuR#HL@g*J+$\X38C>^N)/VBuo3D"+O+mddrU-s(d\b'[,B*3j3>is8J/<PYD4`um:4?]Qf+>'&]iW*)Z-63&%!0G34CTR/WcC6#;:Du_r"f]A\(i<?%5BYkQ+Q`LeeAF`bOY63C;)>!_5dB"ce',>(k==B_-ZLUS+Ve'#[+jcWG^2)39(AlY<^@(s%BRBEJFYB=(,E4k";>aY[f!(u@r8Pp`Nnh+&O?2/r3OlXYBe+Ps&VdiN8P<>$EA;C'5c"B:o%rm8MaYj5"ct(n%_'0SogIb16M_De%lB&<RqY2*V/\R0i9hV+"<;iX-2aZeK09.NsMo>DcL.,eK8?_sNa:r?+gaVA[OM:Lg<a&TJUl`W="KmGbCBG`i1dp'_>b%3+]md(_%$V![\k)[1iWI)s$dZD77p#B%ffGc(FOl"^SR46RrEhkf`80)T#[aqDSGr0/coYPhPrpZ%/7/ClMo,AhV3Z4[ZFRmT['*>qgW4,7N%B8lJo1&QL]cM`Jghj34?KG<.,osXiV"/h2l89q4Vo6YA6[#ss:0DS%6LD4,^BM75+eqCi\MX05iWahj\ULdRY1`,0:i?\\j#1eI)%EI?nq?i>(s<";YZU;!`OrnA(mkr@eV=di:Sl8jre17kSVU.#t9(W5Mm6lJsb!\BLdW/"Z^a".a_jq_a4n9(&682%WPTT6[f4Q#X9%Ui4Fu<C:*M?/VfIW<+UND.HoehU/#brU_$Oj]?c(ion6,+\gjI[4SN9(#5_M#\iqjY$OUh+Vrkaj-N3IpX4^cWAO`aVbW9oQT(62%.C5nB`I)TM(N;mjNDg3VTTc#9lE=4*oMsLc:0kR<Q6rT&/DXSgO,[%'&+DlO]5YX'<$MiNktTh6ImV'F27>NFI*IKs1J43qM8iaG%Y"P%,^Tq)kl0NK.\Fem^/(]"oh3aujcYAfsj+VJfNI#ZUl[_<KAWk>^Y&i9]a!A(dfh<d]6\_S^lXuYg;C6'BYr["OpLS#$Ps)hH%^6GoMWTW.8iqYr:QRYq8?LU1LLnfPnkt80YAD=<-WE4BE46)7qN)QouJOTQEF@lRtoZ-EmkT[m2V#L;;6=V0QSGMm/A8f('>h4F7%DuLQ@]@T]"Id`+W1e@!t17=nFJiBHln9E22NuEUiktgU3bO^.-A=2Y2\/F(K?.Tl^WM5dEgc4*:gl9nne&1M99]<9s;ttpCCJ%.A%GCC=12\0Pg])"sErU+aY#>/9s(eE!Jr4*&^="0]2qp+BqLi8<<<&R`:q*s(rWdHX]o$Apr1c/-l/6r2.)=7cO[h#Y"rAtitFp;fM%pVjUn^RB->=`f@4*T.;gNYAp)2DZ;)g9bl+T7T(DQ(309E:e.(#!6L_oQ`'a4cYIV4Wj1_N_3]h'@H)>nVH^GRNZCLF#$[`i9YFt%WrM>p*piMoDT?M(Y=9K&]p^0/inm,#81D9g2GB4<a'b,gNLk8,Zl5`9mhSI;Y.-L?E`mdQOeV&&(#!3[pm5:"&u=WGQG@ERUp8L-%R_1Si>8>T&l05I)'OWqjgg)FDFTdHS2E+)DH[7G;HGg=CNDsZ?U9T=W;D=OB@u$Wnd]P#sk`(q.ZtWa,7q.>iqBL2rj:*S0Z$2mY%lfG+K=6Ujs2%Y*+9Bq?!e\G5"`j)2#I?U0kNJu%M5&o*j]2dPd[TV1I+4Uaik^q5KDkJdg>\!1,^P^D<]0q;qPa*Q/gpdME^'[IS%(R/\2#0d[pEFg\GX-T[G.8Z(sQ_IIJmVMu(1d0%-]n<bBed.p%7(rfL%6oka"Ff/`QSdG!lLVm?rk^T)1IX#(7I=Zm-+E.ABL]tu%Q6rn:R@C+h,`C/WH0t`5RB"9_DY*st5r6lLC=\JN^]h$WBLP?T(#@&W:%3B7/_A.+n0*'3YLGm?.:&2_UZ6G-I:.B\q&0B)@24kA%N5b_jqJ%h6dDrA89Q&4k$bB@tC7iDGDB\l?5&s+UW:XHhikBiKWW.QO'#26P&EL+h(4t83q5oKb^]2GqBB"*QZ2f&dcKl%M%<bg/%7=BK2+74*7_H/M3e=8Ck]-j2m<g5P<HUQiR]d_iC=OZ)774b"pGm[=>Wi,JmS?!7CXk0QoLO3NL]U.j1gS-6OL`-r2>W\4@1./#l%]f)1Bog-/P#X;YFPHJ]./&;g>bt)]@9;TtAC!i-N>(*HKBrr4!p$;-[;P.D9191[,F?=\=X408/BpJ-$[E;U24pC+Q1U3W>-5rcR%b(V\k7M\?#T2S'4I&ckie_QHA^]#F_aRdNc&`tn:I5\F[2_rhb<Lb&5!*0NCfDoLl$:p_"%Q<'OApV#R*n>aWaIT`g+\qIrE[I!a%%$lM?6g?1JC<RI,k`J_d6;L2-U$tFtJnPeOJ2b&0=0sDp7)!8aN36KCPLI8n2.M*'_K2_lgrNm>CZ'p2]0rukPT;.7\h4#[mmKfS%CKL1nTg.-#n0Wm(PL$2d`BdY-<E3YQiSLkia2um*hNP52K?Epnf#31-MeoImlH$hC.eU(*dK+`&a(A>o8[<9D#>JJb8]c-V*_W,4%dt=,p3rAk'b,-X\3-cTR"&HC:>q^uf0!J(1%]anif#/.S1S3L<Oc!4a!/bJJm@G$@C:()l-I$?uN5cPQT0h7_CB]SfBm];NW@OG#%L\4e^2eW\d6YidDL)!Y]g>Q@ZY`4'bMLHhbLK"a6bhK-ogL?h7=*)u?Ed?VEBHrMT\#58b@3;/%jBJcaVqh3T4,mXrQL$q8$>/j<%URS?>Ge/c?:W]gjS$[^:MWfK3SS5<#lq'Xe(`@Qr5!ou`GjNAW)jB;.9mMV#Z\RTdN>BWSePk4/DRgbhP=^a,]Y[n06@G4,#T/::%R9%GghPsI8.KGmW<$M'bGp!7jg3:-qGi,lV([7D>CQ^bq&tN5V^4NK_%#lX<T'KnC(16]BQjO,[PA7Z0gDB1d:9u\NpEfK(+$J<8%:WMT=jHasXgiV0nNKPEhid25PY#ZD^RAEZoTcTu0.iY8Oc*L&C]muTsOBBaR!'g:t\i-Gbqq;HMoHXkn$8r?ND+r&P(&shDo(LNX%!//tloENhC`^Zo<AsRY.hY='J_IEH$E1>'CfPOH-ARgbGZ!iqNHBS,afd2S+=V-mZ\BQ"LfmF7%NnJf>QBP<p;_umqFf"'JA4l/[%fCZ5QQM:s!%;/l0KCmFYNjL&1(p8qqRa`Z[=@9]G9kss.g9K:2L+n$s!-tR.D;YnOT"]3<<4lPJlYL\8im&RPd3+3%Vq6#[D^P]B%Y5p18Haar&X="Arl__tGQ\Ep\ChJN6?P`NK>#XVU#.47d5cYr1eoGCTF]qNE8pKgt#rq`%d^=@;<RgGa'a,;W,;5G)XQNe20PXsc%>XWlh\([$I;6O,i4OkA-AiSLqj;,.#f#//j]d44UH.C6oX*!njE43-#Wq!e(0^T5+<^p&p5):b1CT8IS_KUc=@6j/"3eOd1`!`ZI%fqOQ')P<E2n^t9A8sT;<E#Xe_AW>h2ctIXXCG`@8&g/+uctJ?BI^RnD#B'UdI*m`%8t.>%&/_agVc3ddK\"PbZ@?M_d<:WM]BqJE%dG+nWZbJuA43ZD/K$uG[3m1C;nh,OHa'h$8e^/Ej).bj\egqg[q^Aag.94=h#/FBVDGunXN=Rr@>Wpr5%]&JFab0"<;R5j%r,ufj%!8Bub,2"nTZVU2[G<b;Fq:"pSF1Csf:uIXlJ3=@J&WY_1gT!0)/HjAU>9FIk6VhZLjaA?nF3-.ZaUM;b&?ma!rN'gD:n##C>/Q,D%r-Jm:^A]<\\DN)QNj(DY0NjHR[Y=dLS`-?C/_#_1!3j0">`,20KTlA:fYdD]>)$)E@3>MU"%BMLHWdTY,QHU+MSm+>N\,$[D$u2T%koO+bqcH4V/VI?FK8M7FYcR5?fkEM\D#L,k/Q?P_HLmB,%E$[3!;1Xs*KFl*M58RG`W?Vc2L(HE4C+\F!AI^ZBuAC'T]2GQ'eFL0%Q=<e%h4DR=dW@nLBN*3Y<_n8p_"k7Spq]AADr+6eYEH/P@SX?T?95t<2D@d"VImql52"F>obJ<q1m=JGk2ZCfrEae+;VD[70G6$$%Nig>kG.5+!!N9A=Bi4QH<i\.jf[;YkDkrbkq.-gs!GtV!:=a6r[01+$@MH]lMp8_],N'&3M'jK*.V1IhCa!&h7@*(d'Sc^-$9,bu%5+BN<H]i=O^V3o+19U$P,sr]J#Wdb<0JR\#&The#6T`<7=\$itdHgcdFOh%G<mcNR`6_XWctT6YGE8H(NhCI'%hh<C*C6T](>Lp)%c8pR&iBBpDSTP&Ug>-b!(cpu1./N0.0m(tYFR!#=I:DEA,NpD&Ci^#UG!iQ\K\>/%gU>l>D]T4Lqq\8EAi%-F;fU:+m7biA,@4"(%p$K;r[X#Gm8#ZBS?9kFN2LEQjfD(dUo:9Jtd:kbdAppSFhe"QE^r@XWG)afL=E*a&+V/a;jIH2BKf@,3D5->3F#I+A4S!L01mg^s%ejJTXm-'a$F7s_#;c"dkR_:l="]0'@'a2^ofk-??dUC_hnD7$[@&!%WB'HnM]5BM2]4lIUDDs:@m*!+!`['3]GhGPN9%k-K[aS7g%XgS@cYuoUX%o"tm6Qdd;RK;1A/V.WF@"C%J3M9Z_iH8XNK?-QP3idW"BYDAN2<]0rc7iMh:u4%MFK5sO.?;_l#ik'P4`@]nXn'O)%;eMRI%Kl%G,_NC"!7>[7<o^!$@)#PQ(tu#u)@,uA[!!h*M;tp+]"n#']0Y+lLTu0OPqm&b*h&C#?;sY!ADp-"c+ns(RI>]n]?XIW%V+rr9J_qZ3Dea^O_!r1[HlHR)baCa1_^bb'9b5-Eb0#KbABHgGZrUa6MS3mE[;88do;.PN)_#L.>q)YApe?Q[)kE;JL!CdpE<%_p%C^a^97,;tAdNW!mY:[ru-jn!Oo!(pLNt'ON]K!/NLiM&bm&a"L=q(*ucA5j8:Ih>[J:M'1L8,OWkZ-k]':Pjej`^!aop$-\0opU9%gLf-r9FgY?7NL6Q&jpfE_Bs;*GqKit,>[CL:@.e=bhJj.f(tMqS"aA3`/nQ3%uKqHDDQ.72H1llP%B06J^uQ:Lbe7HSbt3=-+D]E%$eZUXV:3k.='VlFlo^:;Q*O%1r@3hn"\=<;/JctQ)/!,!>s'kNBA7/j`hH)QmAu[TKUodoR8(<BD$7g\<(VR_`s#aSk[nA"-`Qor%0qFjQR1$TL[/VbdWf7l6H&Za[Yi2Lkc]!hVXoZ,rftV5*1G[,@%f9[JgX!qX6jol@GMOCCm]3aOeD9-U[[E74RHK?YfsK5bAoJ6Q%%;UlcmHp(XXk!Qudl4GSqo8"_bOaF2@M1?^B^6Z@Fp8k0(9VhJ8KH;;URe_pMejaL/`YT7PFTq4b\OYq/o1q<dqrAEM\b(^=1@!l%7`-7H27rbYXQ/R[)eU$;]Qo,8$Ec0LUe8nRp9s5ebf:d\[WV)bCV:r#)`l$Zo0!Tr%u9nsCmZ!q4!&:+o>e;#LGRcjIHYpc]lp@.%NecAn6hN_7E(DAF/V0DNi=&Kb2;K@aCHS,92\]Eo4)@$L_7?<PfR`)ACn),WJ9X%R^SnX6*B5+c?n>oqX93*5G$Uci`Ja9;$tO]\%V!a%IF5PEkT#e<F'"c9bh>ZC+:^Ph1$+UY.e]qRW/%cFRDXb;5D.J,)_:^ce*^a'P2]M4:hlP5n/18C.qjf%d[hM2^V*#U3AfZ]&%&OQ<e+6,nqK1&*bQB(naH33Hi>]NO1R&Lpg?CuBH-e3M&JDLMB_l*;r:'3t)XMiKBkS:qe6O_LAJ.V-oed[@D^7K4iR[31rCC!U\%`6>+-d+"`>:2>M7%-ZiXi4FuO[+0\1'p8?3LksR4hZH?D!apeA8:CG"5X[)M'L+uRCA6pABFVpe6n3_nQek]\MqL-kA7KHbLJQYo%UtS$;>!4,hhUdMc`8].nD)W?K'6Va[i0kL[]c0#LhRo-g$>6BZ%N5ZZrNV>DHF/[e+V`5'?Oe"^\(A9hm81=[`g+/j_Wf>glA5I2%.%K7t_SJUubiZr^NmE7S[%dtMk9jI:5%urHCj.)9hB.)*fR[cki/C>O>G"&l@fdMLdiLokLC_j<BFc!;DK.r]NF!#`Cb=UJCgDQg%IVX"HC+M8pRrq`:aUtQ+;$6D4blHSX>N6.FRCI_0K$;0rb@cERk3lNbaKeVqM=6j-VTk*7LV$ZE<$/V[U"\KY!j-WXp(:]KYAt<;%oG%,A=+7r0Z:>o.$.3juC-MIM+P?)X661sf"*W$`+piES^40mtVlqp#@+fYljiK(+mEmcU%,T2u>=@,;CUHluZH)H4m5M@Z[g`pm%o;FZIGceD';L#27cn#sUVi@q0"hQYPN!cOB":SQn/L/dN]>4k1-Y<s60qUmfh%ANRRj+^(g3M-M.D1_f*P:Gtb_"Y3<l&Z$X?"`"%c1/,lFR;7UG@PaF2+)\*6/Lq]]dZjPa%E0i?JDM.pqQt%9=iAcjj->2jbjm'>s9emqOH&j5Fo7a0p%tY98_s:D17B,*DpC4j=r?e%7B8TG)n4Vf4]ju#\50_+`7`f$A1t;;UH;IcT1cr#NtPgSF(J[WieIE-f)%SjdHeVdOu'[>cL=Mm]l'"fEY`Q[d'K:<+_M9D[G`*F%mCkd-9B8"tlT<H>Ei/4[\bFA2?JUT@g3D5"D5,e;8uXgDD>3qfm*!Rgds:aYgKj2P5dtI)GPc'b?0>Y)Ml&9K#:QotLPhrbMPW*m%+(h-Y3hn]$"*rQURa*=IDNDlZ/XEY9GM;L*9rB4o5.:;Qd<%jN2P(JcFYoZ:T\c8/hBn]:BUqV(.h<=gB,"":>8]Fd1nE#VMtUDc%6U]B@c*]'sf0`!U=e'PU^h>d(=?>j+d6g=N)&[;@qZi+X1THW;AE3W`l&>JbiSM^?[1Q,Ge:34bU%XA@>6hS+:>m4fl-+S!6UoOA%7BrDYl.//:Zd]I*9t)Xl[Yq"=)IYW9*_g8M!6%t\1n)\qJE,S8F@N;WCO>"6Ni"UiV:1K3pQ)1-$6Ra"N#X%1c7"uRDdW4!VDBEN%k-h@D7+9hFj>oO_SP^r/`I3.2%fe8qS;7B"])0I$)dEf@!FdZ%h$rf7YS[(F>?bM(im@GM)-+f,]@cA^3_SqY*h>4GCo^uBR7d<8%nOjg]Kfp40Q:c[ZC"0J/V:M\X9,6*j?#D0A19(uDh/R-RT&))jN&FR9Bc%4=$$N.H'?R'k&K.Z5s&?BQ_-ib?`QXjpMO@gn[meN0%nMPOEF0=l?jP+$_B<G[C2V*ZN??9`ka^m,ecISEAf)(Z-Msg:T:iupi[Vp,CNGItKbU?N$^[B-a7a^4i4$0]>7B:4l8F5(hqg_CR%Kq]B-JRbH5Dfs@U]QUM=Mi74eXl.gU>EhD%db_ZIH0-tgHSGMMb'QX<"6h^K=0S)WCXR\2!sI%hh#$EA'k(diM8O41)C,`<OA07C%e#>Pp-el1?$gGb*GbX>]WM)+3)p3!1#DT:5GIUI8^Dj1q\D9u`6gf\Dg"[%E@:OBMa0+oKLj\j^]bH'kQlZM#E,Pto2j:-W,p>8F%8g&_[e(nVu_OGam+^gcACFsF3f*BmL7hi!LB5j<E[aOkF"ba[KbH3lhF.XNU@r1N@=4o3);LT"&*@Yj\pM/YT5]=oFha%_.kq?c)%0G6>#6[cG/lY^]@hSF(`KXUGZ&Y&MNdm/Y)A:H>BFj\RuaN$+:^@"C/rKQ<4<iZh&mG^-#m]fqWU3P9jl0h4!nff-GJ63%3Cq7Cj%I4tV(+G8j$@q:Hk1#2)L4!hVhpl;tW`,P*u]A;qXhWBPS$Z@$@EHd5[7kSbRS+8InO6rG-%MG+=G/rFiXYN#mHS$klc:*q$hf-'`%^=V<>*7j6kmd-N[%QC@,,d9qqY$jM?[3&N*4mHj>Klu#YXR.)%%&XMM$plh6Ns>rlIJl$\DVt/X.h$(FfdrmS+on,8"P,mfA>>@]%=DTc5o5im?>AI2N6CNW`4_tkjDBR>JmAfB*04Z2[O*f2gWU>0j5?LD8#1s2jlA3$VQI^q1$tEJ!#dZI+=7qL9_#89AbucHpI'bb*%D't.=,O3;:]8nINTVpTg-M^EqFi=M4H>fsR[rMms6u(@l(m?PlYS[l7*(,OY(uAXnCc[;HVN)hRGHl"DCZ4g,oV;]/1[FQ;mA:J(%)hpe)=)9S0oQN.[3.VK(),<rpikqkbhq5HK@!T6>rms=,(<GRiML+-\d@MmbR*nDd>K+*%dS!%(:<3\_#r<6PU3Ju9EJRru,4X`5%F3jb_RsQcE\U9*J=,VcO^K<$TC2b,)CJG;!H_RX61qTQqL[AtCGqk23F1>Xtg5Ep=G;nc`R[#`"E.P?E_^l'HroJ?r]4PfKX:<f;%O8W9&nUlWH;MoB/DN'Z<h"VpKFd/77l%deHGG16.WA[@B>bhH0e_GlXU:](<=8g>gp@$(<)O`"U5%qhV4?tVhi:F8seX^cm0Ke1Y%HJ4\!=@N5f0Ub"(II,jmh)7]J=r4mWAk3(MUu^CAjRpcm.=nJHoh3s@BsOJD]MO[]"sHuLjC9I(;?bE#.0q`Cf)*J_c:mh$H`[VB%f=EPi0jbUWPK[R.2/kU5i:<qjg>,Pjo>EX6CM1%l14W/ee(nJV3jZGJbfViYE8#F<`l8FDGt?Aeh(%@h#`D;l[2$\4YR0U"")Y/d%iCl12C$/l@bTo&/qCQA=]$BMOQ5=GNX]6,;@/?'7GE5ANZpRdG#A]6iAif)0F`.f"c'HUK<RS1MJ\9V^])>o<BKk*!'[V6!GY<=e%fVb"Poi^/kX&W6[g"PHY;c%UDVK!lJ4a$F(ZFbKu0aEW^NB>4\E@'97#Dtus0-+Gc#;kgjs7rqodK.X1"FY0pAA.*8eiV/.lh?F*%%WMb+Mug:)0=GlM!eHd.d]tYnVV<rU@qPS9g$V_n]$5CU9TN<sC5ct=3nWS*0Q4O8%^.53\\:g+X=Nn[Y)K7E&B1`RPsHcbBJpEd%2kR[SpI@nIie+OjESN1./@jP`B8Z(AZ?Q7-#>4H&*FlM!H.1!WOt*TS^N_MckrAu,]Q&(Zf(LQ[&IPJepP,B3\oY$u6NQrH5>@Z%%-Z^@j(c0s&F`r6f?kF@NdRMhl!8Dbomktm7Ge]=<7P]ap=S.[hMjXWN$Q!.D%Ma9B,mr":%%r&>pC7452MRga<"1Vp)oI\Q`;md3%h`V<Chg]5mJ>sWi4%'*Qa)J,^MsV>bW+-Rk&a&pR=L0(&k=.U.Z!F+)2-jZ'"1T+VAP.u2DU_UEO`uT_1p<'cY!fa*M<hM!.\6=@%oqd%?h8m%rV0q"OZMpgrq2Ao#%Y#qbjr;t`E@DtN,C9nf-dt`acq<;@2rO(B.A,!=gu0pJZb.CU@$gH;]t\TK9DLEN$F!G$fW.T?%)L&VVK2$7V42ffKn6Wk^6uj=7CoI=#p!Yfn+5!s<DHk#*rN'Xc$t?;]]%9`uQ+C2uG!-d:J$5L;XH;[;I*6m89R97@e^*SuW,;"r%Zc1%5hs4pg1IO*A[F`*@2Bo[AE3C@Dj>*4MQ0lbdp\J#OD>jIVh<ssB^=@/")aFi"os8OtnIF+:n+AL'-L4UTGIZ8NHH2Gq=jU@;%fF:&#%6d[8I='f9B5QkZ.aJ.`os;B_Dp&fm9^hY\*pT3\K&6?15GML_b,p,>hoBqkR!8H%qH60O]mkQZrN$f7<'.\c]%>7hE7Q-U%Ff0TbN#,I7Xa[k9)0WaGDg`RpqGohd:MK"]'^8pgCLuYTfreWLoeTjNO^/5T9%s;O5O/d1g5+87n+G/JDlqj\[s$'INq`BQ'9M"j%[dUnYQEkZ=3Va6\qH:!3DfHlV*iF6rn)N.em_S[!^[7dVN:6GG?6V;bD7eW;Ib()QNd9O^?9da[r=0L+[V:5G_gRo!rN+V?ot(KQ%^":U,<kgfcj4e%,L=L^"HQT+0hs,EIqtN(0V/;aZY^We52HTG51sCFCqQ0p*BQ!L,,DPp)f2$!3_d!(_M+ZOZbq\=b/arA=EcYQ:%_0Gu&p\GmSmWJ-7IeMc-pV#0SL19alo\Js.gMY?&_7b<0#K+`oqJ#@f<j*ui*V3faX.R?[B3X3XB;3El2djmfm<Gh,ogYje3Mdbb%oeQu:Mf#2UrKsLif:Gt0IBVOOj2tZrp!Y=l[9NV'ffc:Jf?]m1*&]0i2r3e4m23trM0n+FB,qPa=QKGKos;B_cbLXWl!?S)-OBT'%LUbs^Xq.kr]me\,eDKP()-skn]mePP@7(a,m<ef5NJ$:@_55<DRX(jP/?4Zr_YT9'h76G2PLMRDmCm=M(Th/8MR2uqHYqE0:63AG%\(]B%;iTFVJ(.D'828:(JtOdu&d"=t:Nl&J&Aa/VQhSJ.EeP^/X)PG;3['pV$W1FMH'a"/hF']uoP*sV.\;^-J]65PA@CcL.RGoP%^N_ba5&sp]IBG\^)``4jB@A61LL\UmT!mo*iG0KT\Cjp]\!%X>lGMEPj8,f'Zr3mhf?3Q1Mk8Na>@0=aa^$oI[CYgkIGR_s)";r<%`P3?Vc+r#q4RekFMXHe^,Dsk^f?m9Z7GQD7f9u*<hS0Ss!a"7Fn&\?Gb.`5FM;gt8l12TSY?Xbp0aXBC@l]FE0!Z2KIc.3rna)\o%2m0n`EHDd*='o+V_@sTM_1oRt8B^@<.?I,-^VDIATs-JUFJ%cQMdc8q8nC@D<(Kp%T_Qt%@`^e)q)Y.iBDTacOSBk_:Z;'!Qrk"_%f(us>!Ih>AS$LYKL[/-ZW3*S+X,lb,s4%#"4@u,=$LVN,>kNKO/i0c^knP/!K0qp`]p;!AqWTqHMZCLOi\*YOEV'Gp)$Y':!n5R/%[IR9rMpI0*U7#5>mY!FS>#:Zb=<BC@/eT31@%8)J.m4SqmrOVfT*qH(]h"j8<-$pQ<AjMrf=oO3fT5>`.\=3/;^]&,i`l)cJm-;2%ScU2henA&0>CQ(Y?etc!FK]q-jmnQe]r00smc(/aTjd+X9E"C!MMaNV6VOC5#Z?fQD[>(l'=]82"A8iLR@0&0(O&AX"IA9F@h0Id%;3?+ILE6K8E\m3P%\Q=6C=DQ'G`b@4492)e7),HDkN<q7a7iK,52UG!gf`GZJpQ%u'b+'i%lqJ0:+3]#EWY#VX@g(!#BE^ESM898%apF:^+`qc#71ubOW24UHIajY?"]/fd)eUh=L\l*i8-PnR:K-ag6o#)=CC17srQl:fcG2pS_sY4MA_8pBS>A0Bi@,d++dII9!R0PW%pVYd>EMbp(KQ(fWFDO(qY;FV$"Le@.6DIrr'm\d@OfR%m$<#VEPfidRZqQd/QscV8-V92`[+qKcb4hJhU[Cq-/4m]5nH`&PHI\!9%!SE2<W8fR>.2>rGEkF@Bgms:<p+CNZ:V7.LGUum'I*XC2`5te.9`A[*?fYu5%j).R0tu1G9Si0L<4\+K.N.F`5%$Qe\E?L'$NSds%`6g6RakYs;Ol!6IhN?GH-"",+rF1M$#U59pFImObic>r*X"^(N(rW2TS^jhFqnr.VoA)3tjtZ#YD"'#(`<)n5`sQWU:N"@^g?(^p%Wf#6LbhXb&,O5G#iQ/&+7-1L!S9XB?r&V%D,)c7#dQ60`gM@]V*8Q%V'(<`*G<?]D7_siu%.n-HBo)i3FT2`u7kbAKg^>01(GI]j%2tp>+5oll:kZUc(""/=epp%!d*joI%p$DmBVgbK!#J(*CG=*J7)0ceg+r1Q[R5i70qXZ?<@Q55-1srABQ1>/$n^0YK<s37JT3A(e%Q>hkp(6GTp"tFa%lBj.IIHQ;g43*&sd?LP]mg2:VJ$Oq.9(?D]*roYj?9lXMg<+Hi#<V)U?+(0?PJk[3Qg_RYd(dI&<$Xb$8I]0k%a0*<XTA/?24Q<E^olKK*e#"''TduZ9R9"#E\I4h>`iVQiFC)k[/sMbQ[X0b%\.ZK/-N[Nb&0GdQLfLYS$[dim$9M@fcV.>M7+"(t%jp@UoI(P&<et"G!*r93JVktA#I)bJ<6n_m]&1qbW3u2):@u2Yq=V'Qi.3tR7"<%Imr?2=rUec<krUihP`^^'^a`3^P"rbY1`l.UB%du'(BcTV'8aLcst$.Smt)*0!/GAArF.WdMJI,KV=p>j_cjFBtmY$jb[@)A*cm,+l9bG/hg.7km.Lgo<LcGNm]&Q3Q9jRs=mDQKp(%p-FRU72/t:'X,gt>J-I=LC[[VSN9edUR<4AiHgjs\S+6L#fd/n67d_E+P15,%kbaFi"do4"L%%GC7,@.Q\J0:h#SQ_*>+6$&C'$U%]b1X_(Cf2(;L0Ju!MEH'^:6g0Lp4=S'CgOf=-H3PGmb^Bh]WU4%p%fq,<inudpj_"1r^.?Qkc_M6,.DN`WmR,+-Z!7$u_)-aV'8a%(Td[FTAL1_^7KV23WNW#rR1)c]1IY\hu7;q%e(1$FV&;Rgo2/biUJ@mn.;DJ[`uTb"5D<kHd=bkTC9Zs7U-6KAfl[BHOU2-D(XKl%5M<+"b:Pt-!7Y8aRtgG_I&R9XLEl<4Pul4sVBFB2d$%Ad8u(f"Z@@uX:C.<A>7X'>Qb+q0g]tGK?g9m)>\Qe8ck]9LVsl!4iEAD?%4J&N1T2/lZFEE_:mnM,<5$L-]d41cfk0rmg,mY/*Zbtsna*\5Tm3_?eCX#@obSl.la*&%rT:3fDCk`gg]kVi:WYRKDZHL/!hFIX6%`Ocn9?YbdJTnHe39'\OZ(4!S/VRk)k*OHT-(Q%n@iC[6i+cEF'>lJ"\1)fimha0`"<6dVFa@n71hG9O>*eF-FoU.OK`cjIS,hJRV%-0?ZpJEPe:_;R)+LUD@JApb:^AHB:=/1J^\No7aRd-Z(S=TrmL!@Um_'2NR[#oliD!n(T4$[ola8:%AX,S4>h]-QFm91kfCGbZbE%AP/t72W7"0%Q>GtW`kM/"I(Z`pS=0"$,r!h^_EC//kEij6qN3+S.5'8Tg>``]M%GePr!kLqn!bf\JS9lW%aPk_iUGf5WucSfg?jC%o'[;a\>@S_o]"0(Jt1W?.BkmI!sNqiUM30<NC!Ykb]"%7M5KmlKIt9nLd5P_!X-7ci:.;.p#F>S1gd!JS/L+YQ9@Dr7["Pe5o:"K%TBZbl4p[Gbd.-IDLl6B$:Xd4\kDhb[`P,@<%sTX2I_8h<KYl5;k_,%3EGmgI$3ifd<KfA@A=:bhKJn$7aLJ$'ER9;-Rdb'];,)N8%-CnX%ERp,kNU3ZJWRjE,)*qt]gq/J8/Db`Lk[+59#Q(@l6;(6@]ltfm\cfpb8?WsY^BQCq!d,`LNEZN?KN>"dj'tJ,4+<mEYBO0Q%9ongLe?e_Iolq$J-,$pb*B_76EV8WeD*a@m$8^o.VQ=F-*!_q%ZC[IN0o6.&S$JWR!a#pf2e>-.Km!rER[a02X<U:m<&i#g).sS0%K]@0;F[g7M'1$GjUZ#nO$p)ZROo-M"hb=>3?5/($n=M!cl`Ybjl-buC7e3\@j^g3m$2rOBE2#]eiZAJ0;?@K79@I)0Pu5eRf,:sP%"n"0H*`nA?1L9F4HHN7"_iQJ@74T7cap3Z6Y!@/XmdaXJVd.'A&P2cn%(cSAFNYE3HK8<SlAC/$_f2^tbp#O`a_6icAq-Du6Qc4W%nIVN$]%%m9fWpoO4ug<[k%^ka2H`%i#kPCcfR6>=IAYAbX([%m8`BN'DEVRBE/>OpJ)c(]"YKLuF9V-j9;(hdO"P@LHN`))Kcas1%:d3S9XZh/Wq*pRL.l=qbFTqX#'JuV'SP#W0AM/fb9$uml`KKZ2cRY;T:Z_u0Ur1`%UoQiq,KmA=M.]6me;>'53=.X.+<0R3X<;oo%B65Uh@\c5H@E<8MYZt!NW+mC!`k3d"3Uh@D,U)PVfgE877M9_AMom51/OYcsYU\UKoq!B7Fd58DM%Ht'C<YdE5]&^8\BDNoEo$ft%msr,$f86(M2^kVM!g<L3h_E3BWO6oU(dJj4db;shO>?LDnk5_*XG=&`oOK!Zi:3+bMLbsR"8MYI_#enM@V:GcSV2E%U$33_A3b"i%T,M,E$f^t<iSF62r*oIk@?N`JW`TmV/R16R_"?BZP_K+7gP?G(LO46$GEb]LmkX-:rpKFFU\L+Qc1C?#oE!^s_MeF7E&(`]l9C<i%"gk5P?6AJ3mF?h=o83F#hJF*6cI+6+_nWcQpXko9P.-OdJ-V\]Std#[F8lAFl221mP.J(\N+5eC?*!L$(coktkd;\)edDN2Gq]/n%Ei?u`7V*g</#Sc\@>q\tcXc27OZHN[[a6W.!8)ggLmgn>Wu7R=TVBi7)5'+*:n(LZhJ>Ma;fMth(Ms73F.u_lR,`aH`?kgJ(JW'o%qh`8#k#/)E06ESRTO!P&WQ<Kq2+)"JRL>D(1A_I8mXXAA2c"qQDYMTgYAl@iSEio7IAgS+BS_4#-Sg!QL@O^+;(s"UlRfmu/ldo)%!!3A8Xq<0;IDCLtab'S"\m!!BZ3hRn;WX?X;M00MCeH@SfOp1r?Dj`HY6O`9f4ai_FQ&QTef!/`CVSXkkd.qa-&DV>3IZa3"R(f>%5.AEAGb%mC!LN-i=*EG6p>t4\1:[j02+PX`Oh=_9Y8QaoD$f+re0'@<Oq'mQG]HYZX\3q<:JorJeBq.eU.eUaAq&R9Pf(0oid&!7%JeF+'&KQ\Ja(AW^1%M?Q.3[82HS84qQ!Vd'dF5E<)UOiZ_L2PQl,%9/(>-V'0Rio-kX:P=,V7;FC+(`2Qu4Y,<<q=%%?_L$V";;V%N3XE)QQP'X<eSij^%$uA_ej$H,l8:G=tbY508?-NPMocGh-#YdM?GSAZq!Z;(?m(W38D7-oAH/N+WSoA!?LQ=]e&;1;3Be2pcDEX%#^JEBOT7!2Cg%c7>S5\%o%n=',@Y.cb\C_9k>b@k0'8;874g#mK(/"ifDqSZhT!;n#VCRWOZ]:cYq$F#i/VqVNf'$<l.MgL@8jF#%Rbpjr,5]jjLFQ0u1)4X85[#MD!YP(XODZT%%f.46I6m5'@=gcY&9^&XLfm?EQmi;8*V:Jk2S'PRSKj]<[Wi9Jm);p8JAP37@_72a%D3.YX$mb^r&.ATU*\66X3%EO;RX>^^Oq6CYdF;H<+m06ci\@K77I4\.LYEG0BMUgQKN1.CS&@g51Pj7bCETR(S"\7k%ejkc@(*';%g$k[9&`#!TQ!!/U%-pb2`,%Q9!Pmp,Nae.<;M)0Y=[la'SOI/aAL]$C`"?c#fr?tJ43ii5Sfboq1R)1ZeC=R/qnV\c\%o>sBUGXP%P)Vu8qG#XuhNEl'kVm&pH:p/aldKao54k.W\-[)%;tcooA0[YX[OM+#>I()N9AQI]HX!et=P@HW[!"C:h+cb7+W>7:G.<g>f`0_r%Cq0G4CrQD:2I`H<Io`b4g"D2+e.Xb&X-D9ea$2OjV9Du6d#3Be^.Ofq6MBL_R]d(>ZW1+gfpo6Lr,:/+k&A4,UeYVb:bNqOghuVY%,qN,=Qm(<8#fG&shYe[T%bcd>;;`Po9Ve18PB8SM3-^7s\+Q?1Mt/oCT<f"3,+V82>]QV=E\s8/`BVX)I.__a^UrQsBd_3\!I<"]%?;MT@"*0#>+'c5=J/WSNPVWjL5Q2*U)@joHs,A%`<"4r]#<Yu%O)OOQDeI:>ja;?KS-)mY(7"Z7cnQjeNMC7>Q%pUuVP4A8]V=KE%'3(^opiQG6h@^)KFWpPqKcj3jXHNMCG]6>V[AH6lBf_c?Z;G6k*fe[j(kbP;;^n/dDc.8i"#+BgJP)Y!W>Kj^T4:P74i^Lb0q!j>%aaI86b/=mJA/+-d1JsA[&W`Ue.69rAc_*N[bf&$lU>]3:&XVf+5I4cZ:;q/Yng9e.4V"'YYo!S8itMSm,Z=.LHq_I\)V5;I1'&j8%CCM2RUndE>7OM3^aY:]P&.7M.Rq1Oj-BguOk>[gDU_44bbs^U_1TD.Y?t/C@.2p\?5"APQPE+U5;udLC%MSmr&tm"t$Ue.J1F53)%@AT1H,TD_(Mm*>L_Ng"1HGeS?D\=c-1eN<Xn2Wr](eb#')QZ=^'p[6F2%seh7W205$Zj6`IjW(<.%i$UN<C2aT+UU4O-(E4]^^5?%_4`tiYs\qc^i'kE,X\=HaV]`QSH-#^4W7fbq,pD()!K^&H:,$<'Pn#Q<"sLa&osl7R>EX,/qMou!NZt;@=iqpCe)lH!qBDCW][%[%&PaT3kW";^`SiW:ncX[ANeu3t%nP]r,TnUiB:&am;_7&L[J1FV]Rrt4UF_&S_=_gs;TbIs$F4kBl=TOU84;EXN0;WJ1[&Gti@14]%hb;st<0UCJ5s,i_6q6iCJZ_<na;`d_M>@C@!-D+i`3!+&U1XH-85kIJE_PD\=GgRP1>nS>\cK]JSnS6-^IX&-QAnHYUc1-$^dV.9%.3V6Yk9?WB77H;s'D*WKH6Z@U^f6m;f)AjV5_\K13>`mg'WplGO+X,+VZMiEhLOck1p1LBq&(TD<#fqDr$I9r:kg*l!?$Zo-l=(H%/4D'LJ;gdM&jqIDQ"M3I'GJM5n/G13=:#%Z<)V<V`.q(t2_Ta?`oGE\0Q\/YK9kDFk9ufdcP.Bo.*i64ncn=76o53kYjiu*"WjFR%eEFFROb-q3,tAYOTI?R#+O:AuaW"=i^nD#8P>Z.pD$FgIrsi-ccp/@[VM*0R5O_)sR8Ok94sq1@.2JjJp`'P("YqJ0[!0p65`(>m%cCeVqW)CGN2Mq<lU0&ee5dO%Mg#+[00Id815iYG/pCmf8Dh,]*Q%@71>_YPP@,l6k9Hgg[,]M4o&I%0"G;):k`gIO_1-mSGQi[=O%-53b<!GHP/e^Wma/aM/70&;enStOu7Dmkm8AEi^=^4]N2+Vk+^;SlG@os5AUZP0\ZJTuN(7NLZ.ogNYTJ%C"WgZ<J/+-]!NRYoKi%;k`]q-7O/%#-L;tbql.pk8)eklU>Eme=7>a1`ou8Y@N8mT,j`FY*InaP,\;\Al-^p[(]2U$;;t4(%?9RHFimsaX9eamJ1V+?.*h;%R==-CJ4k[>^=,%1[b2!^eqtrK[`IcoWT`?"AT$d721V"<A\_Ba<SdTVo-/gp_UI;:Yk/KOU%R.b,!+Gm=K,UPegaO5/Fbff/`>g!%g_/3sOV)79EJ`(AP)F6o7cRf[jR5,\:p.L,MdF/?)Yt)1bl-YYSMS3sWusIpNn;9BV*5FP>&Peeam59]<"'YnG@$Y5H-?eW$Rdj;%<9DD.]ZB<Z<1_"YZsQB&mb0SN>E`;d4X[FE@+G`t"h+)D_Q^Y^Dq1/*Ba;'Plu\V[Ha$u!fHQdj1!;1e/[@gnP;%\SXk-g^gV@%<%'W/EcQ6%d`b@L'p0=$E`AP*Sme=l?!qJ>*ooBF,M*bhEb-8R>s:$o:Td(I'`457:0JC+C/XU>$AL,\TA0hh];eT/biVX0mIG'g]a%<#\ppB@pGqW-7ofq;CQTQ%HI;]>P^E-sO75f[!sFDkgRVkh&&biN$_.lTu7(64M)oh[R_gOXeU-&e&Os5JB.17N:Qk`6`Z.5!(+b%Mb?jrVi:66RMl<&:Q5RkSi<'lRB+COF%b*P2"V.;Wlj.WU:00>Q>md<[F^-3[a29kU68kW[F7g$@EmiQ2eSlY_+7.qmZFRt(XJWe%'tr+3?J!!F^5H^,+&-?Tk5+aDha8JTd5;eGaphRl)';n9.HQj&Gh#pk0>?bq8YmI#RWLEV#%7.^<HoX^(=nJe%'7@h)4P.L6.Kt;%3am91509IjGpR!$`n<*D!Rlc(hQ4k%O2sGA17i9D/6\nIDY%b@3TC8N64.mUl]LSRGI*hJf$@Wba%QX=;b'dkpo,DmiSl&QR_("'%Cf2'`$=]Dm2d*tlS"?[J4+79:NrGbki[2kF?%=UHHn#\ml:qIl/=5pkbXp$tZ`N92R]pqL0kLqAJt"A/Bru3>7e_,76)+60do3j\%f/?!.?nmY2LqsX]Ph\Z1c$C3j^gFj`#$YcuaeQmcpQNgbp8%j$(gE?1XTH.99t&2HG8aN*<D7Wkcff7H!U'+cGb$c&\=8ChjCneA%-n,Vp*+j^'/o;0RnDi;(:]4a3_p@L(VG;?BiBchi+tbEBNtiG?[p5rVloWitW@fD2GGMc*g%6!p\C[=Rpff@jA@ZC`7f==TU)3Qh%Pi9DN'7KHE9/!"%B"Qh2+3ljTj6$=#o*cjM,f\lZ!*lh?lu5'4g^[%cB<EEJcq[9Y*W568MnHRUU3iJhImgQ+q)oS]r@<hg`6]_2%geW/rJChpbR@@!AU3,[_\P+ZS7iJn28iSO]/gA-99U:OnO@oZ.`[OP$`Y3g2R;LU"\Bg(Ii+HiaO%HjK#U+R4-\fOk7I#?@1\Enk%(X2V5??AhM<AU%oF]*9mb80I;`kZ,,R2;2%XW^O;R=-?6F=K@L'3H?oc$;fd`p81Upn>L72kASl(Ja"3($`1]hK(tR/)Q?33O*)q%O+_F[0d#MJkp:X?0h2>t1oD^+9S*i'EPY0jRn2iJbqo4`)Uc'iBtp4rCf^UGh,SF)_ctNr`uk05*T(/uD;Knd!cD\sF4KI5IZ4mK%48NV+2V[4QR!68jJ`,?-=qmI:opq$Di7;LX[<$!J\oP,_k"09KldhUZp2%Z^q8f/p<dG2-]s'S*^N?^IA"D3iZK'IE7tTE$Mg+;Q%\2tsR@f!Xic\/K"_qFJ%VFu3/Y@P[?*Tb^mP#C0mbdim7?_ZqO&kEm7W=r=/rhr9>=KhR*lXC[o@F&L3QH/-C4^a.bq_9"?LJ1T*%ZN**Dc@Wcli3Z5k:o+?9JllZU"YY<dr4*-lVUp5!J'g]YXUL6gYU;.fm(!bS&DmKuHS4Y\Ds=LH9<!\0W;)Kmj'e!Y5O:t#kWZ[%%b<<3?;aib$@A,/P<Vsbk$C2?@q8K8^)2C?t38!l--Y'9f3J$k-k;%su<Boi\bhR(3@1I6@E=dahd&?]VSqSDcFo8IViKtq9ZKR92%<]]U;*fFC4fj!ML=:]bKdDI#I#TVfHfRs0ug#n,RW7dEWKSM_V%bEV=+8-t]LHWrH@F(4cQ`(pKhD`dVeC^h.<2PNCMgG!]0tj7'%Qg@0%YU9kj*qfSlVhShIT;)Wtk_7.KKJE1a9MZ)d.PXLBX=Ku#B&4ne97`#.Jm5*9:L8cC-0E;Qhg0=]!h0QpAJu?Uh?dOq&n<4(%O\mpVeBRm:f"feAY;r%P_Oi+%mLHHIIp'XomQ$ssh!9s9*!fecMO]3$LGIeig0L\(DaqB)m*kkKJ35#0KhiP_#pfijN=u_K@4otH%a7==FIbu$>AY0Ef'mh+>F2DFRYUYMdDDGc-,r^t?&=TB%__-.BOg?*C#7t/V&,uRFH:kP[_J"4W:eqBb-kXmS(I)UYZ/I:,dG&$#%qEPe+dl;Nt=HB`aq&.E$8)2(?iOTN3CA<"(l^PY5j-1nd2dU$0Z7ga#-iCR_1KT_/Lm*cDqu,:;E^E:Jih8:(ht4;HfiJI\3UNk=%F`B=1YJdmB>Y%Pm%5YJJR0IJ.*W2\JrJ@*3&%"d-7Aa"BK3P?;1`piq4X(W"qD0P]i]=s)"/]io9"&9`8L;!d\b;TCps*o<bYsOH%5^L=7nCa"?;4lSIj,'3!kI5Nqk#909HE&sSbpIDr7tf1O+fe8_jk'+n"o=16^>L[&l]Y]`G+iD1l?#K*=^?OmntR+Ha@^p,FNSnI%Su*EI$bLX)USk2R,AUf]N"cnr'kaHoDfrdc+hcgK(h+Jq"N/W?`onj%-+#)]7lA^DlT'0GlmHuQ=3L#0rg_X+K,I+c'(Iiph7*4]%Ff0/2DtJ[TAJ"ES)]r5Z:>^uk4+1aXJk?0t4lB@NV7a=.jQX0@p\QT("\.4jd_J=*Z,]VLQj=j_\O[.\;AZ<"b;8hMM!E.4lJn#V%3cU;gi]K6f+VD;!"Qc]()oZb;(G)&7aP4-LBJrW?[OhN2'-8I4R<@c8=LKLt.`=L%*Ra&<!d3J+')SfSb`s%'d>2R`c5W>f?D7jg%INMG*`5(C<ga:?rY?#T$B-5/Y&EGVpVJKgMA4kO;#/9UP(ro,Qce:g@&EUCte06*,_(iZ^`2WE;,`uW;R%[f\TD/RW]4<t11gU'o%-8T)k8f>K:_-WOkP+,"CR:R;=dI\D$>,1<lg<q*M9Rjko:)JC%1;I!V^"sV",W6P#6r,`rk7)q>U)h`#m,(u4TY`Yt-d;h/i7XW/%PgcWgIKRg(SKen;``7bL0jDpQ?^]SDB:!lu`f"CXn4/^9Lu3he1j35E7!f\:^(@m\$m'ZWhgqt)Y,Y708=VctGS2%h%(X/iODsY]%6l9u<^I3f4m"UTNh;F\68d*eG_7VTO/5f/XHUD1+j<t)PaTEanlEH)>MVm9pr![p6(_Q/n8[M5F0ju(;`qZJ<6:QZcHt8MM4;CHn%1[IOJkthR+=q^41*u##G'(#Ff]MRf!?`Qk6V:-ZAn>[]b8>\QVhdg+(%i$'o+eo.Z)!$?+B9RjjR;upLbJQ$OX]dg&>Wd!5JHjng%cf/Y:iLttDT$^>8jS0Ga$r1*8q_Em8/h)a)N_%YDnn]CM-4GVFrBLEE2grX<G_)8qEan<V;T)gE6?ln&!REMA1K2jKrLcb0=J5_;%9(2F5g'YI8e5mqiX[iY?a22FM\r9<sL3i6J(!LN-0oqrBE6[c0oo(V0>Xab$%f;RX0='fiqnt&7D2.\@>K62P>.gUs>+s`jlq2Xp%f?cN!3eCLt@bsg=Z$$mXE<0:Gda[X.]#9eYS%<AHi=Z5#pu.ai@G\%G<1%Q7C6gEhP40M,ZHT,M+%cu0P$rU]PSnLVS0!8-PlRn<%(#&gG&oQKO3ob!JAh`rZ5>i"e9bjO9>A6"-bk(IuB!XPZoZYc,FJ6p?RBTd5`l*h%),*:Be!=jo23rP==Y05Hp6:;SF.!?XUuo'L%Lb,(,4UtFs664at8(N(V"3!J9;Fm.70aohMWmE!8`VkfHQ^P'I)(Lj(,;CbH`H.'<gDpd#^9u!NkfI%U+J*AG2In43C?'uT4d8P7%OVmegb4NF!>a'VMac_*dfi&fg^WB/OotqWsgt*K4h6o4Be[J9bq"6XJYYMPPKCr+E%dTb47'gN\JYOp(Wja,/XJsTO^G^L7D12eJ%BWr2\I;k@bKVcqQM)NZgg;d`-qe;qTjL87iSCHO@q?jhF=9nB\$riHol"8:GQU&O\9QolUUZD/WU0*7\Yq"?`c_H@V-Pbr"NO>rp%0!n5H2.<P=`.4Qe8u2FmJuu$C]X9W;e3R:%e3gaLYi7UWF6bJ#et_H%BFg'c:VF%&>A3]oam>\\r@-#sgi9?,`hd0Pgl0'i\Are,%?oE^M&QVC`ZHi;"%c"R'+`06;,\@g6EB&U"1iYq*8o9:[W.m<C^b<+?cGP1^V6OgY^^niNl$5+o:3"G2(n@Bm=Q8/>EM2dnQ8RS:%o"9$8r;Fnu:Do;ME3u5m-j&k1Cd%-i,(<K8\RRZ9=L$irh(b>5mK.W)l*sa'pcL(8%LiAI"M!nQHC**):NGuiV321I0l0@;0LeQ8%AhYQp9FdK3<(C*39sU2MgQ($$,=WmHP'rIK9N]<&0eq$1K99b$D:D[j1"+ETccC/NR%>.1@@*B9ErGk$'HLn9+dT+'ObSD+^6UPq%eq6Y0da3_S;iK+dAcccg=V`a?3kR[?FoVqp/'CGOiQua\FJP<-0B>V\CnuV8jeS#naND&Gku5TS%Q&kgB-hYi0Y-g/k`i7ZZ[Q!>%hW+'/,5sa9iFk>bCm[LR;_+I$qkue!AqQQcQ>L*qq$EqVFP)rsR4`84).4GV?VKoW`hKZ^S@_\i(a_'%8p?[n:9-NZ`Jhe%Lf?<f%Z$:neXek9&*o\pg*_#,bKRq[W&e#RJ:`dJh6SUd/D_[7*k5OU#"W)$d&g(/&'q:b4='o3jY4]S;#[;`RlL>8;q3]_,[Z8m0bE,=O%gtOI$b#3h*[cJ+45O8klr5,n:%.Lp+DS5%.kko$Mj=4:EQRVFN+.tt7Pg+&WYdpS1.H@u9*o])(g>*7W0C59R[pWm>l0]=sM$'L4%";R:S\RO]9bD#kgC%QplDZP.@_7-o;NrE#8h@@0ZWS:K2*TR*HK0-)<NUpN,]5;tbCiJ!HS@Z`Xh;CW:,8N1)4HRV17:U@j4)f,I%^AWYt7?2$2TrP0?[VFkhW$.oF&S`.^\<6YE(b?%fK/]@[5XZ#LEb#W4Cos9E,DM$BOqsgDW1FdU.e%bIb_2*/AI,%Wqu,9:pU@I(%j0?f99\HuseN<Em$S3I`cN7Fp!B-6Mh/NrBR%70k2Vt_V+i7Z\Ht!9)-5(R"RkE();PAK?qeofXLik%"[bd[c4LQ_0PRC^2p/\?>%0WO!X*9fPg.K9<[>9")&IHsIZPp/bD7I:pn3mNVq-fUao/FXP#`l+86HtES;KZUU8[9Q'@-Gl*NhO8uZkr6D#,aesspX>K`:,9_m%X%]^dk%a\WQhEZ`XbX5aC^65]HkM!H(*\a1Y^q=O_@5&N.kq`Xb/d.LgKC7:BlbT;*)$K=8&\Wk=ancV..UPe!.r=j"MdI.6VI]C%6/60-aETc!6g.k'))#$&fP:c`X/T/ZN_K!bFj_5<ZR4JlC;aWafUa?DiG$]/A<J,^L5I)tXgKb,kTDC"FO3EPp5%T+].Q7Jal8:W%h[b2"N>ee^c@"aSQ4^U7O&Rn#LoV&%)HQ-V$UQ8V^):urI_ue&\:@Xo`\L(nD7R\coc0&BSnHJ7`<^BQ5eokF@e1mNG+Y5D'SfFr%%VmG7=h*MB7TQJ?`0s"e=h?g+DC23?b?.6<0kk/EL'(kq4WnTQ)e0u+TC$CpV[L&*iF`FT*ilum5m/l/<qK?7@l\9[#'9\"V&\PS%<\Q3!k/2VR1(-$t#CjQD8]0qX5a\`nM<Q%SE/=2Q-^SVo-d)8X93jMM=kP]'rm)_R==b-Y0MIJlOmPIa<P1Q-EP9T],7_klG%8Nu%(7NgcHb9IO`1;$L@\J^B>b-G"8i3!,oDsDhej6'Fn"@K,@3^G%*.&40g.(jJP6g@g@+IR#ntrb*h"GO:nH9'44eANU9>&1q4(F[p%N!Z'"%!:'2RRUJ`Z+;0)Ct?81Da]K.ps$8!9HL`EOmpg:L2.4[!6c@nM\];%T%]1o]4aA6rdb1SI>4aAT&tZ.@^]:l5N+8YObRhU%^%."+K^OthD(lq@QA1^0/0`]/#&I6$J@26AZaAlnqYKPl)o+pYrRh,X0,5>AbR5Hnn2=s#3=KC.a&@`?C'_uXqN_ud]HCY5306WO%?-RIOZG-frU2a_)Jt4Z<)W&?]Bd>u)S,B5+LR'S"6-"fH)q3;J9!M\_:#jJnf/'*^4L\Y(oep/t'fYg7PRus+:X]Q\Uq%<].EJS'%j6&$qcHR=%\ZU.I:F0QVU+RL`cd:@aY"re]=$iEc-8iQ^/2:90YFS)L#j`,oHJ^$Pp3b'oVE[.7IW<KIreUB@=p%X]2;:<&;Y+^X%,3Wp6%?/1*%B,A%W68FE\p66JId&gn>=?8p;drPe:iVU\Ea+)<KcDB7PLhIEd_162jYj6+od?/i(uSH4(<fnC/7Tlc-SnS&i%d[g%%psG$JNW,`/,EHmcXe.Y;_:_kk77.B5@FlZEPeX!b[B^XO_Su`VJ`=UG-@L'%(0S`1g-8"GA:Dq_I?2#@j)5:OHQ)(X-mN;XjM%&%`V!iFd:D,,1ei?9hSKSWF^[rpBUN:)2B6V+gs[XkLOB&p*Di8YVZf]Lj.2UH+.!!l2%KO>eg=9AL0\Cn[e[YVYZt\j?08t`3//H@%42<&b^p=Ur18)iW8gJfk6H`)KWF!e'XM`Am@/K/?#'G2^l&dP.c'hop"Ab($\SVDFA[H"uB$?kHPnA7aH?*s4j5RZaSaL_leDFIq%d?fN3%e[TjDeSoK0euV8]X3tQhY32ScH3BI)3d.&gP0jCQW1>j[u.dO)"MM5A^Xg@N6T@QW(1<1HCQ5*8TX_O7sPN`rIP[B37:Uj%\1K:%.0p-2_654&\k+JV:=tA@KN,^2C`Id"#LhIJ-ugV-U<,YPFj<Rk,o/%7_Bn'EBJB&<0<QHfdsUlQ2%VTl4_>"KZhA?)'"u7A%TqTN8C]Y@,+_%d1^h.j_`%?VVY]q2UCUe(eW]Xd)K=!@)h$rITa_Ac14GKSBK(k9NO\gu!(Vk-Jg0k&@I:f#8Z"0`$A.IDGl+e&A%YU%_N2U^43Lk1$i\B6N6j7,?('MgESCJ@R/0TO.1-\cVe+Ohh`;0S@7CW)O74O]93Mq,F=aTlW-eB=L0.1pTnQ7332bS9+'P$j-]%9:9#.h?2AJcc-*dH'6-4@cbD=9PA7E;),Vp;%0lh_(gm*o2lOVL;)E(aAu,#%mFk)OIHM9@/K:BF^C;Fj5bJ2o+]^,ffUQ:jeS%$%'+"lHH%TA]3W#p!f=RIE&utW[Nc@BS;icTLBe9JYJM1R&A>d.=YUW62jDV_[U3?mu<\9$nYHVVG6F@^I/I@=ZVI0sIc\fD>$DsaC%X4W>0;[ZU*J`#g)^lui3-0=C!AJ6+agK?[*9KD-qL'Q,f(M^I3.W:(-07@T$.p@W3"(Acml;Jl1eTUVo$g[JPKZSTnGW7JG%t=pr%LU9s=k,*c3itCI\[q\lj>HbiY0?nL9^7t.U7C]th(YpgCiPJ^]\$urHVrhM4b_"W>`9h,5KQ=#7GTRU&G+oR-m#"]\rM,BZr9,G+%X]a!sqCF(r9C-a7%`pD>l?Fi<Pk`-eVXos"4c(c9s.anmmi5V/*iGZ'c0a<J,&[$@QT(eY_#3O`Ri'9`ZSkMd"m<gF^?)kSdiq>3%gO5$Lh\PBqepH4aB"c6jOtJ@@4BTIDFZ_8/>,Q'8@H9q>7s%qUP`/p.6VeWW>G!H;ZbhjZ06pSXG^VFs4)s+%EfXP)MHQVgI=*b]%"]-dHDBS/Loa;ZtjBQW0B#W07)S'uUQ/m`)nSImRZe7XC^VGU<lk#/!eS4!K7t"RN^ZC0U1bBiiRkF&p(9I&S[.'J;:CC1b'uX$8%Hlib-kMe?D@sG+aXi(5"Y&Mq3PVVZ"Y=9@=P=/mV'H&Ba=8,Uq`'8:aaSbJMXUaeV^YTg;,(T2C">G4D^h#Rf'c'u(9(3#m*"\^7%i#RUe!Y\mLqC9CUASIaSi-)2ZXA)$g2+rSu]($2`pK's[$ss=t.jQH(pqW=SGl:]5<FScl'3XE8Z"L)(mE;PC`^jl_=::G7HD!kL%"l,SKTg+g_k+le+<J2#M%"l2B2.SU4/)kg770_@&]UeS+:%!c[n+<HJ)fdYrFkr-n/u>Nq=4-5mr:e*B&738!(a`$;q<O%!*LJ9N%"7M'q0.<[R_^mNSmQDP&eC8h<hF2FP9+IGBq8?CgnrR#%YSCK`@0@gEA+5UirroI3jf,T9*5!p(ef6YT..Nc.)gj#5??1>G3e9%s%b9HoWqWp26Gd%ep4qbNjjLiBT-9bkMRuGT@OXKjlf.X,OUk:0"G]W-cV=%[O4lY5?h&2H-QO+^UTc(Q[S6WdQr3cW5"Z$2C"GjK;%%.e'uC\\cHccWYbW:fL'*ec;a@A$tk[so&D3g.'ZoAC:[5PQMnP/i/uOT9=4`ZRhhQ72[W.oq3K@N'b-0,N[BKK]Sk-GhA-;`40d%q2lH"@<oG/PS1aH@p40hK0Cd&WTgk"D-`]64;]#:oXug!_Cu?tnWpcdU?YtDH45\jj#QOZ"6gE$,?*`mPuA#/U?H2o>7.U_NoRJm%pV#]F[I*`eA'lfDf)3>>AgsbO^ik9So(gJGa(X+GLkTi6qG94ZfN<.q>WoC=(f^1p/N`?rWN^J?%#s6@$Pt#pm`G8XY3C-+#RQA?%O!!8LnKfG:<5L8SZ>E27*XVFi#!Dr@%=u@7F\af4dA;WBKOka8#'Z)_^'RNR3YIK=GI]cC32K(2M'\+qWNlrg=B;E7N'G:I#G539%->K0?UXrJLCjSla:qbJ08Q8HbrFK#=]OsU/A*!LZ9Af=F!_TGLh0JZK1M)I8C4"jdLO>P#L9ldO9c47MLI^7N^uO<p\BY#-`CN^^%g,YS[S[OV/Vid+BXq,Jq`R;hC,,\&Zg1_iTZndIUMkOWSlDMQ?3K9q1Dfb%Y]gRq::7]>M^fm85`\i;b9.,.2#Wi?Rr?U.UVqgMr%;*!Q<;fa69Pr$ErR9+!.li=osB=8ASFMPL+p/>`F>Nb\nR'G[1^qI6LQJpe4H-UXJB8/!I,-Ag8dqE:+;k<:f5%7NE!M1[\9NWVC%BAAs"N4]??,->ICBs\(f\N=#ZXin%&W<HjolO@Zl4[9TiP1h9Qqf/fMcNCWhRdg!.DGX]#3:3uQ_ZNUtS\_N!/Ca!Fl10"1SRG.l%^6r?<a0<QT"0CaqbELjB[4GZ/0k',l1;I#&pl;`:+3.[)U[LbFVD1cb_D``c?AY7RG\kfl\%DBQjUhf0=K^(Q9!]hjd``chnJG])%o$%tb/URQWGMZ,hK117Z'&oFCJ.!nY1-"jSFVLi?nemZ?'H"J.B1thVZW)nVjPQ<bfbgd]fnjnD@*3Jn/\XGhO+8n.(t47fFb.0r%O`1o!*H)u)K/XK`/HAFZ;+'m4A'K&TXI'MKmlbIaJq6<9,T)P(N3Q9Z">Ak,4oFSrjUG^u:T<6fJVZ%*Ye%t6`04uW\UMCXio2^"%[Uc;KF]%U#*fTf"?u[biK&Oeg(b:;4n5=_b,@<]\F>)SoLf*9<3BRj\G%)#GrUf=qLlB:TOVmaVA-O*2,a84]PcK*Q;T[Dj@8'?l%RDCK`(`tQ>B`PZOQ)5$RWBB&rZ=%EVlqumje$1H2`l,`V),0TJdhVu-2&6ZaYPn*b((N#]0u.jb%@+1L*7">rOdX%!H4d-7J7n-T%a$@H,aic*$%/Y0CoCuo2$V,g6LA97@HZ3+H*,6bgESm(.#+&Dg)@9]Bp^WSoUbf*:gF.LU_O/jKM8B#kggeqGq!?f/$Qb1g],n\=%P>bF2UC)+E4g.QEq8BM(7&5%$k*\8Za]".tiu+4dEuNdq2_<q+@PGk,!8]HmCaNN'i/>oWZ!YQcd.i3Z8\ghAV2$)/2kXq=eRd=\%8h(RC[bfH6dA*ERM`Mai4d6g@W6)CN[p5\hk+c;\nid-(c<H`@9?f449.(U@F9hD`Xfc"aGt34)=$K(]Vb@<`FsY>o;k`l$lCi!]%:7\`Wm;&=T_49W*ltWlmbaG`[S;GX]1GbCY6R8SKPc%9HWE_K()FHTXiOYG.ZNRf4fQ[MaX!P?bRQ/62K&Lj-3hP&R!Ga4W/b"]\%hh=U[Bh2\efd<-8gQAON#_I]W7)I!@)6)S/Wn^NnR0fpK-kjKX1Xp<-l.W>OV@fRL9-ZpLmV0%G/i-oV0uitkSscjr3G^JE9RQuO%Nf".u]$f&p3lhGqTMFF;H;*/7<Lf2"KG-8`'0a:D2#L*sKT==)jb3I99n7Kh/W9*1:.-&?hiHWQ;F;8h8/I]Ue4%HFV0BET'8DDV%Ya4W"]StN0l66A[Ul]['!94P^_WLhq(Eji(`k,gE,/e9?I&KUWJ5a3.'.uVae6PSS#]E*"]7oAkFIZN0#^$_G5j@5?Zn0'_LdL_P%0#D=/BQXom)EYP:;:/:Z7;*.(/ja?QE"TB5=*>0Nc6hKo[,s:`TljK4#cG[=WK3/>4i9ebWH<Od(/_t2:8[fX[(KJ8%%kn3q%"2I%-soYE*)fTVY^QS<&[TNXZ3Q1'B,-9:N>ZBfZ^lpR`oT=LRBXmp`c1;9qZrV+lsMSc;eES[7a=UA)`]F\VpW)FaFJp#Y_]_rd+'W[%GKKcSR[,`qC4,"_Gjq*hF2eOlAu6ja(fs[BB#;VgAF.ui>9nq,a$nJnqe4oZpU#15q95"kU2,F1,T3A[/CLd]L,)=V'#STdRGQ2W%CJkTj=OIU0\L5dn\]BG(1ST<Yq]1M)KoQ?QI?-!'rq^2b`0Di5@BbAL]WV0K0o>!7E(sJ[CoIQW#18?YEM"i7(gk_H\]0h1#q6&V%i'i\-e">_9&D)5gC8IF%Ad/o3Y2;?)Cf0+ko@f,g26=$c]jM\gDJ?QS+^F.fB;kT.(=(t_4e:XW+IKFNA!DJZMB,j>;H"Q\=Z*V+%Oau\\jr#HTaFUra[cA!](X/HdLO^J;k1@-:/WDa\oam3$Y/DWdLOa0>,M3M-5?"CG^tj+DGpHSRB/"3;AHlWM[r\,g>fsj!Ujh"n%?@DGRYNI/8\Eu8XcWG!-@q&PP#%P_b=t<g[d5+hMkS[>GH4$V(/jh5t/\H6HrN`Kr/_4TgaStU$.T^(]/mK/_?:j'=ZJT\,#Y1,[%aL+0,UDj6#RBXmO`h[KE%,4`mHCJ]QWLp2/(p0F1I&kZDe2RTJ(Q3g!SdjU5p"(i(`)jC6]Ph1Uj;&9@Dea<Z`d_2q':*@cR+0E<%_'h(,hI`3lC?KkX]^d*EY=?jVClL8jR0dXj7kB7p;OLtH<MnABF#Emg97&AZrfQA>_Qq0USU-#H)eP3P-.B/CD"aP9C0@#+Z^`V*%YcLW_S!3i0P#fWJ$RU804`"mfB+;>P'8C?5\AScW[e7ILl(4)TlVlk)"gb%VWC$tN8YNTcAXX]=gt<XcDX"\04;-E/VY,6,FBKJf%JeIMd9l%eKl%Dm^)?NqI;d+5Jb8NfoAE,=-5S<)o[&dDe[?>)1AkC>^/Sf,+[B-L$_QlX8,/?;llVm^@OI!:3^00%<?"$m26R;j8%L@qeO8_'b8SYQ4ODl1^qBkALW_N4-!`BXDZ:,kUlZUr(o`-:p\*I]n-cZ*?-3[Zs?_JN[)jM-V4E2>=u0PlEd:gpu;BK!/H:\)-f%dL>$?O#[\Do"bA[%1Jt%i02GqcFe=VCoYuS!)k`@#GUcB=L/l'KXM(ol[/=cJn];f1lPZ2(;AG\-tFnj6f2!&)r[RLbXOQZ_o1A#%i9T]A-QD%&P9tDu)rWSQ^2o(3XVbu&*hO=?`rkAT+EISR^/-kaQaaf_DV8qR:Ogu8*0Fo)LY_=cKSGL6b/+ZF`W)-0g&@kmX[DRj%6U$qD;1ejr:2CFsQA*/B=F`2[KgA/=U.LYB2=\M92pFI@*XlD=27!Za=AJ!C]11[=QZ1.q_7C7QHE%X;"5ODZV_Z&T-Xcs^j5Y)r%I^(2T<Z_ttKU?!f:L\c96c'qU9PPk5K,<$t"[3iWo/tqW&F\-o;Y$6,2>j``,N4t:0c0HS*!V&0_(@Bl61F=1.l7*>B9L@794Z_r%:8+b@,Ec&VDLni8/MQdS5h9sgSZPcKcH'iRPrR^I3u5nP0XZKfW>-t@e]B'@AtGtBr$*VHH#O]FacrVFE[@#B<q_S0d\/0;Z2W9l%)e:L,`qn1iC9r=J!8#HHOE]?2M'`U".YuDCoGJ+2h]k[O[PbQQ)@b<2``nmQlH1jk>GE&LaqG2M'UPfQ@%"Us=?0Z6[_1c8$2>Yq%5aXFE9*FaI'4Y`p#4)iV'`1%\-rhs!.f7ABAo\]gF&jb*K1K2r(#G503PdS,<gICNPhMMgTjXZR9r,2*jV^3<oq4!b#[]pe/#V@4%;8b`4pC7=+qG8-FJ<&;tF-_.58Uh7O</0q'A"N&rn;o)]T01@8h_nugUbP6ni(ZV;]@S;<I-`iS8LuNXo0/*gI$&e"^rXt]0iq([%K(<<W&I#B1FHKr>hd$83GT0#a,)mSNK\"JkfFBGnZghfC(A1On:2OHV?b:M#AAkO]7^%<^UNM@^knVN[3GpT(0S(q07V`Xq.KThC%C3g'c=eOME_uJRMW+bBL7FN+$+nmk/jCS'[J\6`"nKT!]V+R]\@OdC#(2%nF3G^W(0eWbHfc'>$6D$cCB+T^7qa=(a7B^sd"k+<,%*]J?hVWap*)2*@&@tr'j7j]>R"^IjYhq[.(T]=gL_GlLRXeM@gaE41&$b'RORm(K'0;:DeDQ8\MMRWSl)L6:@^s(Qo2<I:jV;@g^%@h?/Y=BZ?gn!Q2ro2/u,.(W*??9D/UO7:/7ag:%S2Dmc6$k;naH%C*%Eb<sJBbDZP2N_#nb>[r_05[D6Wk@sGCQgP<o-Hkt,fUmA%<L8?mgf9\fRJCf=*#=%JI$_BJJs<.R#9d>a?sT7lnQ&GEI*BrJ8gAYZf'6R:CNU1*<L2Rj6Q07"J0,a_q:`bKp*VFd7YE*J+ZlnQ%076p;ibN\E,t606R"cgC)3Q?[i6Hh5.OJth@#T;*@RLf%Ua^oWl.pu$c'`k_c]"-rFob[P^'J\C?C.KaNR:;NCK/VjY;[5/-\EG`%PQa?*i!g!Z2N'_,2;&Y<2LAo5I\YY.dO%c#Wn!\5VH1;bDRF*];^a?/IVOH:pU67<Nj#q_>.U3j#\<$+GY=f_Y%kBm-t[fM9Y5r9%*0;Fhq#[@'WS3?NU[P#7ppNU&J99tA]YLO>cGW6a7Rj52Zr(Ua`^mRJ`CRIY>8jQ/aUDu14W$'4'1:53acnHs8$6U<HQTf_m_*:J%XI%I\cWG#X:G&GUDi$8CRZ5eV1UC\#L(fV^p5uj@fBg;Mftj%f#@lZ524:2lOfN2>Pftu=R*b3<:p[WUfj%1Z`lbf'G<@KTHID0Z%aQ(Xe!"Ufi:uDIFZP0%$SJZ*NOpFKN=fQ'eH%\.6)e!5B!4G$WZNH\/)\\Y\N+eoA1bH*t?*h4HY1[-!A\;>!1L\i#`2I8qL74ZD%;G0rkVV0NjU"S"TVV0PDVV)9VAq+L!"[2H#GM*;\L"W*77-=`k'rg6:P2#j8E:ag7G6pH&kFDiebafBrG2D9tf$8?V9qB3n6^pVg%`8L7XP,I:iUWIj4`pgBa^<u.Yn<0kTdTj$tpM34enRZ>el!93IhW*dbV-S`MHe2=00E?*)_)MAT)?F*qF:a%l]#-f21OcR@EKC9@%6$_LaO>5okWE[URgpMceFPoY_jM'k`m,>ZfQbIq5AFm&QIbp&93koC9[PBKiHcW$u1,hFhV86;hL^qI2U+P#2`peo$O>)aZ.c(=r%*`]:[@elJ.GiBN;@Pp@qNKmK94(H\,cakCJ0*94YA]#nijW^:Uiq73h-`m$V1GL</]D_1R[@9!Kn(&pH+/3!$)1VPZKI%]m[Y/Kg%(_]7\(b)jbZq=J]DZ#!k"%/R$VsWr3c^TcRGL=UGm6Aakm6Bm6m6BmJm15_(s+GOOFN.NI0q:.,VDOuZC/+-XZmH$?Ck'6:qZFUf%ro<gYrJcUg4`@e/Gi!9:nU0!grI!8s+Hl+&Qu2kV9b#CGm@P4mKCa!XH_/VJc\Ln;M)X02fPQ+gAG^jk%(0bT.gLVamZP/?`.kcp%$4L6=2J*AC@bk9e)2h-;1#eA=`)Z.LOm]'1Vn/]!bkm9)BRotRBpQK)U`pJJ9?IQb8L9*D.>Gpql7OML-%BZM8_nFWdra`8)L)L[%=*$C\FaLC.`$7-#55j+2chKoPDXNX-lu!PNe0F&V`8bD!boqf-Glc1i]M!Bs'Uju!BXg9aYNa5LV`uY@pnNAO9FpEL6A659<S\`#%L,ZEg*sKl^XSsU^ir1+sUBWo<^"aVc&?$mI87rSc[:DHuGLRIMRd@f)b-?u=UDue9)5HUJ88-G8F>b9QoO,2(:l=>;8f^KAPRdlf%7X^:)N0QJn^-DDeg\Umcs5eb/c/8Qr&-)%Ss!=YZqa[/I4UjGmj:*T1HJRi"3J71d3CJ6ETSq9[GWt]s\Z]qs'_uRS8XNLA5@SmT%k(uOC']HgB%#C9PP@-B@:rZ/%'"jGNp#$iIiu\"/?E0JM?8qhgQfBS:_:DJmdH&Jm/to9!eacNVFn8sBa\@BGaMSiFKh8LHIaj":%s,1-*O+-,!$Yqdj=(\Sk@YUXPS^CIs$.^Vm8+^#6,ja4]%8druot98I2eBW9.`"dR;3/2tH,"X\Pju?<2rG*kRl[=HmLlm.4:gm>%0:DL&Q/)5\E:fVS<XP$uV>R7slZW$PqlSc0UU01S=5Z+l[9AJ+N])#L>MUQL^M+aghi?J)oj;O?S\=1qLMeO#rMC4?h`g=fa4n7m%.?:rK]G]`c"hpL-&jGk@SMZ\K(GVqN[tP&ZjiF!<(ln.K^Tb8d,QtP<N3Q:5Ch0C?W(5F\W1/h`AUH>6<6(SK@TYCL?mW9EU2Hi*%?8ig1<k#kF2e/p'2I`eQ+8*]9)0L"[;T:RhV)n<t'>p!$"L"<WOm8e^jhEJi[+5P"m:VC.c*Z3ip/-m[n`FnLO#LWt]Z&JC"oC9'%7V;dh?uq1d&T`eg(AifF-C]u'a*_HWbp=^Qk)tdOTPf`bjjcJ[+;-$GY41B.D$ch-'W8L[(n4/tK$>!q8'E8RhU1p:9Y?(F";m.M%Pjq(r!&*A&/`(4X]k0..?F-)'Y8N@,1WFac,\Wfp*o:[50`-EdgB8@R/<$i#/DGkM)*_kuCR2u/[CD2RlOb(OL6"GqSbh^:#9[!_%ihPJWo/5klo,h'VR=N)=KeZU6m;sl=7kHPA&hY5oRbu<_J&K=91?D97e2.aob(1)I>!*%ED[#+5OO5*Kpbm-SR==Z-1S3,@c'5.-%IR":M"q>MBod#:.Cp2'eqCWElps8E#WBf<ajO\sJi-!(Q"p*AJ(@hM[Gn7`Z7rEmk14rf_0(D9H-@;&9jl.VALG?H@=IMniP/`ql%70[:o5GJ+g`9mSbqi^9E_=.Zjh<$8$-Jl18nr)1)`k<0(ba<t-8r<m!ph6O_*-09]R4:r8;s*bP41aT>pf&\+8-U^Tp\Z%eou>pr%CfC2<e/;*?s5isq(iH;r!3WG^q%5.'68A5/D>3[\FdLRTLP3I/LG;s<'+e`&Ws(tQCljEsDl2*E9L!_S.GIq\ipMTZf=:3i\,+Pr%4Vr2s.m_Jbmls;DI]j@qnO!VL0$cs'ZfTp)l]&aXfIh2;.&Z7=rHeLje!cia(jHD%G&(g!EB5;V;X6K%rQsm/_H\+U,%T[i3_[P^%<2R9IVu*,/;)VmLJhMiqo9,ZUe6:9/EGi>2KW1#hT]b:!R:gG=hF'OpHUKY9rXk^$bj1U5L/N6.Y.A:on-uIkniR:DjnQnukjW`E%>1?dp<.U(u9c0a[m+F7FJM1t+%qX2.A.UqC3\HBTif:O`l`G5!:N6F+WPsFTA7h&"?R?j8RBXV3,efatEMH#f0LIO^65Vn]aBpVr%"LGC]h3K_X.HD]joX$*!.;LPr;n`<ioi7W)R(F061S`42FSQ))QNg-]=E/Q>P4!i:EO#^pN0;K>o,Q$kUQhcbB#.;5@(]tPI#9g=%+*J`1hS0qhI"u;f?BNd,\kWgC*VbeNs+8]hpNA5M[;29L#Wq'>1i#3Q,!M]TnI)NCAmbN#-pIhY[c_Dt)))77?h%sG"NDC86eg<3%Ic(q.<j'#&cWfnY;eqET"22CG?YkS0B++8!Jd;&^=SNnpNj#FQk#h]EZ#=#3m_C&2k^rUM3US<U@2?L/_W-Zn&To$5@@69qjZ,Fi%GoJd?-k@qJ,0C9p&GaK2Ouq"01gK)A``^u@j9b%(_s:qqk(aFlrP9>"kcj_Y+q<D1kquuUB!.@a##@ot4%Ej1_cPjBrgJ'Lr)t'R%:X7;%]_p'[mD"1ch_&jSJXHa-@n=V^n]D853q;^jW*U-F4GXWXT0r%S7d[IXiuHLr+:p*I%'6iq#%,Q,-2@lPLP",U\98WPQN:<'%XqA'Cr.Rf#r;N$;erM/oZ0(TL9Ae3;3:bG@Pu9]Y!B8Bn1RN13+Kb3$AA[`T>=$8Fn\i-sEt(uaB+>+c0Qm8k6)s^g#_El"SnmYu%)*C_L#'_tE);r&aKF>M108AP$2>:uBdM"+ZHV/@=hM%F:O/bY;@Ua7I,Ht"]Tl2\"f%r:(9(pC9bAK)K4Z(c(%nqR/JYPBDi'buA%^kR/5)[Bt.:kg[X;m4D9?h0&`&Uh@SFNO%(0D],C1(:!^jmd>nb>LS'<St)GRr2^+T5u:F`>YRV6jCt-d9XS,4O(ZIC^7,e_SBX#%Hs&;P.GHCIp.MiOc^stRq53SMEAuK+k`4STXbl'iTh8!ebdCQl`2!lH^HM-3P@7TJY]TXnMREuRniL+mr0S$@%f7UJR]UlW49q.#%j"GpqVZb!la8rHW;R2b*Gh/@s8of[!haP3Q3=W,;gn4YnWOWLdJ(q@JJ^[P&::OidO-kEOj^GbJH7cnIdFuK#`V_X,ENH(!b6]ud%JXaq\_@GMX-M*>f\dmA%93RCS`,j"DEmTT/I4%gfB#_O-0p+28WF3iA0#!6s2.4oS4f4V>&7)YM>]]cP<8bB8(fAF./])h8=_/nr%F[N7hr*6H)U?gDuXUMd-(X>U2J<(E`9Tuoh?d*qop$rsJ(&C.E45^(t0>IPChgYJ$hgYI?^\N*6n,N6Vrql/6r-s4mo3_IH[m0fL%5Q1*orq'Rtr5\j5qU;(OrPQDJnc/OOq]Gk&TDnXns7idIqVV$#huDZ]J,5L]rT?EFl2/6nO+7/D?u?VSq&fV*fDkAZ^AWP,\9AP~>%AI9_PrivateDataEnd