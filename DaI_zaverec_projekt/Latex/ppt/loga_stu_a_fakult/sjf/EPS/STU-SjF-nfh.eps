%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: STU-SjF-nfh.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Juraj Blako
%%CreationDate: 9.10.2012
%%BoundingBox: 0 0 191 24
%%HiResBoundingBox: 0 0 190.3042 23.3829
%%CropBox: 0 0 190.3042 23.3829
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 16 8%%BeginData: 3962 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FFA8FD04FFAFAFFD09FFA8FD07FFA8A8FFFFFFA8A8FFA8FFFFFFA8%FFA8FD14FFA8A8FFA8FFFFA8A8FFA8FFA8FF84FFA8FFA8FFA8A8FFFFA8FF%FF7D7DFFFFFFA8A8A8FF7DFFFFA8A8FFA8FFFFFFA8FD05FF7DFFA8FFA8FF%52A8FD09FF2752A8FFFFA82759FFFFFF7D27A8FFFFA85227FD05FF2727F8%7DFFFF2727F852A8FF5227FF7DF8FD12FFA8F8A8A852FFA82752A87D527D%8427A8A82753AF5227FF7D2784FF277DFFFFFF7D27FF5927A8A827A8A852%52FF522752FF52FF287DA85227AFA8277DFD09FF5952FFFFFFA8527DFFFF%FF7D52A8FFFFFF5259FD05FF2727FD05FF2752FFFFFF7DF8FF5327FD13FF%527DFF52FF7D7D52FF7D27A8A827FFA82727FFA827FF7DF8FFA82727FFFF%FFA853FF7D27FF527DFFA82752FF7DF852FF52A852A8FF2727FFA8F852FD%21FF52F827A9FFFFFF2852FFFFFF5227FF7DF8FD13FF52A8A8527DFF527D%FFA852FFA8527DA87D7DA8A852FF847D7DA87D7DA8FFFFA87DFF7D52A8FF%52A8A8A87DFF7D7D7DFF7DFF7D7DA87D52A87D7D59FD22FFA82752FFFFFF%2752FFFFFF7DF8FF7D27FD6FFF2852F87DFFFFFF2727FFFFFF7DF8272752%FD21FFA8FFA8FFFFFFA8FFFFFFA8FD09FFA8FFFFFFA8FFFFFFA8FD05FFA8%FFA8FFFFFFA8FD07FFA8FFFFFFA8FFA87DFD04FF7DA8FFFFFFA87DA9FFFF%FF7E84FD05FF7D527DFD04FF7DA8FD04FF7D527DFD13FFA87D7DFF7D7D7D%FF52FF527DA87D27FF7D277DFF5252FF7DFF5252FF7D52FFFFFF7D7D7DFF%FFFF5227FF7D277DFF7D52FF7D27FF52FF7D52FF7D7DFFA828AFA8597DFF%7D522728A8FFFFA8F852FFFFFF53F884FFFFA82827FD09FFA8FD1EFFA852%52A87DF853A852FF5227FF5252FF7DF87DFF527DFF52FF537DFF27F8FFFF%FF7D2752FFFFFF2727A87EF87DFF52F8FF7D7DFF52A8A827FF527DFF7DF8%7DA82752FF527DA87DFD04FF7DA8FFFFFFA87DAFFFFFFF7D84FD06FF527D%FD07FF847D7DFD16FFA85228FF7D7D7DFF52FF7D52FFA852FF7D527DFF27%A8FF7DFFA87DFF527DA8FFFFFF28A8FFFFFF5227FFA8527DFF527DA8A87D%FF7DFFA827A8A852FF7D7D59FF52A8FF7D52FD18FF277D53FFFFFF7DFFFF%A8277D7DFD17FFA8FD13FFA8FD17FFA8FD09FFA8FD25FF277DFFFFFFA87D%FFFFA852FD75FFA82727FFFFA827A8FFA8F8527DFD17FF52FFA87DA8A852%A8A87D7DFFA8A87DA8A8A87DFF52A8A87D7DFF7DA8FFFFA87DA8FF7DFFA8%7DA8A87DA8A8A8FFA852FFA87DFD12FF7D52FFFFFFA8537DFFFFFF7D52A8%FFFFFF537DFD07FF527DFFFF52A8FFA852FD18FFA852A8FF7DFF7D27A8A8%7D7DFFA8A8A8287DA8A8A87DFFFF27FFFF527DFFFFFF52FFA827A8A827FF%7D7D7DFF52FFA87DFF7E27FD12FF272EA8FFFFA8277DFFFFFF7D2784FFFF%AF5227FD05FF525227A8FFFF28A8FFA827FD19FF527DFF7DFFA827A8A87D%52FF7DA8A87D52A87DFF52FFA852A8A8527DFFFFA87DFF7D27A8A852A8A8%2852A852A8FF7DFF52527DFD12FFA8FD04FFA8A8FFFFFFA8A9FD04FFA8AF%FD05FFA87DFFFFFFA827A8FFFFA8FD18FFAFA8FFFFA8FFFFFFA8FFA8FFFF%A8FD07FFA8A8FFA8FFAFFFA8FFFFFFA8FFA8FFA8FFA8FFFFA8A8FFA8A8FD%34FF7D52FD60FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                             
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:ModifyDate>2012-10-09T17:03:52+02:00</xmp:ModifyDate>
         <xmp:CreateDate>2012-10-09T17:03:52+02:00</xmp:CreateDate>
         <xmp:MetadataDate>2012-10-09T17:03:52+02:00</xmp:MetadataDate>
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>32</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAIAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7l+W1l+ZNtLqp85XKTxv&#xA;IpsQGjY1+Lmy+mBxQ/DRT9wyRpjG+rXnex/MmfzJosvlm5SLSI2H6RQsi786sZAw5MpTYBanriKU&#xA;2yfzEmsyaFfpojpHqzQuLJ3pxEtPh61FfCu1euAJKU/l1becrby4sXm6UTaoJXKnkjsISBxV2T4W&#xA;avL6KYmljaXNZfmV/wArOF0tyn+DfToYapSnpUK8P7zn62/Lw+7DtSN7ZxkWT5j/ACt8++ePM3n9&#xA;4PM3np/L+rW+oemfKElkgjniRqvbxyvRUb9gVBk7g13wq9U/PIeb7Hyld+Y/L3mObRjo1tJNNaRQ&#xA;QyrcsWXjyeQEpx36DvgVV/JeDzdceVrLzD5g8yTa3+mrO3uYrSWCGFbZnUswV4gC9eQG47YqxDy3&#xA;5/8AN91p/wCdMtxqTyP5Zl1FdCYpGPqwgW6MYWi/Fx9JftV6YVZ7+S+u6tr35YaDq+r3Bu9Ru4pG&#xA;uLhgqlys0ig0UKv2VHQYFZrirsVdiqld8/qs3BzG/BuMip6jKaGjBADyI8O+KvE9D8y+eIfywuLy&#xA;5n1i61Oy161hnv5rWUSXFkLmAzS21t9XiuFhaFm5KUZgeQqexVFfml5p83ve2t35an1iCxn0h7jQ&#xA;0sbCVvrGrfWVVIbuOWBnjT0v2ZQg6/LFU48wXX5gx/mfpGk2j3P6C1kWd3d3Ea1gtP0f6z3cHqUP&#xA;EXVIV3O9TSmKoHRdW83P5488QXlzqAitlvP0FbFLn0SiwxGNo/8ARfq5o5biRc8yduFPixVLvIGu&#xA;/mheeV/MyeZJ73TtQtNC01tP1FrSSY+vcRXMzTxwIjNJKiPEkqqCQ69BiqjqnmP8zh+T3ly+0WHV&#xA;j5ke+mh1D61F6l00K2t5zlCGOCqBkR4Q6KSQimtd1UT+aOr+Zufkn9BWGo6xp2j/AFbXNUle2LyS&#xA;pDJHHGJ1cK3q8DNIVVS6uFPEdQq9b161lvNEu4be5ntJXiJiuLUhZlZfiHAlW60p0wK8e1y98/2H&#xA;5R+T7yK/1V9a1C+tZdclcTG4jiltJmljYW9tczRxrKqdIWIOFWSarqWsr538uW9xf6xbeWpNNtpL&#xA;SeytZJfrOotOA8d+4t5HjUw8Seax9WNVIwKhrfVfzGP5qwWkiy/4UOt3kRl/eVMK6LHIiMvpemIB&#xA;cGqP6m8lVptiqW/lxrX5pT/mRLZeYFuj5eP6Yms55I2VCq3qQ28UhKj4o1jZo990fCqwa353PlH8&#xA;v5davNZsLW7guW8y3+n2jTX63KIPqiSRrBcSKrnny/dUqBXFUy1HV/O8f50Q2DyahH5KP1Gs0MLM&#xA;humhuOETuF+GGRxWZqbMqA8Q2KqPlXU/M835561e32mXceg6hFNpmlXcsAEafo30zVZCTIqTP6zf&#xA;Eqq3wcS3ZV6/gV2KsV8kfmPoHnGS+j0tJ0awZQ/roF5o5YK68WbY8TsaHCRSAba81fmToHlnWtO0&#xA;i/Sd7nUSCrRIGSNGfgrOSynduygn8KojamVJ9resWejaRd6recvqtnG0soQcmIXso23OABSUu8l+&#xA;ctL83aN+ldOSWKJZWgkinAV1dACR8JYEUYHY4SKUG0G35kaAvnkeTSk/6TIH77gPR5mL1gleXKvD&#xA;vxpjWy8W9MqNaGnXtXAl4Tffk1+afmjztoWtectU0UWehXK3KT6ZDIt5MscqyokheJP5Ao+MhetC&#xA;cKvUvzI8tX3mfyLrWgWEkUV5qNs0MEk5ZYgxII5lFdgNuynAqt5C0C78veStE0O8eOS702yhtp5I&#xA;SxjLxoFYoWCsVqNqgYq8n1j8mPzQtNW85xeU9Y0pNA88SyyamuoLN9ZiFz6nrLF6ccidJ3AJPSnQ&#xA;74VeseQ/KkPlLyfpXlyKY3C6bAImnI483JLO3GpoC7EgVwKn2KuxV2Kqd1N6FtNPx5ekjPxrSvEV&#xA;pXFXnel/nGL/AEHVNV/RHp/o3y3B5l9H6xy5+vHPJ9W5ekOPH6tTnQ1r9nbdVZYfnZZah5T1XzHa&#xA;aYzw6Zd6dZGBpuLtJqAtRIH/AHZ4NbyXjIy0NSnauyqY3P5nmHz/AP4L/RnLUHu7eOCT16B7Oa0l&#xA;uZLviY+kT27RFK7mnxCtMVQdh+bV3dWvna9bR4ks/J41EDjdu01w+nNIKMht1SISiIkEO9PDFVPQ&#xA;PzhuNa/LnU/OUOkRWq6ZLIjxXV6UtpI4QplkjuRAzEDkVA9HdhTFU80XzxqN4fK0Wo6M2mXnmO2u&#xA;bqS1ef1Gtfq6o6o37tOZdZBX7PHpiqU6f+amqf4b81a7reiQ6fb+WJLi1McF8bpri6th8US1t4OI&#xA;ZmRUbepPQYqyfyL5rg82eVNP1+KH6t9cRvWteYk9KaN2jlj5gLy4SIRWgriqSaJ+Zp1TzpN5UXTD&#xA;FfWdxqEd+xmr6NvZiA29xx9MV+tC7Titfh+LdqYqofmv+aw/L9dKY6Z+khqTTgj1/QKegqH4f3cv&#xA;JmMlBXiPE4qpebPzdfy/538v+V/0K90+upA/qLOqzRGeYxFfRCOr+mFLMfVG334qmFz+Z2nwfmjb&#xA;eQjbEy3Fp651D1AFW4KvIlt6fGpJhiZ+XLbYU3xVLbf80tcXQ/OWr6h5fgt4fKLXEDJFfmZrie2h&#xA;ScpvbR+mpSVfi+Leu2Kpne/mFc23njQ/LH6K4w61aNdx6nNcCKMsm7wQp6berIi/EV5Kab4qmHl/&#xA;zpa6npWtancwixtdEv8AULGd2fmCmnStG8xPFOPIJy4708TirFtB/Ou31byHbebjpf1eEanDpur2&#xA;rXAb6kk8yRidpBGOYVJ43K0XZuu26q68/N6+Ty75a1a20WJpPM0k4tYLm8eFEhjDPDIZI7adj60S&#xA;q3Hh8PKle+Ks903RNH0v1v0bZQWf1h/Un9CNY+beLcQK42inXuiaPf3NtdXtjBc3Nm3O1mljV3jb&#xA;rVGYEjff542tIqeCGeF4J41lhlUpJE4DKysKFWU7EEYpUNN0vTdLtFs9OtYrO1QkrDCgRATuTRab&#xA;nFaWfoTR/wBK/pb6lB+lOHp/XfTX1uNKU505dNsbRSNxS8N/Kq/ubnzQlp508y65Y/mDDNcPdeXL&#xA;mf0tMuYwziM2kJQxyRiKjfu25VBO64VejeYvNS6f528t6K8l5bpqTzBfTt4pLS5f0ZCIpJmb1I2j&#xA;9Pn8C77fQFYb+b2upZee/LFhqGuaro2iXVnfyXTaQZzK8sRi9KqW8c7kDkf2MKvRvKEFpD5dsjZ3&#xA;97qdrMnrw3upM7XTpKeY9T1FjcUBoFZQRgVOMVdirsVdiq2X0vSf1ePpcT6nKnHjTetdqUxV55oW&#xA;j/knpHlnVLjSDZReXtbrY6lcJcSSwyqyMPQEjO/BeErUVCAK7YqmEun/AJU23LRJTZW58zXEGo/U&#xA;mmMbXdxyWSCVQWBLM9uCKfaI774qj1/wBdeehdrLZy+crW2eyFJQblYARK8fAN+z6oY7VAbwOKod&#xA;PL35d241SMekkfmC4uLDUoGupvSnurzk9xF6bScFlkqa8AGxVDL5c/Le7sz5dt7FJ9L11Tq8scMz&#xA;i3f6u0QFxUSKQS/p7p1O58cVR2l3P5fyWthqdjfQXFvpTvaWN81y8wR7zhyT1ZHbmZKrTkT2pirU&#xA;+lfl3caTHbTi1k0vzPfJfRRvKTFfXblblGWrUk5eiHCj4TTpiqYW1l5V8n6TO0CQaRpTXBmlFeEI&#xA;mupAvwgmi85HACrtU7DFVCztfJNt5k/TNt9Wj1/zJCAs/Ok13DaIv2FJ3EaFa0HSlcVQXmjSfy58&#xA;2Six1429/NpyXLmD13Roo14pclxE6Hj9kNy2xVT1HSvyv1KSLVLwWcr6XBZehdCZk+rwtKJbEqyM&#xA;vDk9CjDr06Yqv1DRPy1TzbBNewWq+abm4jvreV2YXTyxRiBGRq8uASi8B8PiMVR1vo3kvUbfzDpF&#xA;vHBcxX9w/wDiK1SRmLXE0KK4lo1UZolTYU2xVVvfJHle+1rT9au7L1tR0oKunyNLMUi4BgpEPP0i&#xA;y8zRitcVUV/L7ykiatGtkwh1z1/0rB69x6UxumLzn0/U4KZGO5UDFW1/L7yWmm6ppkWkW8WnazxO&#xA;pWcQMcMhRFQHghVUPFBugHj1xVVv/JXlm/s9Os7i0Ig0hQmmiGaaBoVEfpcUeF43pwHHriqSflv5&#xA;A1bypNqsl/rD6mL+RWjVuW3EsTI3Jm+N+W9PDqckTbGIp3nf8v8AVPMPmPRdVtdYewg0xgZbdeW9&#xA;JA5ZOLABmA4mvtiDSmNsm8x6XNq2g3+mwXLWc13A8UdyleSMwoDtQ08fbAEkJT+XXlK+8q+XBpd7&#xA;fnUJvWeb1N+KB6AInIk0+Hl8ycSbWIpL5PIGrN+Zq+bhrDiwWML+jvirtF6Xp9ePDl8fTr9+G9kV&#xA;vbNzWhpsexO+RZPNk/L/AM9av5n0HVPNusabc23lyeS6sxp9k8FxNI6lF9WSSWUItDUqnWn0hVZ5&#xA;4vP0h+a/kXSbK3uJp9MuLq/1CZYX+rwwNaPGheYgJVmagAP8MVZNqnlK4vPP2h+Z1uESDSbS9tZL&#xA;Yg8nN36fFlPT4fT3xVk2KuxV2KuxV2KrJ4zJBJGApLqygSDkhqKfEO48RirB9I/L/WbXyRqPly61&#xA;CKT6zdGXT40WT0LO1DxslrF6jPIUT02K1O3LiNgMVV/Mn5f3GreddM8ypdqqaabT/QZAzRS+hLOz&#xA;l1BoWQXAeFv2XUHpirWn+RdUtvNKX8l7A+k22oXmq2sSRutyZr6FonjlflwZE9RyppX7I/ZxVSu/&#xA;y4uNS0eO01K8Rbt9Un1e4ntlZRFPJBNHCbfkWPKCSSORWbqV7dMVVdD/AC/urOx0u1vbxJfqehTa&#xA;LdPEpUu87REypyrQD0jscVQurfl3rGvfl7D5Q1i9tkED2ka3VnEyA29oyb+nIZF5sE+zuvbcYq15&#xA;p/L7zF5hXRLibVILW+0OFZIRbwgQvfpNDKslHDtHH/o4ACHkAzLUg4qyfzd5fbX9GXTRKYB9csLp&#xA;5FZ0bhZ3sN06q8ZV0ZlhKqykEE1xVj+vfl7qOo+b9K8xW+pej+g/qqafauvqlkV3F4ZJn5S8poJe&#xA;AIbtVq4qu0j8vLmw17zNfG7jks/NAl+uRen++iJqsJjk68eEj8kO1aFaVaqqS2P5V+ZE8ratp15q&#xA;VnLqd7FpdtayxRSJAsWkcPTMgZncvJxblTbwwqzUaNqdxrOjaveyQrcafbXcNzFCH4M90YSDGW3o&#xA;vo9/HAqTeR/IeqeW9a1LUrjUxe/plTLfxemqBbr6xLPyjKgErS5ZfjqaBR0AAVZrirsVdirsVf/Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Untitled-3</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:D5E766EA0A206811945780C5360C7B74</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:D5E766EA0A206811945780C5360C7B74</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:OriginalDocumentID>uuid:db9e8099-a7dd-f441-8974-e42e2b295396</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:D4E766EA0A206811945780C5360C7B74</stRef:instanceID>
            <stRef:documentID>xmp.did:D4E766EA0A206811945780C5360C7B74</stRef:documentID>
            <stRef:originalDocumentID>uuid:db9e8099-a7dd-f441-8974-e42e2b295396</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:D4E766EA0A206811945780C5360C7B74</stEvt:instanceID>
                  <stEvt:when>2012-10-09T17:03:43+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:D5E766EA0A206811945780C5360C7B74</stEvt:instanceID>
                  <stEvt:when>2012-10-09T17:03:52+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 9.90</pdf:Producer>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>81.883202</stDim:w>
            <stDim:h>15.107777</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>SjF_CMYK</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>20.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>70.000000</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -23.3828 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 23.3828 li
190.304 23.3828 li
190.304 0 li
cp
clp
[1 0 0 1 0 0 ]ct
88.9233 5.06006 mo
89.1782 4.47705 li
89.1953 4.4375 89.229 4.42041 89.2744 4.4375 cv
89.5122 4.54492 89.7104 4.62402 90.1011 4.62402 cv
90.4404 4.62402 90.6445 4.47705 90.6445 4.22803 cv
90.6445 3.99561 90.5313 3.87695 89.9819 3.6333 cv
89.2744 3.3335 88.9688 2.95996 88.9688 2.354 cv
88.9688 1.69189 89.4668 1.19922 90.3105 1.19922 cv
90.8594 1.19922 91.0972 1.23877 91.5107 1.41992 cv
91.5615 1.43701 91.5615 1.47656 91.5444 1.51611 cv
91.2783 2.03711 li
91.2617 2.07666 91.2275 2.09961 91.1768 2.07666 cv
90.9556 1.98633 90.7295 1.94092 90.4634 1.94092 cv
90.1011 1.94092 89.9424 2.09961 89.9424 2.33154 cv
89.9424 2.55811 90.0273 2.66553 90.6333 2.90869 cv
91.3408 3.20898 91.6123 3.56006 91.6123 4.13721 cv
91.6123 4.92969 91.0522 5.36572 90.1802 5.36572 cv
89.7104 5.36572 89.3423 5.32617 88.9575 5.12793 cv
88.9233 5.10547 88.9121 5.08252 88.9233 5.06006 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
f
94.5493 4.55615 mo
94.5493 4.58447 94.561 4.60156 94.5894 4.60156 cv
96.0781 4.60156 li
96.123 4.60156 96.146 4.62402 96.146 4.67529 cv
96.146 5.25244 li
96.146 5.30371 96.123 5.32617 96.0781 5.32617 cv
93.7285 5.32617 li
93.6777 5.32617 93.6553 5.30371 93.6553 5.25244 cv
93.6553 1.3125 li
93.6553 1.26172 93.6777 1.23877 93.7285 1.23877 cv
94.4873 1.23877 li
94.5269 1.23877 94.5493 1.26172 94.5493 1.3125 cv
94.5493 4.55615 li
cp
f
99.394 1.92383 mo
98.8506 1.92383 98.5562 2.36523 98.5562 3.27686 cv
98.5562 4.20508 98.8447 4.64111 99.3882 4.64111 cv
99.9258 4.64111 100.22 4.20508 100.22 3.28271 cv
100.22 2.35986 99.9204 1.92383 99.394 1.92383 cv
cp
99.3882 5.36572 mo
98.0298 5.36572 97.6221 4.62402 97.6221 3.28271 cv
97.6221 1.92969 98.0298 1.19922 99.3882 1.19922 cv
100.747 1.19922 101.154 1.93506 101.154 3.27686 cv
101.154 4.62988 100.747 5.36572 99.3882 5.36572 cv
cp
f
104.098 5.32617 mo
104.07 5.32617 104.053 5.30908 104.042 5.27539 cv
102.886 1.32959 li
102.87 1.27832 102.898 1.23877 102.943 1.23877 cv
103.77 1.23877 li
103.815 1.23877 103.82 1.25586 103.837 1.29541 cv
104.636 4.43164 li
105.434 1.29541 li
105.445 1.25586 105.468 1.23877 105.507 1.23877 cv
106.244 1.23877 li
106.294 1.23877 106.317 1.26709 106.306 1.31836 cv
105.145 5.27539 li
105.134 5.30908 105.111 5.32617 105.078 5.32617 cv
104.098 5.32617 li
cp
f
109.102 2.92041 mo
110.364 2.92041 li
110.416 2.92041 110.444 2.94287 110.444 2.98828 cv
110.444 3.57715 li
110.444 3.6167 110.416 3.63916 110.364 3.63916 cv
109.102 3.63916 li
109.102 4.55615 li
109.102 4.58447 109.113 4.60156 109.141 4.60156 cv
110.732 4.60156 li
110.783 4.60156 110.806 4.62402 110.806 4.66943 cv
110.806 5.25244 li
110.806 5.30371 110.783 5.32617 110.732 5.32617 cv
108.281 5.32617 li
108.23 5.32617 108.208 5.30371 108.208 5.25244 cv
108.208 1.3125 li
108.208 1.26172 108.23 1.23877 108.281 1.23877 cv
110.732 1.23877 li
110.783 1.23877 110.806 1.26172 110.806 1.3125 cv
110.806 1.89014 li
110.806 1.94092 110.783 1.96338 110.732 1.96338 cv
109.141 1.96338 li
109.113 1.96338 109.102 1.98047 109.102 2.00879 cv
109.102 2.92041 li
cp
f
115.044 3.99023 mo
115.044 1.3125 li
115.044 1.26172 115.061 1.23877 115.101 1.23877 cv
115.832 1.23877 li
115.876 1.23877 115.899 1.26172 115.899 1.3125 cv
115.899 5.25244 li
115.899 5.30371 115.876 5.32617 115.832 5.32617 cv
115.039 5.32617 li
114.988 5.32617 114.976 5.32031 114.959 5.28076 cv
113.646 2.57471 li
113.646 5.25244 li
113.646 5.30371 113.624 5.32617 113.579 5.32617 cv
112.865 5.32617 li
112.814 5.32617 112.792 5.30371 112.792 5.25244 cv
112.792 1.3125 li
112.792 1.26172 112.814 1.23877 112.865 1.23877 cv
113.646 1.23877 li
113.697 1.23877 113.708 1.24463 113.725 1.28418 cv
115.044 3.99023 li
cp
f
117.949 5.06006 mo
118.204 4.47705 li
118.22 4.4375 118.254 4.42041 118.299 4.4375 cv
118.538 4.54492 118.735 4.62402 119.125 4.62402 cv
119.465 4.62402 119.669 4.47705 119.669 4.22803 cv
119.669 3.99561 119.556 3.87695 119.007 3.6333 cv
118.299 3.3335 117.994 2.95996 117.994 2.354 cv
117.994 1.69189 118.492 1.19922 119.335 1.19922 cv
119.884 1.19922 120.123 1.23877 120.536 1.41992 cv
120.586 1.43701 120.586 1.47656 120.57 1.51611 cv
120.303 2.03711 li
120.287 2.07666 120.252 2.09961 120.202 2.07666 cv
119.981 1.98633 119.754 1.94092 119.488 1.94092 cv
119.125 1.94092 118.967 2.09961 118.967 2.33154 cv
118.967 2.55811 119.052 2.66553 119.658 2.90869 cv
120.366 3.20898 120.637 3.56006 120.637 4.13721 cv
120.637 4.92969 120.077 5.36572 119.206 5.36572 cv
118.735 5.36572 118.368 5.32617 117.982 5.12793 cv
117.949 5.10547 117.937 5.08252 117.949 5.06006 cv
cp
f
124.322 3.30518 mo
125.725 5.22412 li
125.753 5.26953 125.725 5.32617 125.68 5.32617 cv
124.712 5.32617 li
124.689 5.32617 124.672 5.31494 124.661 5.29785 cv
123.569 3.59375 li
123.569 5.25244 li
123.569 5.30371 123.545 5.32617 123.506 5.32617 cv
122.748 5.32617 li
122.697 5.32617 122.674 5.30371 122.674 5.25244 cv
122.674 1.3125 li
122.674 1.26172 122.697 1.23877 122.748 1.23877 cv
123.506 1.23877 li
123.545 1.23877 123.569 1.26172 123.569 1.3125 cv
123.569 3.10693 li
124.65 1.26709 li
124.661 1.25 124.678 1.23877 124.701 1.23877 cv
125.573 1.23877 li
125.635 1.23877 125.652 1.29541 125.624 1.34082 cv
124.322 3.30518 li
cp
f
128.81 1.01807 mo
128.776 1.03516 128.753 1.02393 128.736 .995605 cv
128.623 .757813 li
128.606 .734863 128.618 .712402 128.651 .689941 cv
129.733 .0102539 li
129.755 -.00634766 129.794 -.00634766 129.812 .0332031 cv
130.039 .497559 li
130.055 .525391 130.055 .55957 130.015 .57666 cv
128.81 1.01807 li
cp
129.495 3.74658 mo
129.042 2.17871 li
128.589 3.74658 li
129.495 3.74658 li
cp
128.385 4.46582 mo
128.159 5.27539 li
128.142 5.30908 128.12 5.32617 128.085 5.32617 cv
127.349 5.32617 li
127.31 5.32617 127.282 5.29199 127.298 5.25244 cv
128.543 1.26709 li
128.543 1.25 128.561 1.23877 128.589 1.23877 cv
129.591 1.23877 li
129.608 1.23877 129.625 1.25 129.636 1.27832 cv
130.871 5.25244 li
130.887 5.29199 130.859 5.32617 130.82 5.32617 cv
129.999 5.32617 li
129.964 5.32617 129.942 5.30908 129.925 5.27539 cv
129.699 4.46582 li
128.385 4.46582 li
cp
f
136.767 5.32617 mo
136.727 5.32617 136.705 5.30371 136.705 5.25244 cv
136.705 2.00879 li
136.705 1.98047 136.687 1.96338 136.659 1.96338 cv
135.713 1.96338 li
135.663 1.96338 135.64 1.94092 135.64 1.89014 cv
135.64 1.3125 li
135.64 1.26172 135.663 1.23877 135.713 1.23877 cv
138.601 1.23877 li
138.646 1.23877 138.668 1.26172 138.668 1.3125 cv
138.668 1.89014 li
138.668 1.94092 138.646 1.96338 138.601 1.96338 cv
137.638 1.96338 li
137.61 1.96338 137.599 1.98047 137.599 2.00879 cv
137.599 5.25244 li
137.599 5.30371 137.576 5.32617 137.525 5.32617 cv
136.767 5.32617 li
cp
f
141.464 2.92041 mo
142.726 2.92041 li
142.778 2.92041 142.806 2.94287 142.806 2.98828 cv
142.806 3.57715 li
142.806 3.6167 142.778 3.63916 142.726 3.63916 cv
141.464 3.63916 li
141.464 4.55615 li
141.464 4.58447 141.475 4.60156 141.503 4.60156 cv
143.094 4.60156 li
143.145 4.60156 143.168 4.62402 143.168 4.66943 cv
143.168 5.25244 li
143.168 5.30371 143.145 5.32617 143.094 5.32617 cv
140.643 5.32617 li
140.592 5.32617 140.57 5.30371 140.57 5.25244 cv
140.57 1.3125 li
140.57 1.26172 140.592 1.23877 140.643 1.23877 cv
143.094 1.23877 li
143.145 1.23877 143.168 1.26172 143.168 1.3125 cv
143.168 1.89014 li
143.168 1.94092 143.145 1.96338 143.094 1.96338 cv
141.503 1.96338 li
141.475 1.96338 141.464 1.98047 141.464 2.00879 cv
141.464 2.92041 li
cp
f
146.915 5.36572 mo
145.743 5.36572 145.041 4.56738 145.041 3.28271 cv
145.041 1.99756 145.743 1.19922 146.915 1.19922 cv
147.39 1.19922 147.696 1.25586 148.006 1.43164 cv
148.035 1.44824 148.046 1.47119 148.046 1.48779 cv
148.046 1.50488 148.041 1.52783 148.03 1.55029 cv
147.763 2.05957 li
147.747 2.08789 147.729 2.10498 147.712 2.10498 cv
147.696 2.10498 147.678 2.09961 147.662 2.09375 cv
147.435 1.98633 147.237 1.94678 146.988 1.94678 cv
146.518 1.94678 145.974 2.33691 145.974 3.28271 cv
145.974 4.2334 146.49 4.61279 146.994 4.61279 cv
147.18 4.61279 147.401 4.59033 147.667 4.45996 cv
147.707 4.44287 147.741 4.44873 147.757 4.48291 cv
148.035 5.00928 li
148.063 5.05469 148.052 5.09424 148.006 5.12256 cv
147.667 5.31494 147.367 5.36572 146.915 5.36572 cv
cp
f
150.921 3.63916 mo
150.893 3.63916 150.876 3.65625 150.876 3.68457 cv
150.876 5.25244 li
150.876 5.30371 150.854 5.32617 150.814 5.32617 cv
150.055 5.32617 li
150.004 5.32617 149.982 5.30371 149.982 5.25244 cv
149.982 1.3125 li
149.982 1.26172 150.004 1.23877 150.055 1.23877 cv
150.814 1.23877 li
150.854 1.23877 150.876 1.26172 150.876 1.3125 cv
150.876 2.875 li
150.876 2.90332 150.893 2.92041 150.921 2.92041 cv
152.15 2.92041 li
152.178 2.92041 152.195 2.90332 152.195 2.875 cv
152.195 1.3125 li
152.195 1.26172 152.218 1.23877 152.263 1.23877 cv
153.022 1.23877 li
153.067 1.23877 153.089 1.26172 153.089 1.3125 cv
153.089 5.25244 li
153.089 5.30371 153.067 5.32617 153.022 5.32617 cv
152.263 5.32617 li
152.218 5.32617 152.195 5.30371 152.195 5.25244 cv
152.195 3.68457 li
152.195 3.65625 152.178 3.63916 152.15 3.63916 cv
150.921 3.63916 li
cp
f
157.55 3.99023 mo
157.55 1.3125 li
157.55 1.26172 157.567 1.23877 157.607 1.23877 cv
158.337 1.23877 li
158.382 1.23877 158.405 1.26172 158.405 1.3125 cv
158.405 5.25244 li
158.405 5.30371 158.382 5.32617 158.337 5.32617 cv
157.544 5.32617 li
157.494 5.32617 157.482 5.32031 157.465 5.28076 cv
156.152 2.57471 li
156.152 5.25244 li
156.152 5.30371 156.129 5.32617 156.084 5.32617 cv
155.371 5.32617 li
155.32 5.32617 155.297 5.30371 155.297 5.25244 cv
155.297 1.3125 li
155.297 1.26172 155.32 1.23877 155.371 1.23877 cv
156.152 1.23877 li
156.203 1.23877 156.214 1.24463 156.231 1.28418 cv
157.55 3.99023 li
cp
f
161.445 1.23877 mo
161.485 1.23877 161.507 1.26172 161.507 1.3125 cv
161.507 5.25244 li
161.507 5.30371 161.485 5.32617 161.445 5.32617 cv
160.686 5.32617 li
160.635 5.32617 160.613 5.30371 160.613 5.25244 cv
160.613 1.3125 li
160.613 1.26172 160.635 1.23877 160.686 1.23877 cv
161.445 1.23877 li
cp
f
165.479 5.36572 mo
164.307 5.36572 163.605 4.56738 163.605 3.28271 cv
163.605 1.99756 164.307 1.19922 165.479 1.19922 cv
165.955 1.19922 166.26 1.25586 166.571 1.43164 cv
166.599 1.44824 166.611 1.47119 166.611 1.48779 cv
166.611 1.50488 166.605 1.52783 166.594 1.55029 cv
166.328 2.05957 li
166.311 2.08789 166.293 2.10498 166.277 2.10498 cv
166.26 2.10498 166.243 2.09961 166.226 2.09375 cv
166 1.98633 165.801 1.94678 165.552 1.94678 cv
165.083 1.94678 164.539 2.33691 164.539 3.28271 cv
164.539 4.2334 165.054 4.61279 165.558 4.61279 cv
165.745 4.61279 165.965 4.59033 166.232 4.45996 cv
166.271 4.44287 166.305 4.44873 166.322 4.48291 cv
166.599 5.00928 li
166.627 5.05469 166.617 5.09424 166.571 5.12256 cv
166.232 5.31494 165.931 5.36572 165.479 5.36572 cv
cp
f
170.194 3.30518 mo
171.597 5.22412 li
171.625 5.26953 171.597 5.32617 171.552 5.32617 cv
170.584 5.32617 li
170.561 5.32617 170.544 5.31494 170.533 5.29785 cv
169.441 3.59375 li
169.441 5.25244 li
169.441 5.30371 169.418 5.32617 169.378 5.32617 cv
168.62 5.32617 li
168.569 5.32617 168.546 5.30371 168.546 5.25244 cv
168.546 1.3125 li
168.546 1.26172 168.569 1.23877 168.62 1.23877 cv
169.378 1.23877 li
169.418 1.23877 169.441 1.26172 169.441 1.3125 cv
169.441 3.10693 li
170.522 1.26709 li
170.533 1.25 170.55 1.23877 170.573 1.23877 cv
171.445 1.23877 li
171.507 1.23877 171.524 1.29541 171.496 1.34082 cv
170.194 3.30518 li
cp
f
174.688 1.01807 mo
174.654 1.03516 174.631 1.02393 174.614 .995605 cv
174.5 .757813 li
174.484 .734863 174.496 .712402 174.529 .689941 cv
175.611 .0102539 li
175.633 -.00634766 175.672 -.00634766 175.69 .0332031 cv
175.917 .497559 li
175.933 .525391 175.933 .55957 175.893 .57666 cv
174.688 1.01807 li
cp
175.373 3.74658 mo
174.919 2.17871 li
174.467 3.74658 li
175.373 3.74658 li
cp
174.263 4.46582 mo
174.037 5.27539 li
174.02 5.30908 173.997 5.32617 173.963 5.32617 cv
173.227 5.32617 li
173.188 5.32617 173.16 5.29199 173.176 5.25244 cv
174.421 1.26709 li
174.421 1.25 174.439 1.23877 174.467 1.23877 cv
175.469 1.23877 li
175.486 1.23877 175.502 1.25 175.514 1.27832 cv
176.749 5.25244 li
176.765 5.29199 176.737 5.32617 176.698 5.32617 cv
175.876 5.32617 li
175.842 5.32617 175.82 5.30908 175.803 5.27539 cv
175.577 4.46582 li
174.263 4.46582 li
cp
f
92.207 11.9287 mo
92.207 12.7275 91.7598 13.2314 90.6445 13.2314 cv
89.5347 13.2314 89.0879 12.7275 89.0879 11.9287 cv
89.0879 9.17773 li
89.0879 9.12695 89.1104 9.104 89.1611 9.104 cv
89.9199 9.104 li
89.9595 9.104 89.9819 9.12695 89.9819 9.17773 cv
89.9819 11.9063 li
89.9819 12.3086 90.2031 12.5068 90.6445 12.5068 cv
91.0918 12.5068 91.3125 12.3086 91.3125 11.9063 cv
91.3125 9.17773 li
91.3125 9.12695 91.335 9.104 91.3804 9.104 cv
92.1445 9.104 li
92.1841 9.104 92.207 9.12695 92.207 9.17773 cv
92.207 11.9287 li
cp
f
96.6675 11.8555 mo
96.6675 9.17773 li
96.6675 9.12695 96.6846 9.104 96.7241 9.104 cv
97.4541 9.104 li
97.4995 9.104 97.5225 9.12695 97.5225 9.17773 cv
97.5225 13.1182 li
97.5225 13.1689 97.4995 13.1914 97.4541 13.1914 cv
96.6616 13.1914 li
96.6108 13.1914 96.5996 13.1855 96.5825 13.1465 cv
95.269 10.4399 li
95.269 13.1182 li
95.269 13.1689 95.2466 13.1914 95.2012 13.1914 cv
94.4878 13.1914 li
94.437 13.1914 94.4146 13.1689 94.4146 13.1182 cv
94.4146 9.17773 li
94.4146 9.12695 94.437 9.104 94.4878 9.104 cv
95.269 9.104 li
95.3203 9.104 95.3315 9.10986 95.3486 9.14941 cv
96.6675 11.8555 li
cp
f
100.567 9.104 mo
100.607 9.104 100.629 9.12695 100.629 9.17773 cv
100.629 13.1182 li
100.629 13.1689 100.607 13.1914 100.567 13.1914 cv
99.8086 13.1914 li
99.7578 13.1914 99.7354 13.1689 99.7354 13.1182 cv
99.7354 9.17773 li
99.7354 9.12695 99.7578 9.104 99.8086 9.104 cv
100.567 9.104 li
cp
f
103.747 13.1914 mo
103.718 13.1914 103.701 13.1748 103.69 13.1406 cv
102.535 9.19482 li
102.518 9.14355 102.546 9.104 102.591 9.104 cv
103.418 9.104 li
103.463 9.104 103.469 9.12109 103.486 9.16064 cv
104.284 12.2969 li
105.083 9.16064 li
105.093 9.12109 105.117 9.104 105.156 9.104 cv
105.892 9.104 li
105.943 9.104 105.965 9.13232 105.955 9.18359 cv
104.793 13.1406 li
104.782 13.1748 104.76 13.1914 104.726 13.1914 cv
103.747 13.1914 li
cp
f
108.745 10.7856 mo
110.006 10.7856 li
110.058 10.7856 110.086 10.8081 110.086 10.8535 cv
110.086 11.4424 li
110.086 11.4819 110.058 11.5044 110.006 11.5044 cv
108.745 11.5044 li
108.745 12.4219 li
108.745 12.4502 108.755 12.4668 108.784 12.4668 cv
110.375 12.4668 li
110.425 12.4668 110.449 12.4893 110.449 12.5352 cv
110.449 13.1182 li
110.449 13.1689 110.425 13.1914 110.375 13.1914 cv
107.923 13.1914 li
107.873 13.1914 107.85 13.1689 107.85 13.1182 cv
107.85 9.17773 li
107.85 9.12695 107.873 9.104 107.923 9.104 cv
110.375 9.104 li
110.425 9.104 110.449 9.12695 110.449 9.17773 cv
110.449 9.75537 li
110.449 9.80615 110.425 9.82861 110.375 9.82861 cv
108.784 9.82861 li
108.755 9.82861 108.745 9.8457 108.745 9.87402 cv
108.745 10.7856 li
cp
f
113.329 10.9326 mo
113.673 10.9326 li
114.086 10.9326 114.341 10.7515 114.341 10.3608 cv
114.341 9.99316 114.126 9.82861 113.696 9.82861 cv
113.374 9.82861 li
113.345 9.82861 113.329 9.8457 113.329 9.87402 cv
113.329 10.9326 li
cp
113.329 11.5723 mo
113.329 13.1182 li
113.329 13.1689 113.305 13.1914 113.266 13.1914 cv
112.507 13.1914 li
112.457 13.1914 112.434 13.1689 112.434 13.1182 cv
112.434 9.17773 li
112.434 9.12695 112.457 9.104 112.507 9.104 cv
113.815 9.104 li
114.839 9.104 115.276 9.55713 115.276 10.3438 cv
115.276 10.9326 114.999 11.3403 114.455 11.4932 cv
115.485 13.084 li
115.525 13.1465 115.491 13.1914 115.44 13.1914 cv
114.54 13.1914 li
114.511 13.1914 114.495 13.1797 114.489 13.1631 cv
113.566 11.5723 li
113.329 11.5723 li
cp
f
120.07 9.104 mo
120.116 9.104 120.138 9.12695 120.138 9.17773 cv
120.138 9.75537 li
120.138 9.78369 120.132 9.80615 120.116 9.82861 cv
118.315 12.4668 li
120.07 12.4668 li
120.116 12.4668 120.138 12.4893 120.138 12.5293 cv
120.138 13.1182 li
120.138 13.1689 120.116 13.1914 120.07 13.1914 cv
117.364 13.1914 li
117.313 13.1914 117.291 13.1689 117.291 13.1182 cv
117.291 12.5459 li
117.291 12.5293 117.301 12.501 117.319 12.4727 cv
119.108 9.82861 li
117.364 9.82861 li
117.313 9.82861 117.291 9.80615 117.291 9.76074 cv
117.291 9.17773 li
117.291 9.12695 117.313 9.104 117.364 9.104 cv
120.07 9.104 li
cp
f
122.957 9.104 mo
122.997 9.104 123.019 9.12695 123.019 9.17773 cv
123.019 13.1182 li
123.019 13.1689 122.997 13.1914 122.957 13.1914 cv
122.198 13.1914 li
122.147 13.1914 122.125 13.1689 122.125 13.1182 cv
122.125 9.17773 li
122.125 9.12695 122.147 9.104 122.198 9.104 cv
122.957 9.104 li
cp
f
126.057 13.1914 mo
126.017 13.1914 125.995 13.1689 125.995 13.1182 cv
125.995 9.87402 li
125.995 9.8457 125.977 9.82861 125.949 9.82861 cv
125.003 9.82861 li
124.953 9.82861 124.93 9.80615 124.93 9.75537 cv
124.93 9.17773 li
124.93 9.12695 124.953 9.104 125.003 9.104 cv
127.891 9.104 li
127.936 9.104 127.958 9.12695 127.958 9.17773 cv
127.958 9.75537 li
127.958 9.80615 127.936 9.82861 127.891 9.82861 cv
126.928 9.82861 li
126.9 9.82861 126.889 9.8457 126.889 9.87402 cv
126.889 13.1182 li
126.889 13.1689 126.866 13.1914 126.815 13.1914 cv
126.057 13.1914 li
cp
f
131.405 11.6118 mo
130.952 10.0439 li
130.5 11.6118 li
131.405 11.6118 li
cp
130.295 12.3311 mo
130.069 13.1406 li
130.052 13.1748 130.03 13.1914 129.996 13.1914 cv
129.259 13.1914 li
129.22 13.1914 129.192 13.1572 129.208 13.1182 cv
130.454 9.13232 li
130.454 9.11523 130.471 9.104 130.5 9.104 cv
131.501 9.104 li
131.518 9.104 131.535 9.11523 131.546 9.14355 cv
132.781 13.1182 li
132.797 13.1572 132.769 13.1914 132.73 13.1914 cv
131.909 13.1914 li
131.875 13.1914 131.852 13.1748 131.835 13.1406 cv
131.609 12.3311 li
130.295 12.3311 li
cp
f
138.761 13.1914 mo
138.733 13.1914 138.716 13.1748 138.705 13.1406 cv
137.55 9.19482 li
137.533 9.14355 137.561 9.104 137.607 9.104 cv
138.433 9.104 li
138.478 9.104 138.484 9.12109 138.501 9.16064 cv
139.299 12.2969 li
140.097 9.16064 li
140.109 9.12109 140.131 9.104 140.171 9.104 cv
140.907 9.104 li
140.958 9.104 140.981 9.13232 140.969 9.18359 cv
139.809 13.1406 li
139.797 13.1748 139.775 13.1914 139.741 13.1914 cv
138.761 13.1914 li
cp
f
146.938 11.4648 mo
146.938 12.4219 li
146.938 12.4502 146.949 12.4668 146.977 12.4668 cv
147.458 12.4668 li
147.77 12.4668 148.047 12.3477 148.047 11.9971 cv
148.047 11.6177 147.798 11.4648 147.25 11.4648 cv
146.938 11.4648 li
cp
146.983 9.82861 mo
146.955 9.82861 146.938 9.8457 146.938 9.87402 cv
146.938 10.8252 li
147.272 10.8252 li
147.742 10.8252 147.979 10.6836 147.979 10.2988 cv
147.979 9.93652 147.758 9.82861 147.374 9.82861 cv
146.983 9.82861 li
cp
147.278 9.104 mo
148.404 9.104 148.914 9.43262 148.914 10.208 cv
148.914 10.5703 148.675 10.9438 148.082 11.125 cv
148.721 11.3008 148.981 11.6738 148.981 12.1953 cv
148.981 12.9199 148.5 13.1914 147.317 13.1914 cv
146.117 13.1914 li
146.066 13.1914 146.043 13.1689 146.043 13.1182 cv
146.043 9.17773 li
146.043 9.12695 146.066 9.104 146.117 9.104 cv
147.278 9.104 li
cp
f
152.083 10.9326 mo
152.428 10.9326 li
152.841 10.9326 153.096 10.7515 153.096 10.3608 cv
153.096 9.99316 152.881 9.82861 152.451 9.82861 cv
152.128 9.82861 li
152.1 9.82861 152.083 9.8457 152.083 9.87402 cv
152.083 10.9326 li
cp
152.083 11.5723 mo
152.083 13.1182 li
152.083 13.1689 152.061 13.1914 152.021 13.1914 cv
151.262 13.1914 li
151.211 13.1914 151.189 13.1689 151.189 13.1182 cv
151.189 9.17773 li
151.189 9.12695 151.211 9.104 151.262 9.104 cv
152.57 9.104 li
153.594 9.104 154.031 9.55713 154.031 10.3438 cv
154.031 10.9326 153.753 11.3403 153.209 11.4932 cv
154.24 13.084 li
154.28 13.1465 154.246 13.1914 154.195 13.1914 cv
153.294 13.1914 li
153.266 13.1914 153.25 13.1797 153.244 13.1631 cv
152.321 11.5723 li
152.083 11.5723 li
cp
f
158.174 11.6118 mo
157.721 10.0439 li
157.269 11.6118 li
158.174 11.6118 li
cp
157.065 12.3311 mo
156.838 13.1406 li
156.822 13.1748 156.799 13.1914 156.765 13.1914 cv
156.029 13.1914 li
155.99 13.1914 155.961 13.1572 155.978 13.1182 cv
157.223 9.13232 li
157.223 9.11523 157.241 9.104 157.269 9.104 cv
158.271 9.104 li
158.288 9.104 158.304 9.11523 158.316 9.14355 cv
159.55 13.1182 li
159.567 13.1572 159.539 13.1914 159.5 13.1914 cv
158.678 13.1914 li
158.644 13.1914 158.622 13.1748 158.605 13.1406 cv
158.378 12.3311 li
157.065 12.3311 li
cp
f
161.921 13.1914 mo
161.881 13.1914 161.859 13.1689 161.859 13.1182 cv
161.859 9.87402 li
161.859 9.8457 161.841 9.82861 161.813 9.82861 cv
160.868 9.82861 li
160.817 9.82861 160.794 9.80615 160.794 9.75537 cv
160.794 9.17773 li
160.794 9.12695 160.817 9.104 160.868 9.104 cv
163.755 9.104 li
163.8 9.104 163.823 9.12695 163.823 9.17773 cv
163.823 9.75537 li
163.823 9.80615 163.8 9.82861 163.755 9.82861 cv
162.792 9.82861 li
162.764 9.82861 162.753 9.8457 162.753 9.87402 cv
162.753 13.1182 li
162.753 13.1689 162.73 13.1914 162.679 13.1914 cv
161.921 13.1914 li
cp
f
166.556 9.104 mo
166.596 9.104 166.619 9.12695 166.619 9.17773 cv
166.619 13.1182 li
166.619 13.1689 166.596 13.1914 166.556 13.1914 cv
165.797 13.1914 li
165.747 13.1914 165.724 13.1689 165.724 13.1182 cv
165.724 9.17773 li
165.724 9.12695 165.747 9.104 165.797 9.104 cv
166.556 9.104 li
cp
f
168.666 12.9258 mo
168.92 12.3418 li
168.937 12.3027 168.971 12.2861 169.016 12.3027 cv
169.254 12.4102 169.452 12.4893 169.842 12.4893 cv
170.182 12.4893 170.386 12.3418 170.386 12.0928 cv
170.386 11.8613 170.273 11.7422 169.724 11.4985 cv
169.016 11.1987 168.71 10.8252 168.71 10.2192 cv
168.71 9.55713 169.208 9.06445 170.052 9.06445 cv
170.601 9.06445 170.839 9.104 171.252 9.28516 cv
171.303 9.30225 171.303 9.3418 171.287 9.38135 cv
171.02 9.90234 li
171.003 9.94189 170.969 9.96484 170.918 9.94189 cv
170.698 9.85156 170.471 9.80615 170.205 9.80615 cv
169.842 9.80615 169.684 9.96484 169.684 10.1968 cv
169.684 10.4233 169.769 10.5308 170.375 10.7739 cv
171.083 11.0742 171.354 11.4253 171.354 12.0029 cv
171.354 12.7949 170.793 13.2314 169.922 13.2314 cv
169.452 13.2314 169.084 13.1914 168.699 12.9932 cv
168.666 12.9707 168.654 12.9482 168.666 12.9258 cv
cp
f
174.286 12.4219 mo
174.286 12.4502 174.296 12.4668 174.325 12.4668 cv
175.814 12.4668 li
175.859 12.4668 175.881 12.4893 175.881 12.54 cv
175.881 13.1182 li
175.881 13.1689 175.859 13.1914 175.814 13.1914 cv
173.464 13.1914 li
173.414 13.1914 173.391 13.1689 173.391 13.1182 cv
173.391 9.17773 li
173.391 9.12695 173.414 9.104 173.464 9.104 cv
174.223 9.104 li
174.262 9.104 174.286 9.12695 174.286 9.17773 cv
174.286 12.4219 li
cp
f
179.645 11.6118 mo
179.192 10.0439 li
178.74 11.6118 li
179.645 11.6118 li
cp
178.536 12.3311 mo
178.309 13.1406 li
178.292 13.1748 178.27 13.1914 178.236 13.1914 cv
177.5 13.1914 li
177.46 13.1914 177.432 13.1572 177.449 13.1182 cv
178.694 9.13232 li
178.694 9.11523 178.711 9.104 178.74 9.104 cv
179.742 9.104 li
179.758 9.104 179.775 9.11523 179.787 9.14355 cv
181.021 13.1182 li
181.038 13.1572 181.009 13.1914 180.97 13.1914 cv
180.149 13.1914 li
180.115 13.1914 180.092 13.1748 180.076 13.1406 cv
179.849 12.3311 li
178.536 12.3311 li
cp
f
183.595 13.1914 mo
183.567 13.1914 183.55 13.1748 183.539 13.1406 cv
182.384 9.19482 li
182.367 9.14355 182.395 9.104 182.441 9.104 cv
183.267 9.104 li
183.312 9.104 183.318 9.12109 183.335 9.16064 cv
184.133 12.2969 li
184.931 9.16064 li
184.943 9.12109 184.965 9.104 185.005 9.104 cv
185.741 9.104 li
185.792 9.104 185.815 9.13232 185.803 9.18359 cv
184.643 13.1406 li
184.631 13.1748 184.609 13.1914 184.575 13.1914 cv
183.595 13.1914 li
cp
f
188.6 10.7856 mo
189.862 10.7856 li
189.914 10.7856 189.942 10.8081 189.942 10.8535 cv
189.942 11.4424 li
189.942 11.4819 189.914 11.5044 189.862 11.5044 cv
188.6 11.5044 li
188.6 12.4219 li
188.6 12.4502 188.611 12.4668 188.639 12.4668 cv
190.23 12.4668 li
190.281 12.4668 190.304 12.4893 190.304 12.5352 cv
190.304 13.1182 li
190.304 13.1689 190.281 13.1914 190.23 13.1914 cv
187.779 13.1914 li
187.728 13.1914 187.706 13.1689 187.706 13.1182 cv
187.706 9.17773 li
187.706 9.12695 187.728 9.104 187.779 9.104 cv
190.23 9.104 li
190.281 9.104 190.304 9.12695 190.304 9.17773 cv
190.304 9.75537 li
190.304 9.80615 190.281 9.82861 190.23 9.82861 cv
188.639 9.82861 li
188.611 9.82861 188.6 9.8457 188.6 9.87402 cv
188.6 10.7856 li
cp
f
88.9233 20.8135 mo
89.0879 20.4336 li
89.1045 20.4004 89.1328 20.3887 89.167 20.4053 cv
89.4048 20.5078 89.6196 20.6035 90.0386 20.6035 cv
90.4746 20.6035 90.7349 20.3887 90.7349 20.0322 cv
90.7349 19.6982 90.5991 19.5283 89.9653 19.2109 cv
89.2236 18.8486 88.9746 18.5146 88.9746 17.9883 cv
88.9746 17.417 89.3936 16.9297 90.1689 16.9297 cv
90.6274 16.9297 90.916 16.9746 91.2559 17.1221 cv
91.29 17.1396 91.3013 17.1621 91.2842 17.1963 cv
91.1255 17.541 li
91.1089 17.5811 91.0859 17.5918 91.0464 17.5752 cv
90.7803 17.4678 90.5596 17.417 90.2368 17.417 cv
89.7842 17.417 89.5859 17.6709 89.5859 17.9658 cv
89.5859 18.2549 89.6709 18.4072 90.2935 18.7129 cv
91.0635 19.0918 91.3462 19.3809 91.3462 19.9863 cv
91.3462 20.6436 90.8877 21.0967 90.0781 21.0967 cv
89.6084 21.0967 89.2915 21.0508 88.9517 20.876 cv
88.9233 20.8584 88.9121 20.8359 88.9233 20.8135 cv
cp
f
94.2095 21.0566 mo
94.1753 21.0566 94.1582 21.04 94.1582 21 cv
94.1582 17.4902 li
94.1582 17.4619 94.1416 17.4453 94.1133 17.4453 cv
93.1338 17.4453 li
93.0942 17.4453 93.0771 17.4219 93.0771 17.3828 cv
93.0771 17.0264 li
93.0771 16.9863 93.0942 16.9697 93.1338 16.9697 cv
95.749 16.9697 li
95.7886 16.9697 95.8057 16.9863 95.8057 17.0264 cv
95.8057 17.3828 li
95.8057 17.4219 95.7886 17.4453 95.749 17.4453 cv
94.7642 17.4453 li
94.7358 17.4453 94.7246 17.4619 94.7246 17.4902 cv
94.7246 21 li
94.7246 21.04 94.7075 21.0566 94.668 21.0566 cv
94.2095 21.0566 li
cp
f
98.2671 18.8945 mo
98.7764 18.8945 li
99.3198 18.8945 99.603 18.6904 99.603 18.1641 cv
99.603 17.6426 99.3315 17.4453 98.7881 17.4453 cv
98.3125 17.4453 li
98.2842 17.4453 98.2671 17.4619 98.2671 17.4902 cv
98.2671 18.8945 li
cp
98.2671 19.3359 mo
98.2671 21 li
98.2671 21.04 98.25 21.0566 98.2163 21.0566 cv
97.7573 21.0566 li
97.7178 21.0566 97.7012 21.04 97.7012 21 cv
97.7012 17.0264 li
97.7012 16.9863 97.7178 16.9697 97.7573 16.9697 cv
98.8389 16.9697 li
99.7275 16.9697 100.203 17.3428 100.203 18.1523 cv
100.203 18.8145 99.8579 19.166 99.3086 19.2852 cv
100.293 20.9658 li
100.322 21.0166 100.299 21.0566 100.254 21.0566 cv
99.7222 21.0566 li
99.6938 21.0566 99.6768 21.0449 99.6709 21.0283 cv
98.7256 19.3359 li
98.2671 19.3359 li
cp
f
103.769 17.4053 mo
103.095 17.4053 102.744 17.9316 102.744 19.0127 cv
102.744 20.0947 103.095 20.6211 103.769 20.6211 cv
104.431 20.6211 104.787 20.0947 104.787 19.0127 cv
104.787 17.9316 104.431 17.4053 103.769 17.4053 cv
cp
103.769 21.0967 mo
102.529 21.0967 102.149 20.2637 102.149 19.0127 cv
102.149 17.7451 102.517 16.9297 103.769 16.9297 cv
105.002 16.9297 105.381 17.7451 105.381 19.0127 cv
105.381 20.2637 105.002 21.0967 103.769 21.0967 cv
cp
f
108.733 20.1172 mo
108.733 20.7109 108.387 21.0566 107.798 21.0566 cv
107.255 21.0566 li
107.215 21.0566 107.199 21.04 107.199 21 cv
107.199 20.6377 li
107.199 20.5977 107.215 20.5811 107.255 20.5811 cv
107.691 20.5811 li
108.008 20.5811 108.167 20.4229 108.167 20.1055 cv
108.167 17.0264 li
108.167 16.9863 108.184 16.9697 108.223 16.9697 cv
108.676 16.9697 li
108.715 16.9697 108.733 16.9863 108.733 17.0264 cv
108.733 20.1172 li
cp
f
113.186 20.1172 mo
113.186 17.0264 li
113.186 16.9863 113.203 16.9697 113.237 16.9697 cv
113.684 16.9697 li
113.723 16.9697 113.741 16.9863 113.741 17.0264 cv
113.741 21 li
113.741 21.04 113.723 21.0566 113.684 21.0566 cv
113.203 21.0566 li
113.152 21.0566 113.14 21.0508 113.124 21.0117 cv
111.504 17.9092 li
111.504 21 li
111.504 21.04 111.487 21.0566 111.448 21.0566 cv
111.006 21.0566 li
110.966 21.0566 110.95 21.04 110.95 21 cv
110.95 17.0264 li
110.95 16.9863 110.966 16.9697 111.006 16.9697 cv
111.482 16.9697 li
111.533 16.9697 111.543 16.9746 111.561 17.0146 cv
113.186 20.1172 li
cp
f
116.462 16.9697 mo
116.497 16.9697 116.513 16.9863 116.513 17.0264 cv
116.513 21 li
116.513 21.04 116.497 21.0566 116.462 21.0566 cv
116.004 21.0566 li
115.964 21.0566 115.948 21.04 115.948 21 cv
115.948 17.0264 li
115.948 16.9863 115.964 16.9697 116.004 16.9697 cv
116.462 16.9697 li
cp
115.964 16.6582 mo
115.936 16.6748 115.908 16.6523 115.891 16.6357 cv
115.817 16.4883 li
115.812 16.4658 115.817 16.4316 115.845 16.415 cv
116.847 15.8262 li
116.887 15.8086 116.91 15.8203 116.921 15.8486 cv
117.074 16.1377 li
117.091 16.1768 117.08 16.1992 117.045 16.2168 cv
115.964 16.6582 li
cp
f
120.281 21.0967 mo
119.125 21.0967 118.611 20.2471 118.611 19.0078 cv
118.611 17.7842 119.125 16.9297 120.281 16.9297 cv
120.666 16.9297 120.949 16.9805 121.266 17.1563 cv
121.294 17.1787 121.294 17.2129 121.277 17.2529 cv
121.107 17.5635 li
121.09 17.6035 121.056 17.6035 121.028 17.5869 cv
120.785 17.4678 120.631 17.417 120.315 17.417 cv
119.68 17.417 119.21 17.9258 119.21 19.0078 cv
119.21 20.1055 119.669 20.6094 120.315 20.6094 cv
120.598 20.6094 120.779 20.5693 121.034 20.4336 cv
121.068 20.417 121.09 20.4229 121.107 20.4512 cv
121.283 20.7734 li
121.299 20.8076 121.294 20.8359 121.266 20.8643 cv
120.937 21.0449 120.671 21.0967 120.281 21.0967 cv
cp
f
124.317 18.9561 mo
125.913 20.9717 li
125.941 21.0117 125.913 21.0566 125.868 21.0566 cv
125.291 21.0566 li
125.273 21.0566 125.256 21.0508 125.245 21.0342 cv
123.79 19.0977 li
123.79 21 li
123.79 21.04 123.773 21.0566 123.739 21.0566 cv
123.281 21.0566 li
123.241 21.0566 123.224 21.04 123.224 21 cv
123.224 17.0264 li
123.224 16.9863 123.241 16.9697 123.281 16.9697 cv
123.739 16.9697 li
123.773 16.9697 123.79 16.9863 123.79 17.0264 cv
123.79 18.8662 li
125.182 16.9922 li
125.194 16.9746 125.21 16.9697 125.234 16.9697 cv
125.76 16.9697 li
125.805 16.9697 125.828 17.0205 125.799 17.0596 cv
124.317 18.9561 li
cp
f
129.687 19.6133 mo
129.07 17.541 li
128.454 19.6133 li
129.687 19.6133 li
cp
128.317 20.0889 mo
128.051 21.0117 li
128.04 21.04 128.017 21.0566 127.989 21.0566 cv
127.542 21.0566 li
127.502 21.0566 127.485 21.0283 127.502 20.9883 cv
128.736 16.998 li
128.736 16.9805 128.748 16.9697 128.776 16.9697 cv
129.421 16.9697 li
129.438 16.9697 129.456 16.9805 129.46 17.0029 cv
130.684 20.9834 li
130.701 21.0342 130.684 21.0566 130.638 21.0566 cv
130.146 21.0566 li
130.118 21.0566 130.095 21.04 130.089 21.0117 cv
129.823 20.0889 li
128.317 20.0889 li
cp
f
135.973 18.7754 mo
137.242 18.7754 li
137.282 18.7754 137.304 18.792 137.304 18.832 cv
137.304 19.1943 li
137.304 19.2334 137.282 19.251 137.242 19.251 cv
135.973 19.251 li
135.973 21 li
135.973 21.04 135.957 21.0566 135.922 21.0566 cv
135.464 21.0566 li
135.424 21.0566 135.408 21.04 135.408 21 cv
135.408 17.0264 li
135.408 16.9863 135.424 16.9697 135.464 16.9697 cv
137.604 16.9697 li
137.644 16.9697 137.667 16.9863 137.667 17.0264 cv
137.667 17.3828 li
137.667 17.4219 137.644 17.4453 137.604 17.4453 cv
136.019 17.4453 li
135.991 17.4453 135.973 17.4619 135.973 17.4902 cv
135.973 18.7754 li
cp
f
140.999 19.6133 mo
140.381 17.541 li
139.765 19.6133 li
140.999 19.6133 li
cp
139.629 20.0889 mo
139.363 21.0117 li
139.351 21.04 139.329 21.0566 139.3 21.0566 cv
138.853 21.0566 li
138.814 21.0566 138.796 21.0283 138.814 20.9883 cv
140.047 16.998 li
140.047 16.9805 140.059 16.9697 140.087 16.9697 cv
140.733 16.9697 li
140.75 16.9697 140.767 16.9805 140.772 17.0029 cv
141.996 20.9834 li
142.012 21.0342 141.996 21.0566 141.95 21.0566 cv
141.458 21.0566 li
141.429 21.0566 141.407 21.04 141.401 21.0117 cv
141.134 20.0889 li
139.629 20.0889 li
cp
f
144.99 18.9561 mo
146.585 20.9717 li
146.614 21.0117 146.585 21.0566 146.541 21.0566 cv
145.963 21.0566 li
145.946 21.0566 145.929 21.0508 145.917 21.0342 cv
144.462 19.0977 li
144.462 21 li
144.462 21.04 144.446 21.0566 144.412 21.0566 cv
143.954 21.0566 li
143.914 21.0566 143.897 21.04 143.897 21 cv
143.897 17.0264 li
143.897 16.9863 143.914 16.9697 143.954 16.9697 cv
144.412 16.9697 li
144.446 16.9697 144.462 16.9863 144.462 17.0264 cv
144.462 18.8662 li
145.856 16.9922 li
145.867 16.9746 145.883 16.9697 145.907 16.9697 cv
146.433 16.9697 li
146.478 16.9697 146.5 17.0205 146.472 17.0596 cv
144.99 18.9561 li
cp
f
151.283 19.7881 mo
151.283 20.5811 151 21.0967 149.885 21.0967 cv
148.77 21.0967 148.487 20.5811 148.487 19.7881 cv
148.487 17.0264 li
148.487 16.9863 148.503 16.9697 148.543 16.9697 cv
149.001 16.9697 li
149.036 16.9697 149.052 16.9863 149.052 17.0264 cv
149.052 19.9131 li
149.052 20.4336 149.335 20.6211 149.885 20.6211 cv
150.428 20.6211 150.717 20.4287 150.717 19.9131 cv
150.717 17.0264 li
150.717 16.9863 150.734 16.9697 150.774 16.9697 cv
151.226 16.9697 li
151.266 16.9697 151.283 16.9863 151.283 17.0264 cv
151.283 19.7881 li
cp
f
154.067 20.5361 mo
154.067 20.5645 154.079 20.5811 154.107 20.5811 cv
155.675 20.5811 li
155.714 20.5811 155.732 20.6035 155.732 20.6436 cv
155.732 21 li
155.732 21.04 155.714 21.0566 155.675 21.0566 cv
153.558 21.0566 li
153.518 21.0566 153.501 21.04 153.501 21 cv
153.501 17.0264 li
153.501 16.9863 153.518 16.9697 153.558 16.9697 cv
154.016 16.9697 li
154.05 16.9697 154.067 16.9863 154.067 17.0264 cv
154.067 20.5361 li
cp
f
157.971 21.0566 mo
157.938 21.0566 157.92 21.04 157.92 21 cv
157.92 17.4902 li
157.92 17.4619 157.904 17.4453 157.875 17.4453 cv
156.896 17.4453 li
156.856 17.4453 156.839 17.4219 156.839 17.3828 cv
156.839 17.0264 li
156.839 16.9863 156.856 16.9697 156.896 16.9697 cv
159.511 16.9697 li
159.551 16.9697 159.568 16.9863 159.568 17.0264 cv
159.568 17.3828 li
159.568 17.4219 159.551 17.4453 159.511 17.4453 cv
158.526 17.4453 li
158.498 17.4453 158.487 17.4619 158.487 17.4902 cv
158.487 21 li
158.487 21.04 158.469 21.0566 158.43 21.0566 cv
157.971 21.0566 li
cp
f
163.001 19.6133 mo
162.384 17.541 li
161.768 19.6133 li
163.001 19.6133 li
cp
161.631 20.0889 mo
161.366 21.0117 li
161.354 21.04 161.332 21.0566 161.303 21.0566 cv
160.856 21.0566 li
160.817 21.0566 160.799 21.0283 160.817 20.9883 cv
162.05 16.998 li
162.05 16.9805 162.062 16.9697 162.09 16.9697 cv
162.736 16.9697 li
162.752 16.9697 162.77 16.9805 162.775 17.0029 cv
163.999 20.9834 li
164.015 21.0342 163.999 21.0566 163.953 21.0566 cv
163.46 21.0566 li
163.432 21.0566 163.41 21.04 163.404 21.0117 cv
163.137 20.0889 li
161.631 20.0889 li
cp
f
1.5332 12.7012 mo
2.37842 12.7012 3.06641 12.0146 3.06641 11.168 cv
3.06641 10.3184 2.37842 9.63818 1.5332 9.63818 cv
.685059 9.63818 0 10.3184 0 11.168 cv
0 12.0146 .685059 12.7012 1.5332 12.7012 cv
.2 0 0 .7 cmyk
f
1.5332 21.123 mo
2.37842 21.123 3.06641 20.4385 3.06641 19.5918 cv
3.06641 18.7461 2.37842 18.0566 1.5332 18.0566 cv
.685059 18.0566 0 18.7461 0 19.5918 cv
0 20.4385 .685059 21.123 1.5332 21.123 cv
f
9.95703 12.7012 mo
10.8042 12.7012 11.4888 12.0146 11.4888 11.168 cv
11.4888 10.3184 10.8042 9.63818 9.95703 9.63818 cv
9.10986 9.63818 8.42285 10.3184 8.42285 11.168 cv
8.42285 12.0146 9.10986 12.7012 9.95703 12.7012 cv
f
9.95703 21.123 mo
10.8042 21.123 11.4888 20.4385 11.4888 19.5918 cv
11.4888 18.7461 10.8042 18.0566 9.95703 18.0566 cv
9.10986 18.0566 8.42285 18.7461 8.42285 19.5918 cv
8.42285 20.4385 9.10986 21.123 9.95703 21.123 cv
f
18.3774 12.7012 mo
19.2275 12.7012 19.9126 12.0146 19.9126 11.168 cv
19.9126 10.3184 19.2275 9.63818 18.3774 9.63818 cv
17.5303 9.63818 16.8462 10.3184 16.8462 11.168 cv
16.8462 12.0146 17.5303 12.7012 18.3774 12.7012 cv
f
1.5332 4.27734 mo
2.37842 4.27734 3.06641 3.59131 3.06641 2.74414 cv
3.06641 1.89648 2.37842 1.2124 1.5332 1.2124 cv
.685059 1.2124 0 1.89648 0 2.74414 cv
0 3.59131 .685059 4.27734 1.5332 4.27734 cv
f
9.95703 4.27734 mo
10.8042 4.27734 11.4888 3.59131 11.4888 2.74414 cv
11.4888 1.89648 10.8042 1.2124 9.95703 1.2124 cv
9.10986 1.2124 8.42285 1.89648 8.42285 2.74414 cv
8.42285 3.59131 9.10986 4.27734 9.95703 4.27734 cv
f
18.3774 4.27734 mo
19.2275 4.27734 19.9126 3.59131 19.9126 2.74414 cv
19.9126 1.89648 19.2275 1.2124 18.3774 1.2124 cv
17.5303 1.2124 16.8462 1.89648 16.8462 2.74414 cv
16.8462 3.59131 17.5303 4.27734 18.3774 4.27734 cv
f
18.3774 21.123 mo
19.2275 21.123 19.9126 20.4385 19.9126 19.5918 cv
19.9126 18.7461 19.2275 18.0566 18.3774 18.0566 cv
17.5303 18.0566 16.8462 18.7461 16.8462 19.5918 cv
16.8462 20.4385 17.5303 21.123 18.3774 21.123 cv
f
26.8027 12.7012 mo
27.6489 12.7012 28.3354 12.0146 28.3354 11.168 cv
28.3354 10.3184 27.6489 9.63818 26.8027 9.63818 cv
25.9546 9.63818 25.2705 10.3184 25.2705 11.168 cv
25.2705 12.0146 25.9546 12.7012 26.8027 12.7012 cv
f
26.8027 21.123 mo
27.6489 21.123 28.3354 20.4385 28.3354 19.5918 cv
28.3354 18.7461 27.6489 18.0566 26.8027 18.0566 cv
25.9546 18.0566 25.2705 18.7461 25.2705 19.5918 cv
25.2705 20.4385 25.9546 21.123 26.8027 21.123 cv
f
26.8027 4.27734 mo
27.6489 4.27734 28.3354 3.59131 28.3354 2.74219 cv
28.3354 1.89941 27.6489 1.21143 26.8027 1.21143 cv
25.9546 1.21143 25.2705 1.89941 25.2705 2.74219 cv
25.2705 3.59131 25.9546 4.27734 26.8027 4.27734 cv
f
35.7036 20.6855 mo
36.3838 21.0371 37.0186 21.1279 37.9585 21.1279 cv
39.5796 21.1279 40.4976 20.2217 40.4976 18.9063 cv
40.4976 17.6943 39.9307 17.1162 38.3896 16.3564 cv
37.1426 15.7441 36.9736 15.4385 36.9736 14.8613 cv
36.9736 14.2715 37.3696 13.7617 38.2764 13.7617 cv
38.9224 13.7617 39.3647 13.8633 39.8965 14.0781 cv
39.9766 14.1133 40.0215 14.0898 40.0557 14.0107 cv
40.3726 13.3193 li
40.4077 13.252 40.3848 13.2061 40.3164 13.1719 cv
39.6367 12.877 39.0586 12.7871 38.1406 12.7871 cv
36.5874 12.7871 35.7485 13.7617 35.7485 14.9063 cv
35.7485 15.96 36.2476 16.6289 37.7324 17.3535 cv
39.0015 17.9883 39.2734 18.3281 39.2734 18.9971 cv
39.2734 19.7109 38.7524 20.1426 37.8794 20.1426 cv
37.0405 20.1426 36.6104 19.9492 36.1348 19.7451 cv
36.0664 19.7109 36.0098 19.7344 35.9756 19.8027 cv
35.6465 20.5615 li
35.6235 20.6064 35.6465 20.6523 35.7036 20.6855 cv
45.0195 21.627 mo
45.0195 22.1816 44.7368 22.5107 44.1587 22.5107 cv
43.7617 22.5107 li
43.6826 22.5107 43.6377 22.5449 43.6377 22.6133 cv
43.6377 23.2695 li
43.6377 23.3496 43.6826 23.3828 43.7617 23.3828 cv
44.4307 23.3828 li
45.5063 23.3828 46.1074 22.7832 46.1074 21.7061 cv
46.1074 15.9492 li
46.1074 15.8691 46.0747 15.8359 45.9946 15.8359 cv
44.1235 15.8359 li
44.0454 15.8359 44.0107 15.8691 44.0107 15.9492 cv
44.0107 16.6055 li
44.0107 16.6738 44.0454 16.708 44.1235 16.708 cv
45.0195 16.708 li
45.0195 21.627 li
cp
45.4395 13.376 mo
44.9966 13.376 44.7588 13.6367 44.7588 14.0566 cv
44.7588 14.5098 44.9854 14.7363 45.4395 14.7363 cv
45.8813 14.7363 46.1074 14.5098 46.1074 14.0566 cv
46.1074 13.6367 45.8813 13.376 45.4395 13.376 cv
51.6616 13.9082 mo
51.6616 13.8516 51.6958 13.8184 51.7515 13.8184 cv
54.9248 13.8184 li
55.0034 13.8184 55.0498 13.7725 55.0498 13.6934 cv
55.0498 12.9795 li
55.0498 12.9004 55.0034 12.8662 54.9248 12.8662 cv
50.6406 12.8662 li
50.5615 12.8662 50.5278 12.9004 50.5278 12.9795 cv
50.5278 20.9355 li
50.5278 21.0146 50.5615 21.0488 50.6406 21.0488 cv
51.5586 21.0488 li
51.6265 21.0488 51.6616 21.0146 51.6616 20.9355 cv
51.6616 17.4336 li
54.1997 17.4336 li
54.2798 17.4336 54.3247 17.3994 54.3247 17.3203 cv
54.3247 16.5947 li
54.3247 16.5156 54.2798 16.4814 54.1997 16.4814 cv
51.6616 16.4814 li
51.6616 13.9082 li
cp
0 0 0 1 cmyk
f
35.7153 9.11914 mo
36.4854 9.51514 37.2222 9.59521 38.1631 9.59521 cv
39.9082 9.59521 41.0303 8.72314 41.0303 7.13623 cv
41.0303 5.979 40.4863 5.27734 39.0693 4.67627 cv
37.8574 4.18799 37.6875 3.97314 37.6875 3.51904 cv
37.6875 3.05615 38.0044 2.73828 38.7295 2.73828 cv
39.2622 2.73828 39.7153 2.82813 40.1582 3.01025 cv
40.2593 3.05615 40.3281 3.01025 40.3613 2.93115 cv
40.8945 1.88916 li
40.9282 1.80811 40.9282 1.729 40.8262 1.69531 cv
39.9995 1.33301 39.5234 1.25293 38.4233 1.25293 cv
36.7354 1.25293 35.7373 2.23926 35.7373 3.56494 cv
35.7373 4.77832 36.3501 5.52637 37.7661 6.12695 cv
38.8652 6.61426 39.0923 6.85107 39.0923 7.31592 cv
39.0923 7.81494 38.6841 8.11035 38.0044 8.11035 cv
37.2222 8.11035 36.8262 7.95117 36.3501 7.73633 cv
36.2583 7.70215 36.1914 7.73633 36.1572 7.81494 cv
35.6475 8.98193 li
35.6245 9.02832 35.6475 9.07324 35.7153 9.11914 cv
48.2603 9.51514 mo
48.3633 9.51514 48.4082 9.47119 48.4082 9.36816 cv
48.4082 2.87402 li
48.4082 2.81689 48.4302 2.7832 48.4873 2.7832 cv
50.4141 2.7832 li
50.5054 2.7832 50.5503 2.73828 50.5503 2.63721 cv
50.5503 1.47998 li
50.5503 1.37793 50.5054 1.33301 50.4141 1.33301 cv
44.6343 1.33301 li
44.5322 1.33301 44.4863 1.37793 44.4863 1.47998 cv
44.4863 2.63721 li
44.4863 2.73828 44.5322 2.7832 44.6343 2.7832 cv
46.5273 2.7832 li
46.5845 2.7832 46.6172 2.81689 46.6172 2.87402 cv
46.6172 9.36816 li
46.6172 9.47119 46.6631 9.51514 46.7422 9.51514 cv
48.2603 9.51514 li
cp
60.5913 1.47998 mo
60.5913 1.37793 60.5474 1.33301 60.4663 1.33301 cv
58.9375 1.33301 li
58.8452 1.33301 58.8003 1.37793 58.8003 1.47998 cv
58.8003 6.94336 li
58.8003 7.74805 58.3594 8.14404 57.4644 8.14404 cv
56.5801 8.14404 56.1372 7.74805 56.1372 6.94336 cv
56.1372 1.47998 li
56.1372 1.37793 56.0913 1.33301 56.0122 1.33301 cv
54.4941 1.33301 li
54.3921 1.33301 54.3462 1.37793 54.3462 1.47998 cv
54.3462 6.98828 li
54.3462 8.58594 55.2422 9.59521 57.4644 9.59521 cv
59.6963 9.59521 60.5913 8.58594 60.5913 6.98828 cv
60.5913 1.47998 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Juraj Blako) ()%%Title: (STU-SjF-nfh.eps)%%CreationDate: 9.10.2012 17:03%%Canvassize: 16383%AI9_DataStream%Gb!Q;l!!Z#dce4BmK$9tL.m7d7)jb/M?;(\9Hl51@'0Cq+5aJu*\qh('#Lm!g>@2-ZOf0gWp8lLlK[Z;DRV\d>>9I^ko_q^=40[h%c@hCT(amKfh!Xb&^;&#X%nA',iCno=Sd3d_M@R\+3:17EE0Q:$_+TJbG;\V\QSid6m4T7Nfm"hrP0Wutp=,KL\%<l?4*qi^$,^ai%R#.%#dRdAG$5V&`/%6FWHT.usV_9Bf/0BM`C^\'m0%tqAJ-3RHilc%[]^#0*!,0,k3<>0Wn3O.0^=W8*,p4/"V?']mlfSUH;:8$i%)(,Uf$cedoqN'!T<ICHS^e%3!H!g%;KAg8g[[4nbo\Cll,L5G8[Q">MiVO$s3_^n5:6#Y$R4*\<2>WO4\@q6%>iW_$1^_l(LH1g"%f*\<t!)$/e&/46E$''prDp`fsMXpgo6@+?^W,R?#Gl3TEmJ^J1rng<1Fh9`*/n^)\bdH0/MtrnYQhB=P!<[%rUF?%sTA6WiIBbdQ%/hsE4QO3TTorQae-_64e^+aF8UdbFdl6ia]BT%NB&dZ]t]RoKB3o_t"d%T"`T>%6J\=NAlNS+E.35i.>R"MO&iim,J@XaOCU.E7n%%$(s>XHR6/$>s&H`!@JF#Y`5>jMkI-12n`R#K(72`$]"n36D>b+c^!If4^,`U/DVZ4]PBhN&-JY:rC.iir=]05AgL0`cBb)8hC+=%S%i"_J1eF9@g%d0+O/C/&9*eE!*n@ePp?UqC0G:(gH`mp4QA!es5hK'=[E.d^d"-=T0U<0^I/-Pk4<UBbJM"F$_O^UI*/biW?B!c%nQS*dC[jOb`Ug;LcbipK0*j>W6itq2,[d/Gp]o\O,[d`B!nMt\i$YUkcbir^4FArWLJRJd=@Wq\;aK>eppM<\kCS6A_%^C*0g-?u%IL=tsT0mAr5@H.r-MRm__)BCe`QqqMi$YT.>6I0!]4FaqG@@!!-i=-P"@"%TbU3f:[Kq?!G/M)!'Xe>-`8&<+@4g+ap^-6l!\BQ4%#?$S-N4FbT"@)FG\E0*(9KT*\@u$;lI3dF[s'RG2555F-i?#q>`m8Ub_8!2iCnKM#Qn.r;fKT':J&0^preI,5E``B-@4g+qpka>0%9*s`2`XafH1&rbij[\_p9HWCXXG-Hso*)TC;\(=tFCDg!ZJ8fsLAVS5JZY+^'=JCbNE_C7_Y1fA=:<;2C`hdGIM[IM3j<`:[k-4<%mU4=K$s:)P)4"i&Q8V8oQ4tkXZ<kV#MYW:3_d(6,1#F,8Ef\:Y_mI<b13O'H^Q5#IJ!b8XR95ntT4?_c#QjjXj]BuUr/SZHCTFI<%17qP!a3lQ_]deO$D,l=$9il[Ek-E\OO<U*Vn84F019E=F10tA*^Iclgq?R%0X%5n`(^<3%s5JNI8;$rl^\FG=*KB%koe6:\MrERY%?i2Pua1pYS)0]?^Qd+M;l<jHBQc$Sg^\FG=>q"VDoe6;G/E5RP?i5s_raC-`q[S)7I`9(`?hc9f+2d3NW$#X26@n.3?go04QB4^J%n1XQkro%e\0A&(b(<pQcWSc\7EDHHb_h+NMm8tN4:gq7>r*,3g:_LanjDmdO.L21n1%ZL:"Q'mfX]U.2ae_jhM.%5p%"&/A@m'N&%IN-gg3+.X]KE]a;AL+dY<icjD@KhNKc9^*]Pg([r1,7E^-762.Q2nE$\LrU@.EC*1?gn8MMeUBZ9]1?KY%Rl#Q!8d4@]mi?L$sZf%W\'FKamYqS#Z2@$TioSs#R<PK]Z5M5qJ\OX^[g-")9*+6@?m-5\485:=<"^t.reOCKusGJ(`Hh;S<3T'M9D,u\BeV4EiUq@0c+A,%^qP>k\1Gqa?hb:U%)+03$;1d)&!pb9PJ?.,`G\+]15sp:gho8F;>Ua6gk*&kj"dNO4noEY2h4H"Ot4_j,2!9dngL2AC2$@G)morc%Y2"&&Q;&dU;?TlHkmudO>$LiX9-MnA%qH0d[rII<*m%<?qaB^jjdXC9$j43q&@s%ZLFPIPDb5uK;#[3rr&/p,32g!h<E<3F%Q+^1%K;;hZ=*,%t#OZLUO_cp.lPi-4>a?n>Ke3-+D1S]sC7iCm"ON%s>?CsrG?Ju@/-m+k/k_8L3PumNA:C6Oi>"@CI>fHj["t(8='Xjg%auS68W<WHp@,_`amA/N()(-)!D$JQa<P,JIi-&V`QShFa#m'?(_HNVmfZHWc7Fi(&YjFbVa/&]BV8"aEX;@6PBd[KI;L8bU-u!fX%26mA+cuJA_$NP1iZAZJsg5c&$Q>>#3W1:^fVS8m1)MCg0h9c/#p)V#iPY3cbqG+KLQtNp'[.I)4.U-27>G`<21J'Ti83qqW[p$2k%pha.\,jSK!et,0J>?&X3E`Bp0"1T\V,9t\IH,O5=/g*[k6FmouYfEtqi*VY]$*mO1em#Q$Z;fe+1N@Q5OR7kJDoEY=I?0%Z-6Oms%b)f1DOlS*S4;l,i:p$QFWMFHbr\pddma8iE^mpIL21_YZ4Ekf!K6))2/O,`?^rf!8Xk1MEGW*@`PjdfBR.mfH3"UXi[r,fNp2C@k%!KJ,k,i5P\=5ZqIS?:q?e$#1WS*eH]I:kp#nX>%#[e%u:/q$Ku<1n]@YD15L\36AZ/--(;[b,f`LYub9;uXE)m6^hg-;N(BEG9Fh%=+<?%'4@)gp9a"1Cl@o0TPNT]Zn4=9\H9<&r!PW$"!4GGeM8(/gWOMJDVUlX((*b5;[X,&D2)-\_J"tnb_`C>\$IfYN>8\O7ga@;%(mVu7ruF(6k_89g'JjDCP>ji/.4[%Nl`bonjqtnOs(:Kjp38\>M!b$4Y\Sp-i44FG5MJZ3r_,AZnSg3[jbYCb[Dh7347:`#/=-6k%'f=!kYMlhn";)LlQ.jo%%T`\$p$_UeO'jTT"]Vh2!0"@:@3eQS-tI0.'DMkB9J?F)q[5oi17eA,76d;6d(&<KYTn2;T(JR>8#/>=%bX!bTVj-f(+U<Wi%QPM'3M6;$+'7CD%k.;/aZ6PqYO@^^#>1WV;8&m!,D%MnRDTmCL(F44@=ABVmF?IWD?E%Ud,-@l<,<48Rh13S%"*ge#Ag;M8m;X4]*$V-.EL<k85`unC[8i2if3u</Jf?Fb&Bc;kDCqat,id^XT;qrLal9`%U'eL<'M[OV=Sa2.s!&6\5e98qi"E0_%WXAG(=qUQhk]ur=fS,i2Mgt6bVsEWmXOfCYGinYtCGMK5a!"h(`F3Dem"6H3#chQ+Z2O\,_u\d0[CY85EDPpsE?3%:\HJF"T#-QM%+)!"Z;t&smdJBmq0$\u"eH'dMlY*<teK1pT]!-Qj;Jup7&6G&D=_N9_0BEZtEIAdb):,mhIa8L:jI3o7[U#FI=u3$mZjd9GE1h,G%,<!#lXF6c0hie_\,q!N:J(X1JqfW*lA$>lM;Y9$W[T+>KrJ)[;2Qs_r/8(/rerp!pj=n,X6PfufGsK@8MW91k0*!U(7ATk]TV[RM%^]03^j*t/?(?8itJ%I:EfJ"7W'$eRH^HFJnl?@_;ppQr&9$Mk:#1El.bYfFeWEjuaHcp=hc&sRUZ`QPukr(E`O.GG2q59]+mge."%R"*dE.fXa'S<;TCB$lR_C^Ib*CB&(+\!bo`ebVB-"X?5eH1fi_m.Sh=c[U?+#6WI?9u<^@D"iH-ZnEGV4m=ro8YHANdR@,)0@O0n%$<+m4U[4h])NX!!`^=*<!-J?=V&*IAqn:s'i`(,A_@Tgj3pZoI16CiK9fnVr#[7.F9"Q8DU9c3?(]C1/SY>T$-l\G]OM+=IgZ#Lp%CPt>g(N)!Nda!m$g*jinEV$2h;j=2gPcUC2(qJ>Fd1f9(B<.kMJ6*\+i?*l(\[P8J%KSNBb<DT+O/B=JLd`cGdQtCprPc8;^:dYB%`SnR/BT6CEIY4IRDqqL]F$Qf!3t+FO;J],Fo/7/_mN4^fYif7"s)"*H>HjORa@>SH>s`=OLVuIUX7'lss0ZqaHc'F,1E6plIhY@F%+P12(g7AdTm6TW4S'C%ie6@B&)):=ASmE`jmDVUddpbLFl>!`I_ZeF>Ln*=L(m]ClQ%3J(MLK+iS_;P6VY!u?9kk<dH$^%.?nn1Q%`bi+"Bi>d^q#U5UB>o<]$X3F/Ir,J\at[PO8Vcg_0de8s_>DRC6r`$+*p6ZRjb'a.<E)U62+U"<0h@Q"Cn+M(Q+JC#T)R8He<MAE%SP;,Z'^_O9h*1_:0@"!>F^b58G<DAt7_jlD^ORjE!65l@\k'O9e9a<Jp74i!=S?J^QJu^+&#_<Ra<"Jg7%G7mX5@1a_="\Nm:fWV%X[(OM1U5R#X\5EFE\gp7*n-oI9P5h.SAQdjlYM,Q="I#t@;?`.&3C9s8ob]tbsRfZ-'mDO/CdiR>e),gHUF`YE'Y;00V&6%WToOO%_9sEN^l6EuN7&P&>e:>i!3W4c"NVGD&Su%[m4?iRG'STg>;0Kfm]@`^F](uUB&dVAmFF$.=5V6T%:UU+BghV#,P/G_`_e.d?.%9g%iRJ[bQ3!0l;5^Tfb^e^<`(FBpSGmdAr@bsfT!S%/=V-.H'%]8LrVNUY65cK\l6nBj6kWtI*`NH*OqP%N[/J30>2%O.NlCJj]PU*)%fF-$D6.h?FWQnk(%5P)okdJN[):lfRIp#U..a?#i5N\,\lZB$4/!bcJ9/(D0?B:dZ%ORt?!j:?rVun"f_LjYIdfj6E3QYXWA[j\M%FGXFs`Mt/lMD`8X#`nk4ou@hOZj:l1:c0iG?%f-S6!GA/9e(9udj82\Z)BIUiP<g+8N-!]:iGm[me+Q5C<I$$_,5('?g(3%=mKGd%Y\&hMiW5t[a(KJ16&"")453S?@F90rTsr`frh4\p>(OYa#hZDNG&8*"<4b;ab0H_B$E_k4A;.W/_Jjbk1GF=B3JH59I?o^Mhn5<K%>:7\b>V*f=)2dG1I+FM_E-$$m23_+"0h)J>N;cYAs,m0qXC0Aoj$"B<1aD9(r5E\-%kPeml&3!;$=B"^X*nRBSTt`dE'1O&e@]E5%3:8ul%6AAbp'kF_.52NE97&O_ZLs*p@b*D*FY&GL`gX!Y`GqZ4A*E:FCXHL,WqNQq[`26*0)#."iF(AGT8;b_U9<lSE?cuiW$3D%%QM&sic>YdX>M(!!("X%?I[/SO%dYlg=-deXBL+,LWHdbMR'8-L5@uf9c:$mZ[5SWs.XhD.qE5MlXdrqdCSBtn$-U8Z!&T_jo?D`>%<6rE_5iZa3$CA9hBb2>aOUA)dC$-M`C!5I5Oao,qm$Y_j5cLGYY4W0^8Y6)"),@pt`Z\;U,dojQE^J^6][IW4(<fcA)PBlZKs4EW%0bQD0MAhh*;f0rZn>=`5qRVu-)jM/<D:Bl1[S`Nig<^_dZuNM;(M;JCr+VkFfMe;u?aH_s\g.5k!c?#q=tG3meR*&3.lD:Ao1;?`%8O=(YURD9H`XDWOfQO5[%l8]0Z>jP-]>6)IBY<:(KY8aIhS!$Y@n,km%fLJsImt2c:ou]]IeUt:)N#HM-qRIBmXu6aUW<M.@G;&>%8DB77JeU"k#&#o%ib3j#b&TB*3,e=3,-hd%%H[D2[[t7HN(48(B]7l:mc*s423<,HpRJX`Jlh='D((__99\i*@-Y<9>X>P@5AZ)k%-[`7*jH#LmAgr/Q>pQIhT'M?FlGeK$EufJR*-Y(RMo&7u&>W&VB-1Q3-5E%(15cJQEO[f;<L5+8\m"5#jh#7S`V&QmiH`"=#_tQq%2,r,_1VaeW#ju6iV6hfO]]Zek:bXu!<>X?3qXQ_0k)WS1JNJ/$rJWn#%X6li]':+64,G8t@Lm[dDqRTDr*YPLXI"=\Udi4J-FjCX%!em:o-$W(r08CK$9DE>ZXpSP)O0RJ"1O_rFjh@)Wn(8#M@E7PFThAI:1T:c.,DH:k?K=<T+#EERoXAem]6*.$nXl"]4`ig*1d&0m%.u-4Visg*gh<:Cgs37ss;HYr*)T^_;56I=dV^^^(.t@ESlM17XgMN#0[pbs)<W0q)Be%PkM8PP'jRD30QQ*Oi4<ZHK[`VY:Vn\=B%?fp_?)s5G<4hPF5e#m<r357Y8`$TEc_cSIqpgUR=pQ?#FP-b:q>I[j!!4Kj/rR`>food4?U^d0e^-;:GK)OIa<h&"_4BL@,r+50g%Yo$/&(SG+f?hr`(/3j";U`Oic8Z$S,NkhNiDU>%5mluP4o#a2fG>lS\FDg1"6]u+HoVrW(IXGFWZr<lS/+=`L/3J=LJY8Yc%QDou%]&_645[$]MhboNS$Efs2(-aN-k*`a_UAI=^dck5&.9m;,,rgtKWO(I-bm3N*KjXoL2A_X_J4d@&Kn+B4!8;dK%kI<5<#0W<$8'3]%6@X!knLsf92qobY":ALub&=Q@p714=:@g)8F$DOg\+s:2n5US0Aq&X$",AtY4Z?Q3R4isVV:_LE%ls&,HRfeZ*aAI!%j*h/R^`Sh%rl\(>#,XUpZ2<BO`>>`X:+FrOWkT_lI(]mLNQc&eqk3\MoC-&Dih?=/)jKLFmEA^CH'E/N/Q_74drC]3KA7&7U.Y\j#F]_'?TQu]%Q_&Q>I&8M'PjjuIOU.aH;aLLULHcWsbn;,p^=%%flr^eCYiK&:033m%TIhF]Y,\=7l\\.EP7#O[4pCCV-(Lf0N>KTYnr^eBB\C5*%mLt#bHTLo_^\Rb(0i/;eWh]\"Gb.2/;_Rj;KP#a49hn"'Nd^`>GB"3VlSe4<YnuP"hZpR[pd##ZW)O0/3shZ78W<M2]Yg:W>k\<8%_P@j!>kNAQ6nPE1e13]&^4=WG)2]k_fB\U+X9lVppe3)(?^O*ioGM\ZeTQLEFh`T=+WAPoU"]f_E5H_m+c)3q,+iq+mUt4BjMoZ(%=gml!F94^,!XaI'0fZdRK[Wca21,Arm/aE(TB>o6oc%+.?fB1,joMlrDeoT8%o6ciKED@BpBE-Y#3Se/^jd+\h"P<el0^12ohMjf%NRr1JB,jMeMl$se!/p]$G"&6J,O^".Ue8"\YjF+<r\hk30U<9iR\i-HUA+T[;&s@m:Osd<Qa$Q6Y?tX`*rcY=>qWjA`U4d;F7a5F%R]V'Gje\l3lt7YFcA+]NcNdh]Wi%lRA_"rS<t.oQMCJ]i"pu[pZ(!kp]g_4!j>h@&S"I]0Q1cqT[=$4q(%7q(5'f5h6MIe\gXYn@%!do>eK<fZT/>EG1oEN)tendu4<kO'tr8J7^k"F4n44;k=!Xo;9RgYnG`BF"i;nuD/b&`M1+V.Tti?0\8JfY%\]^j(mW)o(Z_'D>+%&/7A3`.FJ8+@;fM\N2@,J>$!e/F[L>M\M?I8?41r2ZOn6bNf?%p=8^l"Y)A_^rL5VA0jS2rQ*&b9\g:3_#/TMgrN;UZ79Jf(2ZPZ%GO;gZU$Dmd$f`_YbQ<GieR-c\T/>oMp!fU9?BF55bj.*Q[)Ge,TGHI(1.:B+jsLiNfInS'@3HC>Xt&*S<E.P;KcWK17a/_d7@]Im%6*qM12In;#%AM)[!u6j\>7KGOn0oKee.>60S,8Z*+GK;=d\eqM(U^`Z]o%(?+l_d;'1SuG.3s9M.KCon#h9IR(\iA^<c=3=`:>;2%1f_P[N`Y,SC,j<',_i6jUuik]+\d^$IJg5F%5eDL"1QeOVKMk8fu?Bj.V([?#4V9"(imD_A>`h:*)qX<lfY)%nqY%07eJjb\3/K#%:4VM*(hFbLRtLY.UQm9O8&(sH-mRN(kd"eaSKZgL^a#;nJ@V%j6A#Oq$pqZ9m/#6bI;eBfVjVC!a-d0n2j+,Hh7jXRQ/<S7TNnOi%]q6'X1\D9`"$G4UAjU:<"OPpIGsdQqWR.Osdm&g3q-Ll_oO2(m"ri[E+(R^V]TLK^#)0e+=B9i#kUBf>&h7B:0C19>92+/4-NZt9%iS6=G(1pq+4^/$X`.?N,ZcMh<>8GWj4=/pf7pktXSCj3t5Yl+?abc"VM<+=Y&fQ?r_c(0lh"P<Sc;<N\YZR4fT]mLhrmB1p%_8ho%T2\YeJ'BOk6s?0XQ/;q6*:En6I%B%uk1-*9F2'Aj4%rqFka2CCaLMQhq_VXd(G:2HD3\sGAcWbsYs1<%`u`7N7eX8n!TFTr'+:^1%LtSR*o/"Y_IRO90\M6<n7G^6kX$ZO[f*Uj%(.ofq+/mds$3iB!i*1/'RNHYbM81!QUBOjZRA?W@fYWlYol2;YhB)UCh><+7-I[&_%UmYu8hZq@DE>p8'bff30s8D(P!eOW.\bG"!TXeL(qmk*s!),dq?_!i58N8I"aGlR.QhirZFt217N%*CR=.2-)T+b,A\$,o[-@EK'%O+lS8"gjG4-RNga=i$<CCHU1M?KLTiR2Y+4T%lkiY+FJ&]:8X!S86:Y*e.:Ka0S\o2Hk6<<-96'QPR&Y;28<&8fd=e@s5?sOVBRF%ptb"of8g^R_&7B8p'GAUH0QoB^Ed4Ec?&(e\&qQiYdn^eqV_#kRlII%PQqZc2a#<Y\QCSR&Wa*;K&7C*J@Tt/o:'-+$:^q?6"p(!%hlrqn-IqpZAfgCBVoeBmI0^%l`"/#P_E+k(0Zp*+Q0A7d1:AeiY$r=$<:j5obb"M`I.e86J1qJ>8Ujl#k\.*3"<gTg_,PCIPohW5%4H(bC?@i,Qr6=OMg6gt8@..?.jHd3?V+^X,(fa/UERtZHIG]*_RB8U#4ku%[Q()*R2b=-`iU\+AH27\EaHqtX?kf'?dU=+$^sTL/%o4YH0H.nV[<3AZ1j7#2@JC^X>m;TQi`g^T<^"E1#^B3C"Y0:hP_lJ_uhhp1iX37-F!@JMHE6K164->l'eqZO,q\@B3V=D,X!1m*T%nTnNnNnq3W/B&D%`K/bK$hu&]d,9<IMVS:*QK>c94(/%/j4G00d'Lc\e4&u9E&efMk+WA^iU!,M2TX`6!Wp^bGNh8V)ppg2FB.g\%EZQZ7^/k3ZfsjOPJ9=W;NJNWS:/C.AlhL+_n-/TP)oka+Ke'@QMjt_TpQ6gXE0#NC,`^0a:?p^@83&A[hCj`e5Q=.^Dm6G-XkZG/%iFKJu0NUOV%p]%<.Y&CD0%pSd1ljaOlLM?IP!CGU.uM\[s*T5@LRu+ni6he86K,KA2eneY?8USZT=rQWhlJ:jpgZ8=ZWg_#Zi5_u%K]6[eS&*d^(nA:d^bSCDCcs8\QR5A?#M/d7/^0Xt*A>31ErCt<R1'"nPeY=)>j,]c>.kJQYJ>#S]a(*uq'E[@#o"*Ym!YBcgh6`,%TF\n)5:\jG0)V#6KlJuM3l+]AIN5s,?hM`JIX#rI"bP"TAuFn:R?7ooIXsh046t0*f3]+NH^cQe12"-Xl$5pdV7[[#PZU5@SB8e-%HT-Y^`+Pn@dU/U2pmLmh4Uj+5Ilq@Vhm\'M0s.Z.mLoBlV@jDq]!s#],^mtE7KS_iAW)Oa/9-a+``D'aD?34;Cap]FbJuq5q`YS^%RDF=IjIEs.-6f4dEL!X*-hG]pC^[5ZP+W"]io?e-o!(F#`91S;`?j-@'H*MbobER_g:,n(@Q.'j,ukjj:BKc_W=6e5hj:Z^V5%.#%.#SHMVS<5]nT1.EphHl9fP1>"<=%LV6CHoZc\QPc_+0,B&uKqgks\J$h^h\0]fuOmT8*<9ETFb3nL:fUc]RQBhl[=JO2[h)lj1Rp%n&4#bZM=?eS(sm9lgf(?"GX,-$hT\/BJ6T2S/\tQNC`$/+bIfWoedmLn8e'u=`OnQ8k(rB=;JV_@b<qR'4B<0pu'lOPE>gU?rcl^%jtG(ALqu>-G-Q^aVk5-O6q?-g;VKq3/k1H51"bp3b<c5V-?q1jO)T.8#&V:WTqD13;h\4:SH-g54KRH+Matam8)P,II^6G)NWmnu%MbtgdSfa0-.(_e'>;&<^O]hlppiM]MAtu'B*AeK&3Yk[$&c*Y)%Dspb8>o:Ah<5P\%Y]<8bjo:SokOU#_/h1ibC4_rYlN'Nias=G%^jDd[am/p77af;UbEf#?`#eZ2RG]U3GA7GK\1u6+b_:!@K^+aNG+Z`e+]G!4b*@T8kg8j%O@mie0j6Q$]SjT$e]S]D*AHckkJjdN%$(=IW$^j+^>_r2WcsGKT6XM9>BdjpO\1[ZWgits]e4nk$)'an':9d0_4JW3860.Qgm'tl,WtNHlZ%gEXc`5/TnFj==HV1&u68^d;%+=sG0mLfI/Ahku9.)t`!H=u9IHs];Ujg2/4kp`".s7!$AADdJn",gFnUWs'G/:<>]a(!uX'*&I=#[,\N?NW0eS,gc"fEeh$Xl+ZP%UrJ"IoYL49lK3Bt<VSM&;bVS5!@<h6]HgJ:#co=gd^f+tpC([_2j*'=1*nrfE[@D:NpshRo&EF1Bi*$n98b*$q@3hgX3a5*DGCs[%rT*2G[/&QK@SZquO;A4?njU$k[?dk0]JCW@6NT$Q06ce=nF^DCg"35Wl:p`k?\f83-k!p`BH1phQVQ%]^KhY/bQ%ooIF[OuQ<t\-%H4_7W4Q%-6cQ`PiOjnN^*mB.`)>L*T(*oEhmcpa9NJGA@clqImiWY(3Bg9XtH9M8$q>Lqd?0'3)n(6D.S7*FL;KqItTi+H&.>u1A%f76(4ZqlUJZhGec4(EI8M@'9*JX(^&JMHn7T"Q49+#QNtrKLI[SrO/C.i*s>EGfZ):ut^Sg.SNp>"p#T:c!T-(e"1p<,hLgjO:mC%,+&Q0Ita-6Q)%9^:PrkLD3AGM(=K"QFrE?d`/Y1<mf4Kk4Wga!AguYtcVH_kC2bu^lZF.<VX:SK`Z_ojH?sk*Jppkbe7]o+Eq@[]%$(p[eDn+Q=KB>XsBs>FINZ^EQK'-\'hY;t]*^Rh*^"I+4YY]/*#3#kD6";%Ba$Kn%!B@8)/&8r52_]#k/+k?WZ,^[U)/H1`98kVj%<RC<YUF'LX\bu7/L8[,?aAT",3=uonbfY3/NIlWsl)''YQ!?3g]S,cLLS-4i<u$M3N:V)Q802(L3)dA*p9mkRbGBi(a9P1%dbPKP%*;ZjOmDmljR(YtH5Am0^Qjnrq:Z"lSE'hkTeN`llmH]gD@B.26.;Zi04I[(t]J#_cpA'HJl/c1NcG]D'kW:Kd?OIntc6k9acuXSr%iuZkbdJLhBi#pc&/H#EaV1!=nk/L^]\Ot7QHjUSf3RF*fEcbW4+$Lb[Ju6=Lds<_19[#c+GPU]$03#G$k9"h65/l<j*=L^r/e7`S%p(El-mFT:mH,VNIiVYK8lnjSseM:kn^Hfi5gd;*X3C<;"5VX!57qS`l2Wg/R[Qf7ng$+3k-@C-s)5ms^Ke(akV334DDLJ$\hNmX+%jAWAeg<pc_(D2IlA1as_!U+sik4o"/2_nF[-]d/%D(UVl>(P[U+9Ai%&-P&D=;8C31'#ieSY%0r`Rg<li"=1q!G,gZQOeRV)rKHt%V"&r_b+:]^^:+0dGXjb=0l>bh=fZG)q-%_:e\>FMQc&X/T9V0:FW1P8KKG+Q:m<eMR#sn,eS6M%,'V,,KA4IU!^p8<a>D3<5TA2,%K>-!0%P4mteG\]CMqfLYCG?aQ46-%a@]q&Y-M@JD(4Fg>d2q#MQMEF:i8chQ[V7[2K$K-!KG*#oBi6is=6Osp1/5']h-!57K[=H;%Td=?<?]N/W[%hsp_A%(<\pSjb'?u<<fQ^b[>0]8d@\SV3YAL09S$Zd;](1UDKD^K5_++gmB@@no*OtJ/Vp"&Ncq7p2=4(;\H*hE*%mXVIb`^;b!E%BuL!P\49Acu3`&oDlU,f/bgknS:LS=Xi?S2^<_h_r'h4EK=(HdDDJ&)4"uaa,,,8;$)M]/+F6LG;6m[9Jk+,`&c5%YhX`S`)4E%"]MUXfrd=#[$URU[9^#u2WZKW^0.j=?SHos?Hl7'%!UjWDdLbeZbl(t.6\X\h(+l[bl/g8h(@OOIKQBo'nX0#3Ett8%eHCTKE8'(%2'oO+LNr'$eQ.af?l0R-:u4$IYSBp.k1ZS2Z9ZFj)J;e^PH3k!^BIMe<(i264`ck=gss*>B<MVJAF,bC4rTA!6nYoB%q^`c^r+Dd%k$W$d[:ZcDXY8GX*q1-B)6(&j(HBWHN,NLPAT-TJfHDWTrF#HWG=oE=c@p?XU\!sCrm\Jlrro+)VbYYXJ>7n+]n"(:%U543^:Y5tU%RG\B/[.IGQ#dE>$R`17II),"e/6u64e0BA4pXPB-U=QA3X*`M/nY_`\*k<2;aK-_EVg8/\>VQ_K0]p,$]A$Z)j5D*%/YHWJ'b&)?"nlg;W1/47k_BQ/C-$sER>5YNZmuXLed4lfjb=')ZQgAV:Q_EX$1*Yl]9k(41uL6IK98(H)oYsFW`iTrqPjY<NnJN"%&"BmC3`;R7ODsR2#:<D/[jedf;nHJ+3iK$(^EIYp9<jr#BTeW0=)Wo4a`Uf-4`36<6hM*hmPfNiTq$LBq#[dXQ^6m+)LIntdkje"%![@t"YYe>:T1->\MB@m$^o`^BJ(/5WJYNsmjB%m;DlUM"aDWp7=qcYcW24=jJ8KtY;H8:oqq1AQCO0hS"53f1-!,!1Q!N\bSH2]S%4D#!qA&/iF$g3d8Sc!;@b,O72TY1=*@_`c^^tGddb^hI3-&,QSJTUN?(:\VQ7&WZ73Y8gr?F'&>_kldaXRb:Eq1]r\YnrC2Y4.])%NQT<9kA@_2R9#n7Jb+6fgZ;qgkH7Y"F74([!pNS)jh#e0\:WU*nEBHoljBhWF]\)/WSe+\f*iBSJ+b)Y;-2Uua"<[t2'B%Ui\#+5%dqgY^`q^F"nq)&MTEpq]PUa0=H&#T<e*!9<E.2knW?`8DGWGF6(1o5T6W&5XTaEHiF$hq5Sp+mu2E$i)YU=XGI)pdJn5Xb?k2HT!%fkTLLE,;XSFWlWTMZuEZ]VH`V*B-?^C_7JL&'W(1F@u4$BnZ:_"Y7;cM\L[^?Nnk(f-tGolBf@9**L3Q>l=?_#Q--4_;!9>/^cTJ%rVGp,(hkGm&PZS\KFO&mSD7'aDB2mq.6jnugr;l`0!DdXh4cXP)Z@Yr0hK-;eDXHU/j-u9O9sA!\$taM/fGtrSt@E^nm<=[4VE(R%_gN00pY?[oPnG!r"V[^0Z+F&_B$HEd;PiE?VMZ(!eLG6*ToA0?'7M]InCpa.Q]Tc\*Z]U\ZfS]PO9/SO'X`Ac$mbY>\[m?*II"Qb%Ic\kYo)XB+S#qOq7nPI()BI]V/QJUH,\+2un`/-t@"MAAnl$(F)BrHthcVb2A\bS(lgr?1Xf3Q6_@o!GNKB$u:YP4-?G*uk+f0i[%0s)W'=L>bf;L]8(N0//,n!*<J^,KlmOg$fdO!5*W,GYf.<=5mH9\RW2HhrB=X[u/k&TKP/SNs"M2>5l5rejmuFUaGPjpnl7XjpPA%=[Ms)o'2>-p$1`A,;$Wh"AMNr10!qS(c=YFE%d6o^Pgb.pl7jXogl:bim8BRB%4t99p!*cW-Yba5Y.T-knmY3]iBCWi6i0N]le=,%MY-&5I$HKS$8"L:R\q2h:N8`++'"A'og,Jl2amL=V.ZYrS#&YiN0$*U#&UJ=%s'X=K(QqSnF?:A2+7:cdIA/!"Z@6mD7-[m7hZ*A%ERal&_e4r#k'$7c<(QfoOhNKdG6fW;?e3smW<H%hb`E02lg?]CN:]$g'48)(]FHCG3s*eFImUdSKB$Opisf#-8D?YXP#c9L`7<lu%#E]5APih]7bkJB2[")3N:<u@W><i)\-PFj)_QOnm:9!QK-pl($db_8FBinUKY)X[ROGX`[OUOW8m!:bU"b8G9=>PYLZNNaDi@P7V%lucln>7X4"^._jIf^!;WcH><O!"2%2=Z;%/3Y\WdrW&b28rlpk?MGeAah+dcV<)=7I@<Jnfo'IMMNC.U\?3fTMeM:]#*Df!%),<'%*^)+D/cej^brUd9cEnI.ZROq4\N$h8cctb0Q/V=7gQeKchZ?H7Vk,a$?IY!pSq8!pJhD98U]@#*=dX5Bb/]/K)EqLAS"oQK>TV%H%Skd8Wm<^jnH`H^eH+Am_l'Ie-gR"h@bjAp1cK+6\XE&T/]J+e<U#$gXC*4'nR69Y:2js<\A+I"t<D1=Q6AA:r2_VO#Oto<*N`E%l%V(Y4%:\iIOqmDeLH(+:fjAV*Wh,B#;eXZ[06lb>_hC]%;H+rf\r:E$#r1*XdTCLC"HS?ZD/6^#Can)F&$+l!I-;Q#(Zd>Wm2h(W$%?K:M/+oJJDa56cuMKH&:h>2P]m@hAFp(MLr'T<?1*:#iF#g9!t^@BrbeGH`<kOQ^`WVc4gpY^2M>SoU=`UhZO_p)f]]O(@q]`+GC%?/FH"-Lg8g&JDFPahm`=.2Y6SI3uXVGKTT8T!!&A4?rT91QVODqK@2Q9?i_>h]*N5FJ=0RK<,khriG4HWEIGYC.?K">lMk`m0XWs%+'l^<%kt2'oboIOX)A0Ve_p?]mg<&u^__;8`UI[-o@XCG;pQS6.d"fpI-La]dAI_Jm%@M0=%Yc**#Y>lI)*W].Y?n[6u+a#,K=e2%$V?PQP8Q@`ViOtori[YnZI:hE+-GSIM3dbHR3Oj-5!l,;.3ZahRNU^Q_(9<CT!_P))Pk\$(._*$W&`:(8UOR#ZI$3+d)O8L^\m@k%7Tp^G)>m5Rjm"3=Hg``a"Oc/kl*6*[?o]/bDcF))#"**o)^FI9T?WK>#m3epQ!1P.mU1V\bU10]TjrhaD2K$Rj!?0hg/d9sQm.7`%8CNO25ntjB0!oK/4Os*S*<a(\6BAiP*HAFNfrB7Cgt1f)8^4$bF-hl4ii4kV'@m5n=g=9b<u3pJ"`FXZJ_Y']K;BZ;b<u<u&hul<%XJ56]gO$`rl_*li5nW&p'H_qu8hP?al;R'aQq,J<?D>&[T*'`nBBct9f?d$I!;]s]]3fNpO(/?E?PhjfU-4$uf)k?cr<TV?Ma=:R%0:a`,M%<u3<I\3[A.b)BVn[6eWOYXf!g$)]7GVkR!JNfqd?#cg<E`3)UcWC\?m*;[;R6RVT#-V*j[]*-^6fSAck3*!$#VC+U(>ID%*3VY)<)E[]_-G3VXfaQ<*IZ_,F)lp,?-nk:;>V>NZA%M;rDYK96+-aFMhf=FVZ$s09C`/I6VteR>6q/jo34#oIfG\u;p^i4Qt6<b%_-GV5DB%T<15l#"r'&f!/6/heNffJ^UY@/fnlD8>j*O1ZjLmS2=]k:O@Dsdgl$3b6oqnY^QCj?HPh'VEO2JZ92a3+@nU4845d86:%/6,FkVp%sfMf6't96u\:&&OB/1?c<h]-<b2=,bA3\Q8Q#S&V%i<N97\9fn5@<kfYnB([V(+YuH`I_4-0>=H]%VH(?/e1+raqAc#@%LPZHL19iOP[mF2,@2(TKa>qeSKho+j3n[6ldb?EaM\8hBNA4d3mu,jIIA[?FOHAOR"gECLeHR^;:dF>'1"^T'RHaCII8p0QTm,'k%LEsD^.$[L&10=tE&#lbrWNfQIfH[0ZKV"@86fEf2"]5ic5W7=df<hMn7)!;bEueOWP*<X-PVKpHmNljagrNmKCZ'p2]0rukPTIg,%\h4#%2apADCY/3CTKcKK#UTZ&-D+-[MnP;)WY344_nBX]NoI,,]dI=G#K1gkf$&a5MejXfEF^e)Wq=q_klAHd@l'9'P4%)l5uX+F%1:"$Ia3s/&o\_'_c@5eMb#$("P.V=0Su5l$VT[r,$Z+;)_hp(kRQ(@\-M,tN;YB;b^bMsfh32>PMmbL`Ur\iIBM@jY3M`4UQD(;m%\+bn_>#Ce3d^)VcYT/<`CM_#qAQ/?WiEgT0NI?MdIO;da<Y!9rq^P\#@\Sf_F4YbZH/VeL,L+09kDoLT+5i.>>HVtD<1DML,FGha%]hj]?RD.>;-EASeNY(P+)3V;I$J6Limp#4uP>,dF'-bbbJLBP8*27IL/T/0\3F:-56JS"m,bIZ88:F?h[_7CVFpLcn)OG]&\$Ukb%0MrB8%6H<kal2*6W#Z=t,%H;KrELDb!.ad6DEH`7D;ReQmb4,k%\$-F/6-&n<]ib0acitnk'cbo+%E2Z69Z(A#!BV%a#_K-j?K!\%(Obpl6TuN[Ha'`]X5^#**bgoCR2+P1=``#%I%E!6$4cG?IC6@8leWUe]$`+==bO^CQ2pjD'5M>VrV*]*$%%hgJV$U[@N-KD/(K-9%-$fAA#lrql)r?+2hfo^D=rWcO#]ED>W;^8uk]!$0,j[GQC1SVZkL^?B@o!`PS6a.%Z3=ZNM;,s6bi1L14(e"$XX"R';\Nll]$bP5%18T,i.sb9#bC#*"L,1FS61XGg8)DAe(oG?$9kok>XPr!JU)aG@m9FJ.JM;@n!.Cj1a1r_V4F-*V:[rbmY0gqVU?Q9,1rs)WknW$I%\!$i[<ra#lGdeW%XFl4eoqB[LQ\F4OD)VqR^+AuuZpUD1)pn$1!3LRI>O.ifenHEJ(u`0[-XcF,UhfSUWi4`u'a,;WUG#`hXQ-Do%(q$PAc6GE:=m[Z=W7NST4CX:g1E>dMEXQX32/rb3D[f*2hXiOL_Bs1'B?P:UR-tsoe#j7"22H"u#LS?4TB`>=Yj>1:$tpYa2rO$B%G_*5j/c(j<nX2BL:CWep,hu1NgLu&==>[dD7;HdZdEEd[5W90\d2!u*C:/I#h>ir=U5qE;g0?pq^mP'`V*(+he;s=RrMG]GgHkS'%gKQM0fEHl5^I;oZB'g>LBpgTEAZ5U6)+!9B0TBo)C-(^?17^^HQ4An&'ZIPG8F_3:E8%MMe7EjaK8i#q:Cj<9C&:QoTKA-lX:g*A%cHH>tgDF(hqke!!H+s7F#JDmBH%%c/HZ',mDE/!TZS3?WkT.49W'TSn@lSgRJO!$?4i-fVpPj.92942m2dB'B^p]3u=cJ,$.<_C*%%3P?7mkmH.p5?r-rFUFrL:(Fi;s`0!d1?;a1OV)#$T0^J!,V+k9-3_%s().,luDoaQJj7c\;u-CJKg)-H];Kq7fL(5'Sh#[**]23%oiNVHR.eobZd3<`)[kVjn=VfX8m'[<^?i3I$+BiTBIm-'8ojNf\dcR,(BAQ*Qqg./X@-6+*O1-YKaf*"%8U'6aT.\[Ks]h'!`79=%;$BTsX6&!`D7:mt[5=Ed4k\>+X4:.A$8=ZP(d4<iq9@[YoHY;).@+K`lD5Ge_?Rp+Zg"]))G`73QoYV58XdcH2=pYCZ[OR@)(TPP%(RU'BSjq:P,J.1:nc71CIV9o$AZO?##]+3ZLc9@u:-@3GAO,"6:m*]jD_6O.\/>$\`+&<iO9i?`<K`2p%AKr@_A::jN6"m*89Gd=%VJlWbjOl*@qidBtq#+-HR;l5.-m!+@A^EHmLWQ6rcCeCb(tp^"c8pRfcX-@lTsN%;ZcX'=-ATl-K2.mf\9e^VFU"DSI@)!8lO5g[%[c#FkFOh=O%ejCPkc?T(d-cnrjNq&]6eP6?aJ#rcTHg4NqrH+,B@'6Lf]F/7m=o0C%(!L,[r&Y\hE2H"o=G`/As(s(WOQ[&p3F\o%,@?>tqY&]I><CZF,Lh1<(\"E4c!GG^285O"I&GXuHs4k%=l3rU\![X?YRs:NY45Wp$guh7jM>`ZS?q+en0WRgc#hcNc=W6`1ESQ/%_(8,\:RQj_d4LREm+Iij+JIAT]fk*r:i3HP"REeTArr)5@FjT1hGM1$U@"C]l+/CWDDiiRBm2m](DrCWQ[L*uEjD2)ZAj=!Zn^6N%Vl_(FCC(hfZ*$_p9fGg7+=JP*!K[+^!n2&'!cupj5eCJMkiUq1R?'7C<r;+&HA_k[l#g[b0O3p?_)08UWt\J]O3_\Nj6!nc@'l4o%pga0Ig#g(Y?p.33.iBWEmC$I]MOQ!e)eFSo]aCW^@'<4=G@I%(53nsOD""^rPtZB=PC'I^TTse;>'bI6AO;Q6.r>uO#=P!KJQKG.%<rXI@2XQ(Q,*-YWIFc4((3t9HF(3@I6'K2:!NT!,,?a<SLO!LS2Sc\pb+9T"gG!ErMIYdA+^6m'Z=pjj9H3bdM/+'$QKa+K+5:c:%0dps6@$FXH1i@#i0;l8pAcPe_A"*5GT^g&,m9X+hfU0T:lqI-(6G""s4d.ZGR,%;\krp4t)OB?`Kq,iV4`/%L10&54*a2ng0q\')%VmpTprQX[_?XhNA]dYanEtpU<_od$L>9A-bS9AAfO(@)`SZp\+]\J_dM_g)=F+*+CTBS7BMm]OIlmZ'aa;J)#o8G)m*n\RV"!kGE%L+O*hb`kmrY?c:Y::'OO2@sGd:\n'2XU)ucG.'eH;eDOK8\0:[R*N-?7)jg(G.UVq.`9P<6tXp9F;mek(*r.jm^Spn(:o;1H]jb7%R+'`FaB[)WU]#D9?.k%T-u42LV@A`iI3LH#]*@JVBE+hH6tFg'*VRt/[ZAKHA.'`5GMOB8p=3>9l>HECgI,RGir"lmRs*N?9[3[O%iGD/l]j28=eQS\mo$4Xghma\>H!WL!:?"^+[b``HB;0sPE0\<DF\pPGG0XhmA34L=kJ$=Bam$g3H,\@cKoP>,\uc?Pfn,^alF,Hj%BXgF;@X#SYF^CV"``Zm\Dr)UgP3^=&W?NYAhGudiq:MIs[LUHmeiU2,5j-dE^?6[1iUD;`%:Se?oAOjQIr,"039+;kLX(\0CPSqW%I(0VI<"G3(LMZP<)Rq4<cL=4ue,=j0k/6G-6cmN$LWtT13-Q&<4)dBRNDflgO:OkR$b<,&_"hpRF"rki*>hB$Fb*;S0.'d/OR52n%\g)sSI7lYK,1h!0m&'[)rR:)+&[Jq\E[)R)S\_a9GTe'_jEV\Z'RpP-ff-qm6Wp$?)t/@8Cse];!AXP%B1_hLe^.\Q&#QR6-fSg(%:q?PF37I19),[k9a8QR^%.(f8F%kqfW>ZQ0Sp*^QeTp2*hZluqkP7D="%I72eBm(='uAQj%7qs5$26RJ#/`0&:H(I3bB042"K"=k%B%(I-,cJ-")IX!U\el26gZV769rNo-eAjpeUqZdK0I%;44'Y8?g[>.u;X't?+YlsM8(U%B./#Do!M$ji-BTrnlVs"+e/1rQ[`q@N%Ige.o,rXW3LD7\dd*unk)8Qu/P2>,c)CE-:3l53.91jmo[:9G9KnKBW`Z74r7dc?FB@\_k9nh=PDJ;0IDS(2UY,QBO1Pf5oIj>cS%0WK*]<&h5ZR*GFE(dIDT!o<[o(5Yi@%2.Ed#d=!CSe$";)GE,S_oL>@&)%:36X\W#aS5143Xb<u_qQaqBX?+XiJ=T^*/gp,0["Ad%7RppmOkd#_aehH;d8>PT6&GZuiEP=N`E@B_cioiBYLfs[iC/!iB-PN([4$Ko\'>qH&aaQ#F-3ND_K#UU?FU9j)s=QR!"Zf/C7qFO%00HoS4iW[L.U\k[KmSZ$nq066gW]niMZjc;cq:%&lur<r>U.-fRM;uJ1B72eQL+<URWSgQk+aL`m*N/o-:mrBGcCDK=gHe:%(eN8%NYGg#D2K$6W]`&Z`U[_!lu^?e[4"BbeY[kjX/6W-qIDO060?fN_iF=kACqn/mBA$;8uSP#-:m*DHuAALn7e3Tf!7nk45nGHQL9c?%<2==(n[WRnf53=>pD3,/WB?Ol"a6tLC^Sm&4i%@=aPWfJlrO,WLoku>T$l0,qP(/bIJT.1)\<+nfs7OdSY46RSDFiXB1X.s!B"f'%kC2HW>J17LfGaEsf8'bl2E9A_m5`dhWj0mH?e.`(YO/kU-Rul>5H4<>%qYH\Yaa^4mZB:f;e</%jL1#aXW;_rF#N+'iMJN',HfkS%B6f?hL4+IT\jXiNI4"^&g"`X?Oedt\%G5:(NNJG6Zda055L.!WbVl#YDm\?Nh?A"j,/)`De*S'/fe/c>BHEg9i=;,IB9Z&%Hp5b<%flT\<5m)Pg1RlZ<QYql.a"<U^9m>=[S5#nkMa"WH5hU6KTJiAQZ?8'rdA5XULqHG?S^BJ-0if>DS'EFK::E!!J8@9A3/dK8\3jfU%)9(=[g$>?;kq(,j3aak:;(eD_n)tq#l&5g`eGBKqVDBDfJ$SVDflT^^kAYA$T%_8_1[73Bh,&H0e#e8VGc1$@flZAjjWUtp[c5rb%flZPQi)sfMcDK?]A(tSD)9oB*#LB8'!e><l&"64*"Mf$HCc\?AP-mIBHY:eFjjNC+YPVt])5WC.=%3[^9kT\`V]T:>c_`L-L?>qG%K4NHaaQ,BI2P!\tS]-#)qbI2F]EJmA!-S$o%5t^52A=#63kcQgc!`9qagSUmhSl2WX"tsAd_"/r^,epU_B,=-hJB5);M@d?4Rl&`%NeKV.-nNmO"k0PcA"qOGZ=OAZh(H1%4;j97GB[<GaJZMj-_lY8<Yi],:OTk/X3'GNcA2n[SgRUn+i.QU[7+Vd(ra]P]%\EAc1m_h%m5\8A>k79c\ML]K=#SWbm9XjHOi_/fOj;OGi7@dhV2Od8Cs^]>E,=Fm()tl\fnh+`D1CB&BggA.U,tHI8pRIQmc<04D>"""7YTKQ%B&M=?c!-`[26RuNcf--oB.Ne#o+iY![%qp7>b65[em8b-T??"fj$^Hff+i+fc\f*%rr@mt)u'=mCh4HPDrS!jPm/,D+(Q$f`AI4b%QXi0:C`sb.Ski=TQk"5XB1&)hpV:mYn.$6ak]]DE&%<LXI`U>AFdp":2Jd34:$a@eL<N0FhFf!tMWo-=%ek-cFrU!/ZQoZd?O]D"%FLKpT;g@oZ/d-!3@]dTYm/"Y(jbRA4F*abIet]VN;ZS&Gr,O:uceR]=^_g9;_hkYAPa+I]^Q+R;mX)?\,+uF-e*iq6Abo&g2U'*6%pJ<fXEnr<baue5bL2a4V=N9L@bVYGj)r4k[CgAm)3V2db^TT_]?U(B3Vq#MbB=iOdPC'C^N[Wbl<Vh%T\%IMeV]aQI$sTn(6Jou$%QH8"[h3aU>;[rK4iD.Y$1qr!f-T,/@iGSC:X1,XucGCMjGMF2_o<AidcqSd)eAq8WGmDGa1:uRalW+lEmCegPAET]/X`(`(E8PGM%4bgB?L-*#FR_qiL#>+9F[VM8V?L9,k[Z=T2Ea^!^'5Q>m*Q*tiNCg&qoC2g;[;WfLg$ROcF+rRh)pL-!,6GY@5[l<u,&_S/Sr7H?%@t$$M\[@/O'@J^sl#Ed%Fp!_qCKEqhI3A\MI+gZb7GRcPI^"dN%Btu5e.QnF/aXsp0o]m!,L##OS`gm=M>PcYS$<7$I'OKa[ZeYZ%&p89ih<1%WdF2tGPB*Sj]&<]1I5!V(><.Et,;j9rNQIJrQk+soNZl?(%rW:XCc[<sVN)hRGHl"FC[UHAoV;]/1[FQ;mA:b0)l?&I%=)9S2oQN.[(dNhK%"jbUpb6L\2`<9@=PbX>s)jBn"WHrJANat?B[;tl9^/jSX`@ZHmA2!n.qF</:,D5!7IbtQitT2H7I8^d0"_J9%NP\=cb[enEj!pZ/GOtW8U]S#Ff&uV>iuW!XPG1^]He=eYnZ,MNSAPf"dp=UY]":Vd85[gr_Ze>s[q83Vd;Qc]jdM;i=duX,T)5uV%&pb-gUm06Ih&.AY\FD^uA<rT(l)3&hGG,.j<1>0\/s:bh&\HCsFN6Om=3jQ\s,OahWG1AWP;Z+O!usZ::7Y+846L^"Ge2Z&Zn6^6%b5@__RM`+ipM\VrQm+\qp:krd8GbkIja5nE2g8&p%&Sn@Y9ajXnZq<J69WaYKTm=9O-+0L"JB[2&nZ0dpPnL0RF[Sq>0FG5WjX$j%^)F.%%?jfK_!.'u='1I6mXDI#'5*7n40*4^!IVJKmM<.XRGIgO<b(`:6+a;8fSGWVV^25p,me3L=:hmj<Z&0]->:F0['f2,@(NU8%)hYO18ZI(.>L72.S^G\5YD)AP<`p\uktdo+4Y(Bu%S^XZX=\^dl%F-0]fh'd[VTh*8Lp56qI5rYp315EGd:=!TR!&P97=(tVj5*j%XRD/!R]GpoD=RH_8DKPGSB5?g>^[=R/mhf#@*uN)#<=ZE#^cS:fgm4("0D'DVS2@=+8[H-i7pfKk=/+q>FoWD@q8`WGI2UN6YKm<%T\Y"#NO'B+b^>bCSbSRidn#7^l*G!V7oek5gU/^UAp(%4ZAih-c![b`\n;MV-J5lC:;a/Ko>@_i6?\/p<nGKeP9Db%#YLR^?-rHn%VDIaKa^T5E/s.^!gjEalm6n5jrAb*tmr"\+[E3^C6t9ekf(362kC(g#%W$CM,Y;eKPkIWOeCo8e<)270=6?K4HhF!Xcbac&&3?14%4G7k;ra*Aa2X&S$f3/1/Gkped*8>_QO8VO'LZB;!8<.\e^t-qff=aOO?ZsNm[$q/rhpK,)Js_OsVgPM!)2O8da0p!g@INZV"fUlS%ZQ)5>L[#@PJCZ_#C[5FkAc_0b`H6jF^(8erL\A8U%s)R=/3lpr=QBIbj]IqVA"O_5LcP#9=b,W[Bk&I#oh%p(>,uc%e(0lVD07)X%cBn*9Dp.uQ?-6do<B0oQI%,%b42dtCG`M,N%%g3Hj[1PTgYICh_kh`M;7OMNb%Guao"cs?Z[72`*gcG3U'd!\.edOAe8<Z8C9Yg^%IYTm%$Jt)mOA)g0SIN!a]me\4knBP0fPPDKYFfr:a<8N<VgJAa;Q7:YDqD=ho_82b7tjWLi`k:*B@9/qXaXkp6Z%1RT.NXkqd)MQ%SKUD^C9N!_Ch.Q,i*JX<a^l75<Q:@gn+F#)gA:c5]A;dcIB27#2h2b#lY##riuP/Shs4q-:"H52mr5J&oo:hlZ_4_]Z($2QRX@MJ%I='f9B0FV8<Ls<JlXtXHhj,WdRGR7B4k2FC"hjTBIR^rHe6DnF^5q^_3Uc\1os9C)HN+!>qH5JM&3IJt]%>7hERl6WFf0TbN#,IS%>Q&ZQ1[KLmhtf5jnl@u#T@2$L.FPnYf#Gq-)nU:,f?\E,7WBU@/8>-2rN%q_CGSk4^Xl8F^U86chqC(l45T:9bs;(o[XIW;ZdcB0%PiP3elY!ml]Z#;HH^s)h]oR+3]EdJ$rO1&70YZ/bHAU:%\*\A5qH81939P_iHi:$aofGiJg8=fd%ejE"os7tCf'ag8oj0lK>Q+9*%O)KqN)HQV&m<t@^Ei\(`mc3%]QaUm[_tq&qgK_^qZS;:4laN0rTt/]LaV`b'?9^lk$ubgn,qEhZ2oen;[_15<b0>5/"nV\Fh!90?%][tF&qUs&=h=k5?"cCR:d<E4SDnA/6#5@u]Sd_gXlDM07R9WbG3p4WM<^2L@cF1=9cbti8DSXsS[c>&Mef112@S/`=lXuM)a)0h'%rLBd]f:H%2IBVOOo?(A-p!Xb\[9NV'ff_m_lXqd]%\#c@:&"Ke4,1mMih#o@=XV.f,P$<XqH;_@BAej<FK_=%'81e$6eq!?f8&&J%?9`:&l>Q@%bc]d]?9dbl@7(g.m<ef5#7&@LJkMBf[Gdh%=ceT_L%QH.\oX_#PJel$a*f/=McMQ,e_,9/]f'_)B?.O?]ls)2<290D%#oW;#L0;%u"JlFG.8Y">fWF$s">do"hH/UW'oI7=_e_2M,$1cs7$1V_?2fD"(C@X9VsNGd1`PNYMsnj1Ct86Dqsf@>iq;BoaE>&c%\[')#jQQDl:S-&XNskC'ZsNFt^ZQbqS$,nC>Hq&/3lm7DDn[b#H6RA#<rRNGe+:^`rVLIlDO)KuX+s`tkA@Wt!T24Eo]LBq$_2Xi%"#$(=kcT7qU<&q9Nb85m`(ceMTD;fnh1n6>E:$C"SkQ.\pYF;M-se070)p:_g;W,ja+:QLQ_=QI,#&B'7tE-1cYf]0mEN*g%PL0.%l9"B9G_.jpfPm1ABpnrP#0u6fYHUZ)..*!D5/^Xa@W6Gu[IUbEBTT$=62@AA`NntWA?3Rmp:RG4!K$7Wo]1JiNL;Z$\b^OA"Sg)J%B$0#@*cEM/UUK0JY!0`Nr_rPim3I-=cFI``dZs"%IX03b:9XJDOrOh?l)be[<DS*p=9O;rO`21YM8ON[aY8;;*XjX0U/moWV##JM%a-tX1F=3l/CJJ`83r4qc\;5DM5]C<D=+&6j5%Gj1Ij'p33g![0.;(p!oi:.Tfso.iq9PNq,'n\],YmcSq=grM1288%HO^ap>,,)_%FQq0\^Nfp8TR.u0bEnQ;nKXHB\F[U]KSH$R/TsY!#qGL&$8JZ'01\Oc^EGSVT>2HZ+o!r40[FAVp7cgH7UTf^IdB@a+Y",dI-;s9%=Cqbd-3NHZ3jn5O(DLBk*"RSP&#+"/8LjB^[!]%llK]ZNaIH79,+uP7&fRRCT?77#q&o.o-kG7]@H(.JmO=46jFb;EQh#YN*e[9@%^Z>\Z51EKA<'=tHAH>c`iPsD@+5sBn-q(j"c'&hmMb$3%oS.r(9,"n\<uLds_6?!CD?]`>!*AF/Bm<7j?&0>):4TQniVbHS@9feT%k96?W$6:']GK[JZVZaI*nk,Zk$5Ih%!g2gFL]pQn61gE3nO\EdNNe@qnt!]JAmBNrK*gF*k)=UG+[o:(a2Bc-h<\-#lNCT?3hVMN%J>EOUFQ@\/$8g's52G:;ZEa.q(XL'@N:3V2OsKl!Q,ud5eO?q;q"Ufq)WP&p7PYVuK50!mL%77r#p6FB1PM/g)Cn(HHQ,E2J0YrN%9h$U<]m_*3B8XEH9DZX:U(B^,K4qr/+N0U#b#VqS@k`a0n$Z9k''rEOP9P3($n5]1k?77DH,KlD%o6chQB'CZ(NR`R,:SbOHTlWe%#"Pp'WkhP5'4d<5AoOJL$@GKPAKm'."gU1C<P*EiBQ/(foh)M#F5HFt#Rh&(e6lZCYE5"TaH[fqJb]S+@@qn_caO(*)Gut#-LIId%dU%$t-b=jBr/CHVX_Am-3P>33!p<Ls;XX]lK9Ej?&+]ibM$FWn7DBU2@:T8d9YMDL@t5kOPGD+P^b\/8kkU6(bMa[?8n&*:ba!]F%niIuZ'%!#k,CAU-><>?cn^1=/K-.?^@=Q_1LN<B8PjJKYFe1t?(ljlXU^qXo27dTAE$p["Ke>6rER;IQ>A-QZP*$Z%:r[Ci;P2^-%#T-K4SuZq-gfhW_%ero4@mQ7CF&Mpl!q![.6=8nNP@KXOT+EE/Y@LGnZl?1[UEM+./\MMq6u<A9k:_P"EcrY;-g*9Ml,Fm79nhXi%L!bn/N&U:NWf@6D%)CuMSJ5TGh:"4m\HiCj!78S]M,ma^)BPKcX)+J/?;KOm1>RUe<1?=2_.5S,:UuS1*e*4VB/)0SSH`&G"1n3'%U3Zu@RlT@FiB>"e'Th>Xcb%!E:+)&Ja(jDB+[$-?23o8NF%5h(r0^'))n@HnbQ^W#q?>*Yab;c$pBqqP*D&a$0In%c4]9VNJ6p&(%Uukg,L4E(]fTU(d.H5t(`8'r7iY+ZDm@;tHU"hT0Ud%5@r(53L-@CnK?j:h\pZQrI=eIjq@hbQY/BFJgR)p")5%Q'[&X<ZaSe86Z%3qr7dg;&;ujCg$L_!fk2NZGV>.85hb8uH6n/g6Wj_LhBU/Ggraao[@Q`@YCl'dd&(!V"^-P$mI#'nlhQp[HR+;eA<TA0_ENN3D,V%H"9)cBbO?!"sF$Bl$H,*^s!K3+OEEb]@-c++@:j2m]I/MqLfRm5V&t+JRba-YS&!J--sPRD$HHEDkmF,^);`=1:!ZO8H:q0'ES:%%fM3RI&F3?(gKM(kjk"9,S2'g*JhRCj=Shcu0Q;%F0VlNY+rp#.:/h>3N?Cb1ec7PkOKL[AZ'+I5G3VO#_7kro3!nRhAk/eA1m%6<%39?%aUDn;oSu7PBi,IEloYBgR7N`I:V/e2]*#@Ub("lrg?7GX7PNiH=FFZK]M7Y3aOu9:1rf&[FeLKM#&QVCH@s/^l-DAE\@O@l\%[pDaZpS\mjmF2lpGP)"]Br13/PYX&smF>2]A*&e;mF;V!4/Ye`bc\sP0CG5;1l1B%XT0bjbA]7+NlWn&YZ[p+B]oj+!E0ot&_W*M%$,i@j:8i7k!%cri=D0@ImtT-*euXNLZDHOFo(eiX%LO;1\L*\!e!H4uC7P%0QO\s`n8tks%s]LG4]N[8/S,^m)+`B!-rLhF-B_bS%+N7rY?>-ED96lLM&e02`M))l+VHgp3N(l2$>WAR=T&[U(n6fV^Uc9H^?P=VMOh$JSY[oSm"btJA+qq@Q5B0[i:mD%VTGgXY>88p'%V4#"da9V>7JA=L8!O:E5g^/6n7dbfo;^-EE61VjB;Z]p;7LLP)cog6b$.NuDO>k6a_RV<r3EU5j_?MIiH$^o5O+Ai/V.i<d)XXfN%61KO>E>O`]C)<4uD0NAZ`a'5Y7H=Ael50[Ti#.#(aM@R;*#+kH_&119OZA%rcJ\@mpUP9gi6Tuc?e%L)dT%[WddeIR]O@+#Nq&Bg%e;eK=.!O3_"\LDYXI\u(maCu*I#tJ6:56`S?4Fn&)mh)qbkpZM,6`^l5?M'Q)B9V:]8.nFnJIF@A9W<4$6CG_)+<CEJDGL+Zc#@;%Nq#6+AXs_:`[]k*%&.u)JT:E#$"Brn3r)2NTY=7F2d..B@m5W>I#K?Wr@En&UbL0Z-]6Y&Y80RgBZLTO2Bo%Y/1r*USk@^Yg\4>q%-,t"4pIe*eU_*dJi>e;LK&Md02ND-sfbB[_Z53f^SCkW0cc^cr$6E-k'LJu(Ur&"dL8:>-UrdRMr(2`*anO?d`AUK0M-a)!c1Fcb%fd(KSU*=<s$R`I"JpP+%-)Qo%U1SZ7i^`GPOUUnFKN/uu5'59]=/d&@.LT\(U:nGJ]J0n'l([6X2N1WC\3j[A*CVP2AHHWA8m2WO%#q-SO6V@H)h.64DBh+\N7Dg+c`LV"'B#4kCV4EbGe[R9hMSm8Ll3o`!*0KS69fJu`R3;5#NW-\YKirUWktdYkUbe19k:\LKd6bT0%lh-h4!0QJX9UVgaUn3ngmoZnr4fg/fY=*)(5/'7"(VZj21pQol"Uf]oq&HR4!MsoBd\E&MGOpu:"i#iNdH=T`'j)dJY2JtO_%i]I%)&t^n>Ou<FEAl+Wn<92<kYmkf*a,M@5"4uj3/L8"GI#'\buLX(=JY!=e72UJ]l4KNna2#s#I'rA1,N+7YO5F)VMghO62l'/W"Wj\%c]]mSn50>,5<cWjU%T(7h\H&KF+po9%CH!(_rVhte#q'im`cL1L(c7#i?jjndC.R(1)!01VBS5HRY?t!alEoOiB?AM33!Hi`mL_#%P/g-S"tZ`b=U?KDm=G?mTO!#KFs1E)8co0c:*X<Y.k_M9AMr%rF@?pd<FM!#W"76aRJ\00Yc*U"cUB]C59dLi[&E4=7AplN^6D$j%E$'oSBFh*OYX%W=\:G9lC]t5`!Z.M/NCZO>FA"pC'EItj=b<8?#/URJhd.WT!4@1S<XDCD7I;k+/d&3QP,d$3@8mOUGZoWipCn$D%e)6u+Im.;F5[UBsBgb&iqrC2D9@T.*9:e>2a-58^KE]Kq=oZD6Q2g!#gY=c;*%+,ea#6)aGmmB]PtG?SJ%gs\_/m,1LY/C.X_aRV%o@`9jfk::G<gdS>g$'a0-78KPrrA4@f9*X?b4*kfeY/5ohbH&-FBD`S.!P*a;[?0FoAOWTUBb<MKBd+PN+q^6/]0"91D$D4-2Js2%D.aDKqBGa2ULk?n.++^>i[Bj?"CPlUpfmV@IkFSSC9&jo*<<g!Te$2)#+Re(]gS^*4Aj/;`XD0G.0(=.P&+`nen,+g(hdUTAd0)J%0=7TXcu.F-XXUl6^5I_sR5rZa)(b<n^1,D"2A^4n55*/<?_9uVg:nfap#`oel`H,^*dE:W0+;I0AXp%:O5F<9?h>"Z4O<MC2ri#i%hPK(a(++hI4@>YQ)*TXifG>J2P6&&a_Od84YDi/WU'1RC2+m^q&":p==$#Ig/W?L+l19F!E^fP9K2!'O!1p^+NeD^Y[5q9o;n4UO%aEb.MKZ6XBR*.(7CMRik8L$k'+>1PFO4%SVpUM<$^h^BsAmF#/<HmD8p?:ElUC:<^P#dO91I8cbFHk)m.4[ju\eQGL<\b%)#pM>[%l9GLC-Pq#OT?2sf[!Zt[^*oC%3]YuR,=-:L+K59:1nk*BoMj!`+GO33b7YFnlu9i@/&%R.f[I0.)Xt6J7,]-Mnn_84`l3]e/q%*6%=>VYQ,1'M.3"KU'`"IrLVXqFmJe"2r)c0Tld/;O(2$;-bhb@--cr0ksC'IkbE4G;:Au)&Ods^47BW7sFOI/jHe.j=CO\AljhC;4G%*Ub$l=R[fG*LR'ZFs+'*iV)A?H64mU_BB@%cnSnI9TWE859X-JOoLu7$Td-r.#6)l$_*fKG'4\qn3WmfBeL+'\[5un#<m&k].>9L%XhMckR*QT$H=]g#eW#'*&6]&7,CMiU@TOeM>HbK55s7-O\*k61[):QfXW;;Kc%t^R"&<'pp(](2)?@#JA-O7AZ_?2U\fLE)h"u]U%hnfMK-6VYI6kG9@*2#4mTqOa_,&F#9g!$#=X"=:[05e0?p(Ah\5SY^o5eelVg'0'-bs8kD#JnJ(pg[=;(.Y2n?;iN:=6m\L,&4\^%/sLY_>;Bg@We_[rK,9)46%nrro1571Z/%6#@Tu)k\!TR^I@EN)*J]!NAh[H:+E'$^J7(<O>F@Rf#1IldK:%\))?>`QlDPr5>u!)i%m:jq,aNV@b`Is3r@VnNAl4(anF+Xmfc>9I)1.0`[9-"ITg'=MTR0AV:U1op:HT%J/l8NAuH@%QiU>MVlkj@&DXA?Goqp=*(JKu1N%cp%*qCh/a]2J=1YHaXWte8<R@[lmre9,m8nf'^bj]A_L&7)MaP%_'#$q`hP=)_O%igTpj#S$Go[9A?c>Dou[l0cTX42-T,:&&t["%BGF.Wp^b?Ee7]R8?iEF_Wdk_a_KO.8]P?t$BucXZ%2Y.1`G(B<5]XBjTVUFOY3)rT[$BqfL=9o7:LA4j:Ac1;re$iJKTg$-:*pk_%5GGBhg2V@7>po#\<l%2"(!2?V_Q^WlcDGIKO#%*#T!#-=bCVP7`-#:Wm[;N3W1dCf2L+;8X&^f;@EUqsZf(k]^E"h[Ig*RB3[b=7%a?`D)JEMEtO"9_]#8I.(jIFiIf6>BjK<O,nBSm.<9T3sHYqQuTa.3lC`5`bLai)(rN/g!#\1!JI?kH,^X:lAf==/S+QoKj/@W>GJ%d022N@>a2%*/Xn.!<inVE=c3'iSpedVkV=Pr(_k(=J?-9VE'/l-AF'Z)%+-S(.FuLKBc9L'TpSZBT/@;8)pfr6%_Ac3`L\EJ>al6%&f5%eYTOjF-e&3`$I]<<4LHRYj`-hZMuj0)R,nrC_A&oYW)A/f@sO@dl7ema1lVjX$_W"RSDncq!4\F^07b<2b+U!t[9G5U@LS/&%\2XO_Z%+0[.2HP587%OXA#SQU&Kg+C&YL-8-H=IR.c:rLJ<*V`V$;[l72&N$LM*?[%`>U9-(^!&L*l[4WtaKpK:PS7iAdDT&?,gA%*Krnp'`jmR&qC0g&7oQT&<F.KmVWf_B-PQ@J6/,L36._Q@bClr%8HGm]+\"qaT;s"Onack@UYj'cj4SIM@8W-94MChF0nhqaccm/%WWW*g__3_Q'>lTBe#3Jk:^L8oA<#SNX;W'$!rh>-8^L"nlT2a"rhcHIeG#s*i142HoBFXnX_EY';c(E+IO"mo'5\?-6%#>Uk7X_D%Mm9c7_6QZ6,VfRWS5DnYW.]rSYIk!eF,:$nM/#==`^V7&EY/Cmb@'BT/kS23\.Zgrbih!=&d?.kE(WtB("%$F1[-Jf&5=h]=J>ei%`c+`d:^@7RS.%n?MT;OE+CJ4B,iitHL6G0TN)EWo4D'/L;.#NSXo]pW+S+rH?WFT!B,V%ZJl.46p+rpG//oge0`e?Z:NV]j)]1E'%a">+R:aNBj9-=pA,blNa'b+,*8k"Rt^coOT6VuFF=o]/R)!N&I(+1#h:)SjSX1g_nk%SHoC+(bP&3@$P'3)h<\Yra7IoF-f+u:3O%H*r1<0:.2DJO:[a(gJ'PL5Nr,pe_'>$.p:G&L6Sfi>BIp:uh\CUN-qj-K2m.30khUCsE780!'2B'GsV>-Be64.Z25J6@iN1PfLAO%-DU\qMY/@:,#t;H0Un_3^G7X-s!fXQC(#r/'I8qO",!%=AJu>'I%4.>!#gD6;um]<FIZ/2=MSlXne3SRc-^30@\OJq4>>b[QB6/!%_rU=G"<1Dl8L7V(VSWAKiHV.BMLeWfcq=X((63Ah?:,e_9&O,TGqI<Lh.>Sf$l@8'F''nA&]f%`KYg&L%aRb%$F:TaclC^N4Kr@<%<%5nlpYQh^5NlpPJ`@s&:*)GiTP#/#.e'^1;H-(R$/fSI7At`p`DHY\S,=;g1$qRF)#[ogcmO`R5`Q0f'Mu"g$>ui9WtHhG<7MW#%IZYpiW.D]tSes=m!>d%P)@!b_d.L:l)H[]o&hL`8i4`)_),Us+,rc3k>U5@fA.]^o#f*s.#itPi6RRDF7!)oR(BI<`kZL_Ij&$g!%-4?Ws7P5lS)mT_Y$8Q!h(+&$p#g4J++tPZ?Gti1T!gkO#7N81[K!mX.njd]A'YqMfMaodm5B;<##2&dH&uj>g-`_/o.6u`u>l1"C%>+cOO;@.lrE-RZ[N<8u>;2Y]DP!umkTE'9p.RSIICD(HB!G=*dYuIqU:3"3V^u;#T3!#?oOP)#sO^^co@53rGX(!D!-c?G$JVfP!%#)]nn9c+FD+N\4XMLY1JL;LuNX+7g6]IDb\a#Mj(\VMAi.)H+=![^AL)#_47IG9cn40mBQe3E;d/]#=Rc0;h^+a$sT,Q\:6%SoT!%a]8MDl:/Bi+T<FC\;n*t#j#!M8$;)LKH6'Y8(c_&7D2";B0R7!YmpciPLdPNb3lVH(pJ/@&G(r*V6a0lS?U#$JMmdGi7WO]CXQi#%\4p,<cB]\?O`/B%p=%dZ)><(u9%TbWl`*gm/UX4$hK?8\!L]CL[P35LVQU?oA%Z'SYUt7R`msLK[P3Z5\lO\Nd27$Fa841)WoMfO%N\NM/9k0Oj2hhW:@i4p5.7\+]X*%Os(lfZL0aptH3RSafJ;doge//rOY)cO&nX$g+X-`VM>(qEHbcW^A/`.;_qgKC"JG*!l(a_M-%@/s4`>;q;_Iud`ZZS?j#\^a/L@i.ID)\p.Wk-ERe<nh<sMpAWVp(]c"@?WG4guRA"Go(3E!Ome($>UJQMN-oP0F0B#_:C;p3VH!Z%\AB2*he<N5i7;j4D@N4AqU1p?(&$,K]QS&Zg-)(6qAXNlZB^.^Z#mU#CRE_<=Mk-m[F6+E?$0L/LMK,c>o+7@B]5[=f-qmE,.TPl%qE^,KXi_Y@bP[3?]4+%mB'EF<iQA)M*=m6kC&[H!dsb5,9cj@E#XDISFj*W]`-N5n(/W.lL.'5eBY./@#Ipu6k[?h'Nsu:)jCNek%:(J.Dbm^!;G)53<6R':Yi`r8036?+-,0=aF7XeqOc&)h3%60/pH#gig;81Z3i!gUi0e6HTq#OM>T,K\6[INJ?0d,VGO"O10-=gWe%kWK@g!O.ml3"krPo;!W0VIH7!TCb/Wihmo/kj3K9!`1-=%HX@=&_eFMpHtLMlc@`AFBicAdRWW%QJEnF=9>S)4F#\d$e\X@O:2F=%!BbHU!4u8YA33\4pP4O"R:smlDVYc.iWD$d=f7]@m3no3blqG^J@8&s*<q$k;M>p[O?ouHl.=C:FJ*-edLlW.bS1Vo2mNAjS';C)%0#QB:re[=5ghkF]nsA_+6KFa?M&Cc\A=Z1(,G"l"rUYfCnZj(6g(#-p-EZdY.j8Ukdni"IJdan)/.qqm!J%ji=a\tI3k'=m^/VAS%K[F/*$Z+@%^sSPQkdo_2=cWe;V`.,(;M(3p`=0NGiOo5#BG452^'2%DE5k-N`qFf"@.j/@H3U<UJH^"/e-5@N5lD=)s1`uV%5#)u%%ZMP/&g6io^+ZSBShcB.?P`pG"nV]r`5F[OIE^]XJH1WafQ(_*GB,I0%WmcZl*CIK;@BE3UJ5M9,fMJ]+uH(C=DH]3Y0[ZUG@$q-%=MGVZ(93]%'?1'L;9=n.+Y*1?HJ:iUI=>)^#A"AJDdlW,!*:J(B0#7]*RI5D,0JPd`;:m("@-*#li1P1]]VuRjXAl0*omg"IWi9E%mMQ"dS)Kt'brcR"StWI%B*(^"$q'$GM0du@@kFU"-@2$8R=N^K_iXY+!),E[kk1;bo5PC^Rd,7Um%6;"Hc,3V"3a(:G6GF*L*1+?%6c("H=?/d/4,5jrdt_)[U$VBE9/gEHlQs?4FAIP)f+CA2iN;*E'&#7I,O6I*,TB.#A])`<$1NZ0&1o/ZF<PqKZ&lWg>Y34+>"Q`o%r5p?PX<\"g5P$qd8Y1+X#V4GSX9)4DOD3'M@bWW?lmMn1TA1Tp?sk7,/ReC!94St_BT]]Ip6$YBGC"p<\_h9/WokH82CLiBV;Lq5%QJm2lXD`bKkj8A=9%Ze&UE>]P?EN+LTuLW\-M=N<2e-l5>"ui$\<qM#56,Z7F]k']UI1d5W8?f_+b7tJg9+IELR]IhoTX"#bheQo%0D-kVT\j"#&o9cmf%"#?D8HTeAS.>R$bLYI?gOnQC0+o4\-01?D>8ses'f@#dFoT^/W=8tH?d2(ZOiR1!o:l"d[D3d>aH)<%/!A#%UMjc8WOKc$TZ$;/W"lk4n][#7NtO?kZA:)IMpT)r"reoEA?5HIqL?I"*T]--;agX"#jPQKFd/4&r[=&l$&g4%$n13c6R(t!FEZ.7%@*]kY0sulA.A2TAic0aeDA<gmK%(qVU^W*qo85m\Nn!;uP'Rp9P56m'ZP"<`X-`mNUd9qa]OkF[qS9<r9./rkgN9[>!)umX+KgWH%G<cf8&t^1PY=\C"0QfZC`8i(47o@#C7@*Wb!$Y-n4@dthrZog@-6G8N0MBV>-G[`5&5OC"Pfm*Ic3%jPViPt_ViM935BCj5`<>u.%EQDbeq\.CX:a=o>eql3'J@Ek*lRRG?EV.%VL@D0p6d.H?Pe,3h+7t?6H9Da/&%(]-1Y;nqOgU&Km-?AJ#]R3i`,$YhWG<4rrN1'O%gX`#?B%s#Ha_gn`NknHq%fji"lj"&2*Y.h]#7gi4(CAMB*hZQ"0SoF)%p-af8*IC:isH?eoE&8V:K[aHAf8N<,Y0A$'dkZ9EFtmR%Jlt(JT5B-1/-*-c3&u3`:tt$kiH:HK<]*MiD+f:A'j?!D5&6[+CYp#6=lL!tJ0CVN<ueU>`eaj(]%>f_!^Lmpa(Mk%m7,%q(^h<-%(,2Q%-ncW"Dk'r!8foh3juC7UYH'1LZ[Z>+L6A3W<om))1k8PC*"%,D.LBD0gEC]]6BrZ&'u1e'kqI)cU\9<*UN:j-%9:nTPg-"#%Fd)pm)Bki88f_YSM!B_,bRAH5o^q2Q]sBa,kgj5N<CbHk4^4qT!7nP[*K:[$Djm7/X#^T\Z8-`VUHH$87Lr>!:9*FW/uW6TND>.!%N(1Q"B<\5153`.>bTYS/;+k8qDk\D?LSg/.bZ.[#r!1IWcpT%Bd:aMu/#7]-gS'^\Nn;!D+U'"VhGd%*bG:1#W@FN>*sGJ?[8_S(%-O]16d2U\-dGNZ'C;8!lO'EOf5.db-n94H/lKOV;$pXUhA>b<2p-HI@FaekAO%2Il.\P))SI3GI$LP0_)iaJ15TP7IYqEuc4q9dY%8ccqna;Fu3S@JXN.Z\Fa_1u/8HcUct&B-lG3r=[L0EL;I#r%*%J9f*W^q=Y"@,=?+6[TaKR1,<1%_r3p&0h]M5Z^kmh.Q2P%bE`A%;dHK,niZ/5VS:,R@6Fip#uDrhIc.!73urd_::m^n@B5km)5e\eTkbPokbfYUM?W$rT,tdjdIG9Yg6g4^ck+_)Qk&NUoB$@+J5PQY%"MhSik9Hne%4.3P9p!g"!3M@1!an40dM>1$lGIB?BPl0cee)6?i//-'[N=TVCRr1'I;4;^m^5o^EoSr?!8%2%mak+Eb.C!$5\:#!%Jgo@rf$+3!it:p&?$nd*_U1=a=\uHEj*9WMXjkM6,>L6[*dR]<N^jj[?hIC6cUS!.3V.V$5j`YW!oTZ2o8s,\Qhl$pHj%,b3pB([%5hY;4Sr_eC`"^SoaJ":Tfm,a_#_D8\*!-,\_[f"A*qObia[(44o+=61k4+7orH&0id<XfN,Hmp=b*'Dt9m>VS*q9T;R6#F3l_<1'%BQ,l2$/eqT/Q4>Cps<7V&0cUFe:W`WNMserDs?:d6M4$/qmJm+LK_5G_.)1j#cW.ARfJfu<n=_*bZY%\.jUffnWc0oU>?$KD6$/L%7)5)Hob_dORH?1Gh4roXZqrN8Q9QWTU$r!U`B*]MeW><gU>I@eF@aLLH[lHo2F_e=7>1IJc40"I&H\j&U9C*E;/ZNap=naj6&*Uk%b_(XtTIP^B!E&"nZ:5>.<i9gdR%BAQ6V2OnE$J>>H&1LN#>Gg:*ZB-t>s%&hlS5?`D4dM2!+"`e[d@YnNAt>eZ9_p@o2g]HqO8Y-%.M.3_p0#"*cT'&noXCPErHgld_h>+H#CpSMgDU>j\fY5E)K`o'`7C_7f08MVa6uuI!n+U/F";0\IgI!dXl<lF29lX&Tb7T=ID[7h%cOM(;Op@pHcIIi]]sjM+]Zr4"HoI:Y4(nIeJ]&cH/H?=eKQiseT-FgX#7+3oH,W'ADk&e+@k03n8TM]h5YMc_DQYr"kC>q<!J5,)%<cJW!)CH$-dYFo;`:<GPd_(/5DdIT%d?Z]2X=W+k9]r6t(/:VfHE)`r5`0UW6JN^+U16\XRtcf>5MK&7m`/!%,Usg_[Nue%"H_]'%VYUsp?IkU@Hn:Y;#`J2J!\lM07gA?`W1j<l2Q3SWo_k0#2tknokhstGM#>CibDPA`Y!BI=1qIjL*49XlTV-J+X?f5q\[Q_eb"b^F%I:h=lWB^pLZRq/?/?;%^4UcX<#eHTN;Vq*\k`-(1h),['TsIEU3PhD)8A&TbHaT`m$Jr,i+--m=oM,tAW;2$M)bPd&'\!(KfWpeZ%>aS^GmN%k#3MO4A'$fOpS?de__OfNB#s_eG=p-$@5`dU#Y;\H%9sZ+tRaK0=!8e;"iUS)EKsD\=5S4b6JX@.U8okbO__cRi1-'W4%2#^X>_CHtKV.;jQ.*?1lH[eAabbP\uEg<G["#^77G6Sr"Kt[#E:OiOP&m:[=Qu,u(_.0M:.VNI!.5HDH*1Bl8&9B`Qj(qXi:NH/2%Od#Te!&9RlYD5Gk>bjI^:ap+d7bRTP#k9ba,JR6I%'kVUYEjCOHlYaW,H4hM#O_i%WGXtOaS([5$/N\f.%4Ba_/m**4J=(kQ=8&3%mb&!e9702dXRW:+26Q>fDg!'f)'j=SLL+!=d]8E\'@>R'$XMSYU0$a:J>/!*et7CZcsFQYpWo$GCsi$1%JZj`)U)=cH5@ttTTZ.$%?`gBYgt"+^i4jH$37:)@!2Ek[-?e#$IU3P_4*.jNH8n`Rb:u3P0#r9/+P+HRY];m_]aSCI6=NhqWq[lWCB>V0/*7uU/d;AL0u20"%)E^4K-n,t,,oZK^"(h=`^lBHkU7[hZO+pnm1N;g.rM,'AO=j,.2l;s$bqjET66+<F7+_uIV[kJ*,8j6A/9ZZm`N*gU-Qr%b.YbuK%Cdbrci[Dr<M)0p!*Ph*Vf417O(LJ;,0kZNU'dB)sAP#<#O[)O[,a)4KU;\'IM=`jJ8DgKXLCii-qjP(c@eSd-\WA745g2EER(EYB%GHKlcXu/u0XiI6NT#O[I))E4)!6QMR'&_PfLe($t%Ds[@JQh)-\ek3j,rN?\UNNEGe<G_p8:jk^6Eo-55`EW(QRM;58>QfH7:HR7%hu@Or=)8qanshg=l_DpA#H7#:nNan@Rfid:_BrfHonnC+hDc,@%!d'R,V-mIR2sqt$8X5aR!0%&e0CnpPeL0<j0Z7O3pZ^>g^iZi%kc0QT>3Dr4'@da-c=f?BnM3YVGeC7dZB/:j0^piB:7\T4\qY&u<Ut0+NDIUk052QC>B'<b@G[Y^ft9Vtr?h-u6\;r#/BP:+#Usrm%)8$"4U=o8P?m68GAorZK3dXt>mn]nA5S1`tG><lnSk^W^K+Q6*:nRh(d[sAp44ri#C%bkJ5W-LPWkZW#G+a/L%m`_5E.\25+96GN%7c_C)b'9!Q'9t*[!W#?e=/:GEh5Rg;\*bre^A#qnc.n%_JL<sOdY#Mnqd?udr-gNVe:MZ9U\@QV^$$^>ZnhJFC]Qkc5n!jGX9fgN%b*Rr:+,:)(KEhR7S3+:i!e;7j#.O<T8Yjo'a3H!P\t<?OYs:8YqA&V=4V.kH[)qf&oNSNm+V+^K]5U28QTD,5!+p`%Z$n*M?OmqU%TQ-0X!+=JF`<?9-Nks-IdGZFP]L7>G,SVH_\7mZ6DN2^_&&^!iScQ`Mh%)ZTDnSsl3]_3\N\3]0K-u4j$lD]C%1"I`Js)4.YZ43.%1mV,#Ru;Rhop^Q>Alp\BNY(9UAbJXid(=W\J8U56g[Z:D&'Eia]e4o&@%Z^>U*\G88N0T8!,[nm5_)KULM2kr82hcs34V/Dri2%*%1k57bMt#7SEc_&U:g^RK"2N<)lo,(BIM3914/j-;HeP"g$/l.,;SaIU9qiAaP1g9E\.1tX:>i41C=0bl4M(8@O5<']8d#lOnZls?%8&DGtM#*Bi(aTV"WVImM&gE]SP7O,c*Lq98-X-\/YiN"b$(QK.aP3Dp7I+llC`qG7+XYLdXo.m,3%r-ie2-i3@g@cV[(R$H;\6`X%[(QGfmBO>5(i^(W5TiW"O3\<F2QPU9ptU%Kju,Ld\%Uc8%+[D_mEmJM,6cug)ZQ%o*F$4cR;NK9gs$Fmg[h1E(9kD2:.t1:-CC:_%r+7ie=5;%$BGi(5%f$QJ0E<AgQ&45e%N6\Z_m^o1DJ)f*j8a_"Crj_<\?umf6V`ZnM%G#Wr#qUNUM=ra3B9hZeU/9)P]h`GFf1EJ%J8fN?U.u1t,.XYdAC1rTS4N0=!,jG"ZN(QK7\[pULBqi@a6T]'5:>3XY#?5H.56[Feq)#8b%!pEKE*[_&Q-85+U(]^F4DE(X$#aj%!UGSB>l^X`[Pu-pHEN\]#UCKDF]O5b[fdfk&i'@:o;(b@@S\k;NE4:nJ-/qIL_d]?<t(FSD)J2tc<JgLOt)"E7B/:s7`Sg:n9HMK%\MU@@kQ=AG*Ut$.[%4IJ)/#b@m7G6;WN<MAZ8>V_@e*SDXn<g:*i.@*U^O<tjg2/9YZWh7S^c@rFa`=9X(F&@pa!X&JjX(/';Q!=%J@QVA#m"H&c\Fp:<k4A:(EO\I2#1;%`8.Y.))-D"TG6PlWAorrI>12N3AG/*=+<uh"%`oDIYJ6K`h\J*E.^9G1rpQ_@<faGd/H.?%5WqgdWL,kDUYbUKAiiEm4os8s*9)[8OKnW#Qij!iS[;4"jpssG0>"\>2="s2WC]-=RIWWR!C8c!\>op==$>1n\n[4G=(`E]^8C)b%A5[ru9TO3fo]_J[0s:Y`+]tR$88FTjeI-5MCl$@VCAa*d6&(`_d3gE5a,9.&,WJ^@)N*4d0*"A[Jk+?W.t@S\:\9gB;ghsJM_-il%4/^\I+a"!:BX$QDraatk53iNA>ISbg)IgW)@*YH8br)j@U"?D!#OS!ulEsihWSUhDH?fKmYh$.6</"N<:]X!$m%J!n*!\YQK_.1B%kYK@Eq9oB*3h9^lA,;2?_?6`.pBe>dOBCr3JT5q9@/ED\5RT3eOMq^Nr/BYS)K)XbmeOcK^9jX&3Ve5,UQLYb6a8>3H[f:0J@:d^%8'PKhSW!+Z3OeL$U0)b^NZ"SG)>I\r58)9k/<rTM>;p78T`chb@s0c*MIcA8)I&_^ga_8)$$>4A.1<][p]:o9>IVV<4.qOuBpufI%1a=C!/>g:\_P!A>9P^TQAKfB*p"(@4%54c@j3jVTlQOQU2_kr=B%R.8Fli-Wb%:,55(XdC\]G<`1<RaXVJ2a/[KsBBF`iKc+$hBM%]\Xoh2,06P29hI7aTi+>MYsQHF\=@]/A't!KHsnK.f$a*>Yip)8Nm^7eO/(f,m]j=W$HUeS:L&805UKB.sPEI5o47c$``8TWErCc%4mEOLJVM=:+TMg*-9AmEk%V?3hII1i/PYVOD%pOkiV8N6h:k&9VGo>s]'mB*U9gL1J6!bI2#B327Zn\:?r-8Mmo`\ME,H>PVH!!s%<jtjl5e%:VL&p4ERq"h"[DrK!WZI_.WqL)\A:"CARiLoG:H]G3V0ZXDGj*Y\$k8bRj3!t$8Z1G-LaS`S-l4r;b@b24WAj2BrGWJR%RN.=m^^QLnAMZqfSB$#3$T;;05itM<@K;mMC(I!5(GlM-\3JR!5o/n!afcUlSB8YV!"O6o'lSa09Qh0>@EC^t.L+s2Am3U'-o5]I%7pc'9&b`R?HKsIrCDu6>RDC--.c)6&T<@0P[DfWO)Vu6*+%./rLlbjYLFqiN.Xksc(P:&X"UhP30\b9pdCi,fCk1;</<BjPZ'.V_%0jrCF$s>D+6P@Y`'hbJD2f@Sje3f.+$cL"4!OCBMq/-f,+QZYGl%jNTqH;_B"BkZID5Op^Fq6iJf`Fbp_iS\,;6Mc'RV"!iXQK1t%D#gRpa_h(pmrehe'K1d@4+_Q]nqqL[>2qWVP<(G3P<9$q3NQZoCr8mo/BA&!>q[]d;_T.$$SqMo(1a^15-m7W"sfJYZh6B0^Qc$4%cNiAXEX9+GR5H-bb:6eZ-6^*8cd`"l`tVoP,/O@-![-t?c(Dpi(-'/u,Vf"abI(4&-S97IfR7'9I-?J/EaTQq.=+^!2O$JALM&_/%[/-Up@N]^``^)*`8kIs&CGNZV3rN?<U\WjIbsPJM5a.KGQ/%s]hnBe$7t.>4O/tJJYWMApp]b*6!STV,k02`@1enO'c>IB"*OFf$%VaKG:7nDd.91=m=[!+AQap7[70+e,g&0([UcU73q#1>:<FBuHq?U^"`2'c?=4o3k>oP"h;J5ur<Y!L@`Uo=`)c11kWW'"l,oeeuP%=0+LRS')^RdpDN_!2crKj%.ksUrtp_\.fa:lMDso8Zi?lhq#D''P]OV-&*m#^.%.X)9)H/6>'2%2Q9YQ\oE=sCr;/5?IljHEi'O8%3>2V/+FpSqQW*8*3<&GM94M<\hWho1]$(*7dpaOhkN[AB+Ot7fgOTRS/0,@2'H'EUep7BlXd"@/dV(6N6Yg?:L>G2D/a!6:;U-:J%4Ui=L%-Ut>\NhW/""/!jjB2pAgWE3cQP-\cUp%UF[=-3oaJK.9OEWsMT!JNF=(oeU7K+0h&@q#H.jgo'Iq$?i>L,POYm3_1=rV!1%*OH^Lj($dO96?-=L0]QH6mhtnZ$M974(7%D'2fV+lI`_r,euRJ'#(K`a61!#ri9gm^3LJa_$p70#dp(V2X)96BQBRqPFAk*Q*Nu4%MS+b,T4nW<<?-Nb=,1I@&>X^GMM'C7GYSfqU8'92+HlCA(Q-mY[q=AdB$-c%?FLdJE.];Kf5YK<9c\7AoF\Z'?NOAnUm!F1gI9UD%@SIf-'Rq5?KE*,b5Y`2Edij^7T]g6T?3NX@J&TXmcYgCt,Qt6<a.r2<.B<+8`+9f.`pre!F!0hS`(+ar*_RqT2bnq\ogKU+niA%5%MU/@JJ$fl=P<@$58SB>!=_a)s"CE3`Bg2dHef7+b<'.NJ>?'26=ArABP'[!^VO*KbH%89t%M@tj/IAE#Pk4GpP..Y'@`&YJ*d68L%/Iird^M5rphMYuMHo.(&!)eT*(@dl6/BZ8'3'[p5'V4btU:W'Gb,93a$_iaI=M%$T-j63a0l]#F*rpH"+[g05NJgu%Xtf+7$Nb]H%j1@5K%?d&qWl3&@TaDE<nLC9>0*D&qo!Wf@f4gu9R^V/dEj)BQ]I[:mS1D`K.<m![RUXmh69NW>)_h>4Ek5dk^a'jbVod]ZEN%bq%O&`:8))X%^LLfen(&8>R,1$(T5JsbdV<YV@T4PP[?)pgN"YE+<gsDAZh@u>]]n7SC@@=:!YacFmcV>n1me&>C)t>Gf^>^ju\8";2%k*+7(jldQ0?8T?M.JqdbMiH\<n\4VYOP!)\&>1mY1DoW/3L$!a6S`5I@\6WVG#$$?EDAr]$J.r4=1IBK[8I]sm7,,sQ!+`M\jXgP%]3cm-l5r=G^LGLn6q[]iG!7rh1e!He#Yu]0$3Ki\*YeofCF(*4+$iM2Y;dBXN>)2HhF5H^WuB?QT2iS!4KL19'%\B`5/jg9*]*.U%c[JR$.f<8TcK6L\F)#MM+NaPKqK.>e"T64R4'Q=Z^2#hr,B8?\IIC'k9YCuV&F-0caF-ne1l;2tqQUZV*TQW)B_o%d9<U_ge1A_:%h%IPDI^:l)6r/r#R`8N,QOB\qHL=?G*N?ORW`*5X>#9a\!-5mj!*n.eTIO5SBHsO5>VA4&O$BK/99Lu\Ba;-ql%BK?U2u,;2*j:t%]],<LhDe6pWRjr:V"T8dB?f"Z<D7p=C56J#';WN:K%N?%ELPB1o\m_*pV<Uhj%kA^Jl'^_FQRVW7$i%him[r["O_7=f>uQR6<B"u%;P1e#+62m\U>_1h3%0Ld:b/^:ipVP6+C!Gj>93dgHNA)b)#!g^rO%q7\arAF<mNk14P<iJc(%0%,eee[H;A[1gg3cZWr/es!s9*a%[!O@baqg9Ama]+tCTES!!tUgXU`70M?Ae8.'2oLtHfGDQm+/JbUE'GqR$S`^p7#N?;u"6=3!+M];bfRBe,4=<hQ]qhQl6O3_p-]2%QjJ>!\g1lae#eheTToX]ghgJYPS[&bOV70qL'[W?4/o'[1\8f9YZtX[oj*mF,["G9jH.-a@9Ldbe+%?uOWHahLhLYW@4?B1[K.Nq%,!S0)n4cXKJn?g&r3l-*HIf5_W*?<B.&@GA+s[.NRt=O7*a<Ar8N?0Idu_9@XF6F/RA`'f-@6_(d6i^R462[<jGAUinjN4m4,kE%%B0OD8QiN>o7'<fe.\&lUTo2cST/8s;?/Lu7G?IJae,ei>Num;@dIpC,X#P2l@0;&7%AcEb+7.C2bc]P<^3uSn?eOr=W(568eqQ?9%U/s2)bg^a<hB#U(CQ_u-'X(lWbQM1bg7NG/lRcK>RD6mT%KQK^40AHa&#&ZmkpZc"o*C\s^_9--f0Y;EG\a*shM25KpO7LuqsKN&%mHoE04DDe-gci<adNXb<p^3dgkV,kO7'7'B2j0MYM)p.oX`ql'PLDms\c=4;>s$%^,=N+ug+XEY4#;l\egENhI&:rY-X%ea2r3la%@n@:(?bLsgn>ka(%2Z"E94L`1,cMrA[uZ'r'j:_@d*oR`+KG);DEVMQ8D_F9ImUWX9]?eR/T6SYirXTj\gYoe5q*9];Jo1OX:9X3%AX:R&@DO_;jo^l;(']<d-4>G,'8Q[c6tAh6=&^0Gfc-hXJ6,)"_\"KHO\B'a\/:h)C'I?W&nI#97dRYtY?%3$e?o+sg9g5.oU.SI%13ClU:3LiM0jn=of/`O>n^h]km)[-fdb)R,/H,WlP("h26<gjn^9r_<VBa?#4;Kn!$)XHClD7^mMEgr+]U3a:Rh6hC(t(>pn8m$p%;;V&"n\(_/_\`nTZ7b.Co%dRTr_u?QQ4jS>?7fYEV;Hk#Xe&mbIe4QuAdsYYW.RT!m`4GiW)hVN!6?In62%$+.ZjEeOM"4+ipY"7%&:_CW[2pUmc7d^,RGnb!IUf_VHi<@iO)nEl6`PHWC1=.Cj/QEmHLYICHLr-qlEX'8LdG&/ojeCqA_c@p!"^F)m'sCH1fj9q2sVto%]ms"h0r1Vb*G:G1\iu1s4mY/EI(4A#h6T=0CR8hj<cJ*dgB("#`fNCTi>'C<ou:^'HP^CRq_76?0Lib8!)0g5a^!X`KK]%bApk3:%]LM15!7iFc$Z=bOG][pt$lJ_XC8Pis[4DL1eNNh>NgnS4f4d_mW5B&i,a2O5mY9Iil>@UTY!t>C^b_e`EINj_dV4JMh4B1;J""q$%J@5%>/Ks+!5sfN^0qBSk`^LB>m>^k@2l77]]#Whe9s1CO"#*IS"=_`rf40opT`??!/R86B$pP4=[lmG#^F;.j1J?9Tl>T!lqY6@Q%&q_@p1Scdo"9QfFN<&Z8[+=2bM>0Kl99f^3L>P2@MD)XZdIhnr=Q(%5*"]8]D4:.LQQ;d`'^KABk<ZnNR_h`'!<Z-*X\,3[I=_:h%n/2E]J<V/m?OVdUTo)h[;<':CO@VAQ-br"20La-N=tiu/!@GG\+taP)%'b,2A(EF*(gfLP$pi@6h^HUGdK"[+^MrHgLD"*4cA)p:%1WC[J2sIS)FX63;JCDE0N8J#61cPIO`F]+KF6D6@LSc6_rD3q(Fb2GsZ.;`3\ZG<?KEQK);F5!'7d=gDq1GKW]ALgU8Id#CBklR#%*+H]C7$+CmN(DZ'<i^kKVO]X:8BdgJXj[L$FnZ,4?1%pE"0hQ[OWlqh&jafP\\+CZ_6306bJ)8mYKXU]c&:iOpFQ/m1TB9\;a%cl%!%PMp"M!Th;b4[h:BT?Mo_>b-Y!^aSkngLPT+8k52#Wme;3V*?:/_G6DN?(rq/?/8pIgMdlg4[ah,JC#lR5X5TA;?PeA)+L3`Q?R%IU_@(H<1ZAVjV%IaO;u6+ML/D#+p8D\4D\2C'L9T%fQ:Hcd9F>ZQ24%mqEBuUjjIW_TPjWIf8^7]lAbliHp^?Fa]msr/:UM5Q:<$%Du]7?r7c]Mcp,A$p&,L<*017tI3Mn%C)skH3@MSWTW42^b>8T='lQUHH&L.onoEPmYr97R1Cu\>P!:Y0F&_)ZCr-eQKN8Y4Hl9oX%[m/uqOS.*>O3A1(\)-9%\@bgQEM2=&q&'8r\@Lq,M3`okg+WIlpsZ>H01QBVBG^#^n);G,0J4W)NGB3JODST\gk*U=Y66C,Z(`6!%%)`G>2)mt9NT:oh%WB%J8m->5?I;t9P\"/rQ9!s<YSs7&0B7;9/U/%@1W4Y."J`8#1]SbG<+%86-A#mX0kZqt4IG9m?s3W@"nQL5%hT(s[aN0IDITPMIcBTZFc&d8;EJN!nb!FE?N94G6E6[)ZY&0/HNaF>3!Y)kj3G4'kc8DXG\FqZf?>2i7cgA*f*!lqVban$1>WU5V%WQ>OHV8cENK,F1'K!jS!=DI@.>=h\C98m](OVL&c&OP?pQVm7"b`Tk:0dKe_<>st4ee.A<fAI\D2KE=lT42IlhdU95Z>sW=GV=HP%H7rXF_)!je(A#Y0Qu?#@PbVMS]OtP<N6U(LZ.XM^?eB`6lM19MqDmPFo/Z2JHPsk6[=oTWeRjX3gt+6FFcco:;BRH.3T<c/*:]lb%^T``R,k>u3WWZ:]GQf]i?:KL.iS$K;o1h<O^Yb@OVfH<PG+$Mc0;fe0`8ug*i)7GH83'THp2^0:c<)%9i8ndm&atG(&A<H/a(&r-%2'8</c$CF9bHc-4!U#nQ?p'8mJnrags+PSXC@H7#Ob!/A/+>a:N.OPhCX$S]CX%.aCX(%,oD3NA==J*r(n.P%fqMb*kKr3)f(5iV%H'E/*ik9<FHS8aGJ[*&5-E<r40Vd@f)!a"'!E4q"eK3g(Y6^[VFf*J6QO]kCb&?/ASc`0lM]Y20`BV)QCN!4&0omHNo'5&r:]ug[%mqQt^+toWXSQd,(dAiI-*B:!64cgaNY+[e\lSj'*l_Z_L/?MMbMBEkI<ia+L=WC<%.K:#TU@8B@>oLr_?-!"eipr^&?+lg\91s1p%q<k4h\=i-83'9KUI#C(f$lP@LO#!R=PpM^Sm2I2f;)1?K_.-#9lHhR(mP^mOD:QeY1IHV=RQ%I>]3Gt$e@qjA45f@B]?aQ?55\09%,FZd"AR",HSF'[4+b&HuC@$GW@HI*7?N]6$R(."DAdqo:2A4DDj@'.,bJuTHE%hoM_s,SS07GZSa0GNgEsZMK#51n3\g796.)10l%8/XRQ+$f7JI4N(;e15(UmjN+Z+1p*4LqEc`K7L:#cg\S>4?\^h4`Ain;ME&447WIV\Ict&h\^o&/d4HdILtj,o"RF^#(e3_p<Yi?%)=rXl>^eYTP"?WlpNqh#/H*q/=[Q^N*j_g&FRof`SQV7ZV%,Sq;jRAi"F%":Q+5`M>/*J#<dm\*)Y2o%Y;*N@`"aZ*=r1KNq?^[a%o-`<`5.%/H1>,:F[bC)2@5"6uLQ&j6^Z`Yl?LZ\hAN%]]T9BVX*BAD`bc.:==FR=6(C_P\\l/!&Y`6#dpT,K]!@lbOT,elr+l*-t%/9fO`(Q)Ui3:[eM#ZIlX3E"i.WZ_o6W_ksn\h$ap&34f4q*/iHN*]hWlk"$Vfa<g`8Y*!K07)#/"HFWc&seG?n-#43Q!<.+]=0-:%quEGl!un^5aZ""gFU=G!.$r*igo\i5WUW'3ZISo9;p9"G$[Y.^Z;BQ7C+ea(VEWZLPjn6crWIhnC6!R[b0qP[2Ngbgf&n/!SMbi/%qr*Xu[@ZpleWK'H4*73%r<g\4MWRdo!a"p(Psa[)Do4/Z29Rb8hCJq1INd$CaY.2X1q`1VWPObp,3*WTMR7r?4MurPb79LW6p[uf%a-3f:cp@*&>MD?jjY-sr"i'MLBL9Iq3:#02,jL1*qotl($HYB@$`YHq2tEE8]r?e]'^qfo9a#'7--C/`-E_nt@n)P%5U7I6^:El.%Z)BJ%d]1fjQ]?2n;qnDa6'*C7A-4Hh6f1\Mi@J>BgKn%^pbnFCqADMbl=#VY]PL<4Xjn!O`XbP7UUZuDL`ljd)'KAJp`[t"d+F,l%[c\H4;fJMO/DJMl_:'8h<B*M<T#m,6@jpXh&`JP9(qPts^.mD&H'LXbM-`Q6]=XtJ))"V#en9pfF[.Q/kofgr"Ga:l^2+t]0N2*e%o\R:cZ8G5R#9snk'QcDA.([AhH/BpjLE_g=.fe*%jgkphL-=$9Y@1\,b9ElaQg?QHIP@LTYW@D6g1YN8,F`'U@VpnK7bl%%^9=W$%b/RXU]OO/COfj&%5n.TeWI],=GnW3Z+]0A_jYs])mNr9Rfe,l&`;&tW&`k:0lC5oZV,t*Nq;]rbn=BB`HWA4[\hhP,Rf4f?bnZ\Y%OSjFXTZp_X:Nso&+E"&k1QkBLjf\?ebJpX)cmt]m4)K=p(:I81kX6l'WETODLK2Yj*Cg_bTPU\/jqr"mb?L%Jj9nI'3q\^`4!D+g%37?NTXBWY?53ae=,E8K1:R!.ArKQEC;]3.&]OG_c(Y,8XT\Jk[@,`bmIn0)/;R7&jXo/5D%jSmQ!r\J.E[<0KW9Q3CH?4;FmFcKO%_K[&Kg@Mj\G0Q#1'JIXi-?&+e05s_4/^KSQrj\;'$6Qn7G%O&0,kr[tO5)^TQ]@(=J;ni+HZI/_:epHH/Z'J>J%0h3EZ/rF<%bT2%(Q(&_<hs)KFkdT,a-]D0=]rb;Zd=3,PV*+WST@72Ri=7^-KKb.4=N,J#BC'0rrV;UH].O32J'R&^>g7SgQ_A"'0.;5?aSLOE4gF3%;uY,#[N/)Us6FU<ri:Ots7mc:nmC:(q`hjqnIPZhmFP_F_f(&(rBL8NgOK7nq]F_pr3tS_fC-KPp6WPlp$]ZorV->;rpn7)s7lP2%J,egV^]3l6s7Y(E%HMor5QCE.J,K%jqY#C>(aihF~>%AI9_PrivateDataEnd