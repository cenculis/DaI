%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: STU-SjF-anfh.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Juraj Blako
%%CreationDate: 9.10.2012
%%BoundingBox: 0 0 233 51
%%HiResBoundingBox: 0 0 232.1099 50.6910
%%CropBox: 0 0 232.1099 50.6910
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 28 8%%BeginData: 3564 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFDFCFFFDFCFFFD12FFA87DFFFFFF7DA9FFFFA87DA9FFFFA8%7DFD04FFA8277DFFFF527D52FFFF7DA8FF52FD0FFF7D7DA8A8FF7D52FF7D%A8FF7DA8A852A8FFFF7D7EA87D7DFF7DA87DA87D7DFF527DFF7DFF7DFF52%A87D7DA8FFFF7D53FF52A8FD1DFF7D52FFFFFF527DFFFFA827A8FFFF5953%FD04FFF8527DFFA87DF87DA8FF277D7D27A8FD0EFF7D27A852FF5252A852%27FFF87D7D27A8FFA85227A82728A852A827A87D27FFF852A827A852A87D%7DA800FFFFAF27527D287DFD31FF5227A8FFFFFF27A8FFFF527DFF27FD0F%FF7EA8A87DA8A852FF7DA8A87D7DFF7DA8FFFF7D7DFFA87DFF7DFF7DFF7E%7DFF7D7DFF7DFF7DFFA8FFFFA8FFFFFF7D7DFF7DFD32FFA852F8FFFFFFF8%A8FFFF277D5327FD72FF522152FFFFFF27A8FFFF7DF8277DFD0FFFA8A8FF%A8A8FF7DFFFD05A8FF7DA8FFA8FFA87DFFA8A8FFA8A8FFFFA8A8FFA8FFFF%FF7DFD04A8FF7DFF7DA8A8FFFFA8A8A8FFFFA8FFA8A8FFA8FD13FF7D53FF%FFFF537DFFFFA82EA8FFFF5952FD04FFA8FD05FFA8FD05FFA8FD10FF7D52%FF00A8527DA85227A82752A85252A852FF52527D5252FF2759FFFF52A828%27A8FFA8277DA8F8A8A8F8A87D7DA87DA827A852FF7D27A85252FFF8A8FD%12FFAF7DFFFFFF7DA8FFFFAF7DA8FFFFA87DFD05FF7DA8FD05FFA87DA8FD%12FFA87DFF52A8A852FF5252A87D52FF527DA852A87D52A87D52FF7DA8FF%FF7DA87D27AFFFFF277DA852A8A827FD06A852A852A87D27FF7D7DA8527D%FD26FF277DA8FFA8A8FFFF277D84FD15FFA8FFFFFFA8FD07FFA8FFA8FD05%FFA8FD1BFFA8FFFFFFA8FD2BFF527DFFFFA852FFFF527DFD1FFFA8FD1FFF%A8FD22FFA8A8FFFFFFA8A8FFFFFF84FFFFFFA8A8FD05FF5252FFA852A8FF%277DA8FD12FF7D7DA852FF52FFA87D7DA8FF7D7DA852A8FFA852A87D7DFF%FF527D7DA859FF52FF7D7DA87D7DFF278484A853A8A852A8A8FD1EFF7D2E%FFFFFF527EFFFFA852A8FFFF7E52FD04FFA85252FFFF52FFFF52FD14FF52%FF7D52A87DFFA852A87DFFA8A8FF7DFFFFA87D7DA8A8FFFF7DF87D7DA8A8%7DFF7D52A8527DA8527DA8A87DFFA827A87DFD1EFFA8A8FFFFFFA9A8FFFF%FFA8FFFFFFA8AFFD04FF7D7DA8FFA82EA8FFA8FD14FFA8FFFFA8FF84A8A8%7DA8A8A8FFA8FFA8FFFFFF7DFFA8FFFFFFA8A8A8FF7DFF7DA8A8FFA8A8A8%FFA8A8A8FFA8A8A8FFA8A8A8FD35FFA87DFD97FF7D7DA87DA8A87DA8A884%7DA87D7DA852FF52A8A8A87DA8A87DA8FD66FF52A8A8277DA852A8A8A827%A852A87D7DFF287DFFA87D52A852A8FD66FFA8A8FF7DA8A87DA8FFA87DFD%04A87DFF7DA8A8FFA87DA87D7DFDFCFFFDFCFFFDFCFFFD3AFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                             
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:ModifyDate>2012-10-09T17:23:34+02:00</xmp:ModifyDate>
         <xmp:CreateDate>2012-10-09T17:23:34+02:00</xmp:CreateDate>
         <xmp:MetadataDate>2012-10-09T17:23:34+02:00</xmp:MetadataDate>
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>56</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAOAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqk3mnzTZ+XLO3&#xA;urq3uLhLi4itVW1iMrBpTQEgdvxJ2GEC0E0iPMOuW+h6Jd6vcRSzQ2cZkeKFS8hHsP1k7AbnEBSV&#xA;a11OG40mPU0jmWGWAXAiaNhMFK8uJjpy5e2CltBeUvM9p5m0SLVrWCa3hlZ0EdwnB6o3EkdQR7g+&#xA;3XCRSg2p+W/Ntlr9zqtvbW9xA2k3JtZmuIzGHYDqlfl0O4FCRuMSFBtKPzF/M7T/ACU+k2j6fd6t&#xA;q2uzPBpenWSqXkaPjzJZiAAPUX7/AArgSmEnmzUF8oxa+nl3UZLuUKToQWIXq8n4nkpcIKD4vtdP&#xA;fbFUr/LT80IPP1o9/Y6Lf2GmhSYL67EQimZXKMiem7mqkb1GKpfJ+eHl9PJ915pNhdmztNVOjPB+&#xA;79UzBwnMfHx4Vbxrir0fFXYq7FULql+NP0y7v2hluRaQyTm3t15zSCNS3CNNuTNSgGKsf8t+f7LX&#xA;Z9FhhtmjbWtLn1aJvUSRUjgmghMZZCasTcg+1KHfFUltfzm0+403VtROk3UVtpltDqKF2iPrafNc&#xA;y2xuBwZuHD6tI7I2/EYqrv8AnBoUT+VVngki/wAWXM8FiWdPhjil9GKZvFZmePiB/N7YqmPlX8wr&#xA;PzH5l13Q7SzkQ+XpTb31y7Jx9X1HRUVftHksZevQCnfFW5PzBsk85J5XNrIbl7tbMT8l48m0+TUO&#xA;fHrTjCU+eKpNov51aLq2j3mpW9jOn1CfTra5t3Kh1k1O8+qR/QAVl90YYqibn82NOhvPM1mbCZrj&#xA;yraXt7qScl/u7RI5YQPe5jkLJXpxNcVQV/8AnRaWEXlFrnRrkzebZZYre3ikid4vTnigBO6h+X1h&#xA;WovQV8MVTTV/zPsNNm81Qy2E/PyrZrfTq7Ro1xGyF+UCE8im3HnSnIEYqiJ/Oupp5n1fQYtBmml0&#xA;zT11KGZZ4qXKSGRIo0SvJWkkgkUculN9iMVR3knzbB5s0GPXLW0mtLG5dxZ/WAFkkjQ8fU4dVBcM&#xA;AD4V74qxK2/O/TLjy9qusjSbqNNPtrO/toXeLlc2moTNBBIpRnEZ5RtyRtxir0DSL2W/0u0vZYDb&#xA;SXMSStbswcpzUNxLLsaV7Yqi8VdirsVdirsVdiqXa55h0TQ7eK41e7js4ZpVhieQ7GRzsP4k9ANz&#xA;hAQSq6vq+m6Tps+palOtvY268ppm3AB2GwqSSTQAdcCSV8GpafPp66jFcRvYPH663QYen6dOXPl0&#xA;pTFbUdD1zSNb06PUNJuUurOQkLIlRRlNCCpAKkeBGEhAKno3mTQdZmvodLu47mXT5fRvFT9l6e/U&#xA;bEBhtsfDEhQWBfnz5V1TzLodnY6d5THmW4VpmiuVv49PmsZeKiOVGkIEgY/aWvYexASyb8rNH8z6&#xA;N+X+jaZ5ouDda5bROt3KZPWNDK7RIZP2ikRVCfbqcVSf8hfKmveVfyz07RdetfqepwS3LS2/qRy8&#xA;RJO7r8cTOhqpB2OKvLJ/yu/N9rO78iro9ofLd35hOsN5j+tR1WBpA/H0OXq8vh/k9v8AKwq+lcCu&#xA;xV2KoDXzaDRb03lm2oWnot69kiqzSpT4lCuyKdvE4qwWPzN+W7v5ElOh+hNrUbN5VWSK2ia3hV4T&#xA;UVlUKHEscgSPkxH7NRTFV1trP5Y6bpPmnUbfQltNESZrLW79baGO2u2M7W0yAlhzjSWR+fIBdyRW&#xA;uKoTUPOn5Oro+iajc6dDNp9wl1aaJKLeGRFj0aYjhCwYqq+pCDDxNDt7YVTvT9f8h2v5gXGlWOmm&#xA;DXbiWSzuNVjt1WKS5MP6Rkt2mB5M/pt6u4p13rUYFS7UvN/5bWkei+f30Z7jVNYtJJ9PuYLWN78W&#xA;sVs00zueQoI4ag/ETQ8RWuKouz1P8uG8wHyxYaVE9xeQ2d1MY4oUhY28ZubJW5sjvJGkQdOKngON&#xA;aYqi/KeqeSfOUet3+n6UaXoTT9clurdY2nZIeL2s1SS5gST03B2BNBXFWP695s/KHRNFs5dS0pI9&#xA;OsbrU7CwX6uhEU+nTNNcLHVvh9Se0Ux0+0/HphVkPmuTyJ5e8s6x5l1PS4nsdTWBNXKRRmS5S4kW&#xA;CNZfUZFK8pt+TUAqcCoST8zPJNvr/l1mtLhdV832tuLC4+rgSGBnZoY5qt6gCtKzbKQtSTtviqJt&#xA;vPnlDTB5h0jTbWWnk+FJb2ztokVfSkDOxt+TIriPi3PpQimKoLTLj8uLWzuIYfLw06LUdPOv3tt9&#xA;Uj5Pb2soKl0gMhZwzc0Ra9fHFU90Xz3o2rnRBbRzofMFrc31h6ip/c2jRK5co7gcvrCFaV28MVQb&#xA;/ml5VX/EFGmf/DM8FvqnFBt68npCRPi+KNHDB27cW8MVbT80PKzSeXoy0yt5mlni0uqChFu/p+o9&#xA;GPFJGKhD35L0xVl2KuxV2KuxVB6pbaTcQRpqkcEkKzRtELgKVEwYekV5/t8tlxCCv1OHTp9PuItS&#xA;WJ7B42F0s9PS9Onxc+W1KYpKpBBbR20cEEaJbIgSKJAAgQCgVQNqUxVQ0e10i106KLSI4ItP3aFb&#xA;YL6XxEkleG25xKA1p1no9vJePp0UEck05e+MAUFp6Cpk4/t0pWuFQwf835PM0A0e7s5NUTyzA9wf&#xA;Mf6CZF1BV4L9XlTkC7RRsHMgTelOuBKJ8wecIdI/LSw17Sby81XTyLKusR/VpLhrd3QGeVZ/RRjJ&#xA;9h+K8gWqF22VQP5r6vqNp5i8pWEF3qtvZX7X/wBci0Ved1J6MKPHReMlQrGp26Yqz3RITDpFnGZb&#xA;mf8AdKfVvqfWTyHL99QL8YrQ7YqjcVdirsVQWtahp2naReX2puY9Pt4ne6cK7kRgfF8MYZzt/KK4&#xA;qxePSvy7l1TyrpiLPbano9k8nlu19S/tJY7OEwxusiloi6/uYwUuK8gp2I5Yqh4LL8sJ9NvrpEn/&#xA;AEVr1y01wrnUUtbiaIPqDTQROVjCsIWlMkKhZKdWruq3f+XfytufL8kNzYmfSNOikvmhRbyQxx6l&#xA;OL15FSOsh5yx+p8IqlP2RiqpDH+Wj+b9P15VdPMWros+nGQXsfrepAYPVS2fjEJBbxcXf0+SpTkQ&#xA;pFVUHq/lH8qdMsdO8qajFdi0Dj6hB9Z1WYQrdBbERm5SRzBBLzEXpvIsbVO3XFU40zQPIupeZf07&#xA;Y2Ug1bRybNbkLd28AaBZrSiK3p207RK0sXMBioNKjbFVmh+bPy7sYr230q8VFrqmr3sYWd2Btrsr&#xA;qMzB1ZhS4kNF7/sAriqA1Xy5+V2rW1npGo6ZPOmqT315b2Tw6isnqXc1LyeVAFkgQyz15ycVWoK0&#xA;2xVH6zqH5f695dv9L1GYzaPZ24vL1FN1CyQ2Ny4DrJF6ctUnsmpwbkePcEVVSqey/J+3l8qNIFjl&#xA;htbT/CjK92GFu1xBBb+mVNTWW6iU89yrHl8HLFUVHoX5X2l9cTW9ifr/AJiOo2F69vHeSzXIa5K3&#xA;3r+mGbik/wAPqvQICAjKpGKo1/8AAMt1qMQkIutGtYtDvmikukeG3u+DRxK8ZBqx4/vEPJTtyBBx&#xA;VFw/l95Tt/0L9VtJLX/D4kXSvq9zcwcFmdJJVk9OVfXWV4lZxNyDHrWpqqpW/wCWfkW3XVFg0mOP&#xA;9NQTW2rkPLyuY7h3kk9ZudXctK1HPxAbAgUGKuufyz8jXI0z19Jjc6LDb2+kOXlDWqWsiSxeiwfk&#xA;jBo1qwPJh8LErtirJ8VdirsVdiqT+Z/KWieZrSC11aJpYbeZLiMI7IeadiV7EEg/hvhBpBFonXND&#xA;07W9IudJ1CMyWd0nCRQSrChBUgjoVIBGIKkL7TR9PtdIj0iGKmnxQi2WEkt+6C8OJYmp2wWtIfy3&#xA;5b0ry5pUel6XG0dpGzOquxduTnkSS2Em1ApZoXlXRtDuNRn06Jo5NUnNzdlnZ6uf5eRNBUk/T8sS&#xA;VApDecPJlt5oto7e51PUtPiRZY5F026a2E0cwCukygMrii7VFRvTqcCUk85eRLufyBa+SfK1vb2+&#xA;n8ra2kkuZXH1e0gkWVnQBZGlkPp0oxG5qTirJ9Q8u6ff65pOszmQXmjfWPqgVgEP1qMRycxQ1+Eb&#xA;b4qmmKuxV2KuxVKfNtvo1z5Z1ODW5fQ0iS3kW/mrTjCR8ZrRu3tirHPqX5cjzBpWtpdpbahHFbjS&#xA;Ykb0UFuXexijSDio4PLflOleTDpiqmfLnk260B/LkOt3Qs9IuY7WFoZlElo0qtYx2kcgjpx4ytDR&#xA;uTDoTUbKol18mwDVJU1p4rCCyew1S0Vo2ijisgYHZyY2mV4vUps/hscVRdpeeTv0h5eihu+d7FaS&#xA;Jo6Mrc3t2VUdjVBT+5HWmKoe4t/JXmu5stZg1QzxCWK0aO2lAiuJLeUXcMM6FS1UkT1FHwkg71Vq&#xA;FVFaVqnkXSNPv7+zvLZLaSV76/vAVq73l1Ki82UAufXV4kXc/DxxVK9J/KXyVDc6hq9i1wX16zu7&#xA;a4k9QcWg1JklkKDiOJqgK/M1riqeWvk2ytZNLmgu547jSkkgjliW3hEtvLIkrQSRRQxw8OUSU4Ir&#xA;CnXdqqoCH8rfKkCX6QxyRDU+H6QMbKjTBLx70h2VQx5tKyMa14bAjrirc35YeVpotHilSZ10GaKf&#xA;Si0lWiMFytzGoJBPFSgj/wBTbrviqYHyfpwubO6gnuLa5spryaOaJ0DMuoXH1m5hfkjAxvIqmnX4&#xA;RviqDX8udBjk1KeCS5hu9WPK9uVkDOzi5a7jYCRXQelJIwQcaBTSmKsltopIbeOKSZ7h0UK08oQO&#xA;5H7TCNY0qf8AJUDFVTFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYql3mPRINd0G/wBG&#xA;uJGigv4Xt5JI6clVxQkcgRX54qxvVPyr0bVL7RL67uZhdaE1q1q8QSMN9UuVuVVlC04uyAMvTYHq&#xA;AcVRVn+X1rbXV9L+kbqSC8vIr5LVivpxSR351FgoA/bmYgnrx27VxVBP+UuhGTzBIl1cI3mOK5iv&#xA;gChUNdTGVpEUrTmAVSp6qqg9MVTO38kW0Ot6Vq4unNxpdq1kienEEeNiTWgX4DvT4cVQ3lj8ttJ8&#xA;u2MVlZ3MzwQ3qagvqcC3qrbi3ILBQSrAct+nQfDQBVCQflLotpaahBZXlzA989lOslUYQzWEjTI8&#xA;aFeP7x3LSDuSTsTXFWX6RYfo7SrLT/XkufqcEVv9ZmPKWT0kCc5G7s1Kk+OKorFXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FX//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Untitled-6</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:28D2CAE20D206811945780C5360C7B74</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:28D2CAE20D206811945780C5360C7B74</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:OriginalDocumentID>uuid:ff59da96-db25-5c4f-8895-0c66e0485683</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:27D2CAE20D206811945780C5360C7B74</stRef:instanceID>
            <stRef:documentID>xmp.did:27D2CAE20D206811945780C5360C7B74</stRef:documentID>
            <stRef:originalDocumentID>uuid:ff59da96-db25-5c4f-8895-0c66e0485683</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:27D2CAE20D206811945780C5360C7B74</stEvt:instanceID>
                  <stEvt:when>2012-10-09T17:23:24+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:28D2CAE20D206811945780C5360C7B74</stEvt:instanceID>
                  <stEvt:when>2012-10-09T17:23:34+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 9.90</pdf:Producer>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>81.883202</stDim:w>
            <stDim:h>17.882457</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>SjF_CMYK</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>20.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>70.000000</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -50.6909 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 50.6909 li
232.11 50.6909 li
232.11 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0 50.6909 mo
232.11 50.6909 li
232.11 0 li
0 0 li
0 50.6909 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
gsave
0 .000976563 mo
232.11 .000976563 li
232.11 50.6909 li
0 50.6909 li
0 .000976563 li
cp
clp
100.425 15.3374 mo
100.68 14.7544 li
100.697 14.7144 100.731 14.6973 100.776 14.7144 cv
101.014 14.8223 101.212 14.9014 101.604 14.9014 cv
101.942 14.9014 102.146 14.7544 102.146 14.5054 cv
102.146 14.2734 102.033 14.1543 101.484 13.9106 cv
100.776 13.6104 100.47 13.2373 100.47 12.6313 cv
100.47 11.9692 100.968 11.4766 101.813 11.4766 cv
102.361 11.4766 102.599 11.5166 103.012 11.6973 cv
103.063 11.7144 103.063 11.7544 103.046 11.7935 cv
102.78 12.3145 li
102.763 12.3545 102.729 12.3774 102.678 12.3545 cv
102.458 12.2632 102.231 12.2183 101.965 12.2183 cv
101.604 12.2183 101.444 12.3774 101.444 12.6084 cv
101.444 12.8354 101.529 12.9424 102.135 13.1865 cv
102.842 13.4863 103.114 13.8374 103.114 14.4146 cv
103.114 15.2075 102.554 15.6436 101.682 15.6436 cv
101.212 15.6436 100.844 15.6035 100.459 15.4053 cv
100.425 15.3823 100.414 15.3594 100.425 15.3374 cv
0 0 0 1 cmyk
f
106.051 14.8335 mo
106.051 14.8613 106.063 14.8784 106.091 14.8784 cv
107.58 14.8784 li
107.625 14.8784 107.648 14.9014 107.648 14.9526 cv
107.648 15.5293 li
107.648 15.5815 107.625 15.6035 107.58 15.6035 cv
105.23 15.6035 li
105.179 15.6035 105.157 15.5815 105.157 15.5293 cv
105.157 11.5894 li
105.157 11.5396 105.179 11.5166 105.23 11.5166 cv
105.989 11.5166 li
106.029 11.5166 106.051 11.5396 106.051 11.5894 cv
106.051 14.8335 li
cp
f
110.896 12.2012 mo
110.353 12.2012 110.058 12.6421 110.058 13.5542 cv
110.058 14.4824 110.347 14.9185 110.89 14.9185 cv
111.428 14.9185 111.722 14.4824 111.722 13.5601 cv
111.722 12.6372 111.422 12.2012 110.896 12.2012 cv
110.89 15.6431 mo
109.531 15.6431 109.124 14.9014 109.124 13.5601 cv
109.124 12.207 109.531 11.4761 110.89 11.4761 cv
112.249 11.4761 112.656 12.2124 112.656 13.5542 cv
112.656 14.9072 112.249 15.6431 110.89 15.6431 cv
f
115.6 15.6035 mo
115.572 15.6035 115.555 15.5864 115.543 15.5527 cv
114.389 11.6064 li
114.371 11.5557 114.4 11.5166 114.445 11.5166 cv
115.271 11.5166 li
115.317 11.5166 115.322 11.5337 115.339 11.5728 cv
116.138 14.7085 li
116.936 11.5728 li
116.947 11.5337 116.97 11.5166 117.009 11.5166 cv
117.747 11.5166 li
117.796 11.5166 117.819 11.5444 117.808 11.5957 cv
116.647 15.5527 li
116.636 15.5864 116.613 15.6035 116.579 15.6035 cv
115.6 15.6035 li
cp
f
121.362 14.0239 mo
120.909 12.4561 li
120.456 14.0239 li
121.362 14.0239 li
cp
120.252 14.7427 mo
120.026 15.5527 li
120.009 15.5869 119.987 15.604 119.952 15.604 cv
119.215 15.604 li
119.177 15.604 119.149 15.5688 119.166 15.5298 cv
120.411 11.5449 li
120.411 11.5278 120.428 11.5161 120.456 11.5161 cv
121.458 11.5161 li
121.475 11.5161 121.492 11.5278 121.503 11.5562 cv
122.738 15.5298 li
122.754 15.5688 122.726 15.604 122.687 15.604 cv
121.866 15.604 li
121.832 15.604 121.809 15.5869 121.792 15.5527 cv
121.566 14.7427 li
120.252 14.7427 li
cp
f
126.286 13.5825 mo
127.69 15.5015 li
127.719 15.5464 127.69 15.6035 127.645 15.6035 cv
126.677 15.6035 li
126.654 15.6035 126.637 15.5923 126.626 15.5757 cv
125.533 13.8716 li
125.533 15.5293 li
125.533 15.5815 125.511 15.6035 125.471 15.6035 cv
124.712 15.6035 li
124.661 15.6035 124.639 15.5815 124.639 15.5293 cv
124.639 11.5894 li
124.639 11.5396 124.661 11.5166 124.712 11.5166 cv
125.471 11.5166 li
125.511 11.5166 125.533 11.5396 125.533 11.5894 cv
125.533 13.3843 li
126.615 11.5444 li
126.626 11.5273 126.643 11.5166 126.666 11.5166 cv
127.537 11.5166 li
127.599 11.5166 127.617 11.5728 127.588 11.6187 cv
126.286 13.5825 li
cp
f
135.873 14.3413 mo
135.873 15.1392 135.426 15.6436 134.31 15.6436 cv
133.201 15.6436 132.754 15.1392 132.754 14.3413 cv
132.754 11.5903 li
132.754 11.5396 132.776 11.5161 132.827 11.5161 cv
133.586 11.5161 li
133.625 11.5161 133.648 11.5396 133.648 11.5903 cv
133.648 14.3184 li
133.648 14.7202 133.869 14.9185 134.31 14.9185 cv
134.758 14.9185 134.978 14.7202 134.978 14.3184 cv
134.978 11.5903 li
134.978 11.5396 135.001 11.5161 135.046 11.5161 cv
135.81 11.5161 li
135.85 11.5161 135.873 11.5396 135.873 11.5903 cv
135.873 14.3413 li
cp
f
140.339 14.2676 mo
140.339 11.5898 li
140.339 11.5386 140.356 11.5166 140.396 11.5166 cv
141.125 11.5166 li
141.17 11.5166 141.194 11.5386 141.194 11.5898 cv
141.194 15.5298 li
141.194 15.5806 141.17 15.6035 141.125 15.6035 cv
140.333 15.6035 li
140.282 15.6035 140.271 15.5977 140.253 15.5586 cv
138.941 12.8516 li
138.941 15.5298 li
138.941 15.5806 138.917 15.6035 138.873 15.6035 cv
138.159 15.6035 li
138.109 15.6035 138.085 15.5806 138.085 15.5298 cv
138.085 11.5898 li
138.085 11.5386 138.109 11.5166 138.159 11.5166 cv
138.941 11.5166 li
138.992 11.5166 139.002 11.5215 139.02 11.5615 cv
140.339 14.2676 li
cp
f
144.239 11.5161 mo
144.279 11.5161 144.301 11.5391 144.301 11.5903 cv
144.301 15.5303 li
144.301 15.5811 144.279 15.603 144.239 15.603 cv
143.48 15.603 li
143.429 15.603 143.407 15.5811 143.407 15.5303 cv
143.407 11.5903 li
143.407 11.5391 143.429 11.5161 143.48 11.5161 cv
144.239 11.5161 li
cp
f
147.418 15.6035 mo
147.39 15.6035 147.373 15.5864 147.361 15.5527 cv
146.206 11.6064 li
146.189 11.5557 146.218 11.5166 146.263 11.5166 cv
147.089 11.5166 li
147.135 11.5166 147.14 11.5337 147.157 11.5728 cv
147.956 14.7085 li
148.754 11.5728 li
148.765 11.5337 148.788 11.5166 148.827 11.5166 cv
149.564 11.5166 li
149.614 11.5166 149.637 11.5444 149.626 11.5957 cv
148.465 15.5527 li
148.454 15.5864 148.431 15.6035 148.397 15.6035 cv
147.418 15.6035 li
cp
f
152.42 13.1978 mo
153.684 13.1978 li
153.734 13.1978 153.763 13.2197 153.763 13.2656 cv
153.763 13.8545 li
153.763 13.8936 153.734 13.9165 153.684 13.9165 cv
152.42 13.9165 li
152.42 14.8335 li
152.42 14.8618 152.433 14.8789 152.46 14.8789 cv
154.051 14.8789 li
154.103 14.8789 154.125 14.9019 154.125 14.9468 cv
154.125 15.5298 li
154.125 15.5806 154.103 15.6035 154.051 15.6035 cv
151.6 15.6035 li
151.549 15.6035 151.527 15.5806 151.527 15.5298 cv
151.527 11.5898 li
151.527 11.5386 151.549 11.5156 151.6 11.5156 cv
154.051 11.5156 li
154.103 11.5156 154.125 11.5386 154.125 11.5898 cv
154.125 12.1675 li
154.125 12.2188 154.103 12.2407 154.051 12.2407 cv
152.46 12.2407 li
152.433 12.2407 152.42 12.2578 152.42 12.2856 cv
152.42 13.1978 li
cp
f
157.005 13.3447 mo
157.351 13.3447 li
157.764 13.3447 158.019 13.1636 158.019 12.7729 cv
158.019 12.4058 157.803 12.2407 157.373 12.2407 cv
157.05 12.2407 li
157.022 12.2407 157.005 12.2578 157.005 12.2856 cv
157.005 13.3447 li
cp
157.005 13.9849 mo
157.005 15.5298 li
157.005 15.5806 156.983 15.6035 156.943 15.6035 cv
156.184 15.6035 li
156.133 15.6035 156.111 15.5806 156.111 15.5298 cv
156.111 11.5898 li
156.111 11.5386 156.133 11.5156 156.184 11.5156 cv
157.492 11.5156 li
158.517 11.5156 158.953 11.9697 158.953 12.7559 cv
158.953 13.3447 158.675 13.7529 158.132 13.9058 cv
159.162 15.4956 li
159.202 15.5576 159.167 15.6035 159.117 15.6035 cv
158.216 15.6035 li
158.188 15.6035 158.172 15.5928 158.166 15.5747 cv
157.243 13.9849 li
157.005 13.9849 li
cp
f
161.03 15.3374 mo
161.285 14.7544 li
161.302 14.7144 161.335 14.6973 161.38 14.7144 cv
161.619 14.8223 161.817 14.9014 162.208 14.9014 cv
162.546 14.9014 162.75 14.7544 162.75 14.5054 cv
162.75 14.2734 162.638 14.1543 162.088 13.9106 cv
161.38 13.6104 161.075 13.2373 161.075 12.6313 cv
161.075 11.9692 161.573 11.4766 162.417 11.4766 cv
162.965 11.4766 163.204 11.5166 163.617 11.6973 cv
163.667 11.7144 163.667 11.7544 163.651 11.7935 cv
163.385 12.3145 li
163.368 12.3545 163.333 12.3774 163.283 12.3545 cv
163.063 12.2632 162.835 12.2183 162.57 12.2183 cv
162.208 12.2183 162.048 12.3774 162.048 12.6084 cv
162.048 12.8354 162.133 12.9424 162.74 13.1865 cv
163.447 13.4863 163.719 13.8374 163.719 14.4146 cv
163.719 15.2075 163.159 15.6436 162.287 15.6436 cv
161.817 15.6436 161.449 15.6035 161.064 15.4053 cv
161.03 15.3823 161.019 15.3594 161.03 15.3374 cv
f
166.594 11.5161 mo
166.633 11.5161 166.656 11.5391 166.656 11.5903 cv
166.656 15.5303 li
166.656 15.5811 166.633 15.603 166.594 15.603 cv
165.834 15.603 li
165.784 15.603 165.762 15.5811 165.762 15.5303 cv
165.762 11.5903 li
165.762 11.5391 165.784 11.5161 165.834 11.5161 cv
166.594 11.5161 li
cp
f
169.681 15.6035 mo
169.641 15.6035 169.62 15.5815 169.62 15.5293 cv
169.62 12.2866 li
169.62 12.2573 169.603 12.2407 169.575 12.2407 cv
168.628 12.2407 li
168.578 12.2407 168.555 12.2188 168.555 12.1675 cv
168.555 11.5894 li
168.555 11.5396 168.578 11.5166 168.628 11.5166 cv
171.515 11.5166 li
171.561 11.5166 171.583 11.5396 171.583 11.5894 cv
171.583 12.1675 li
171.583 12.2188 171.561 12.2407 171.515 12.2407 cv
170.553 12.2407 li
170.526 12.2407 170.513 12.2573 170.513 12.2866 cv
170.513 15.5293 li
170.513 15.5815 170.492 15.6035 170.441 15.6035 cv
169.681 15.6035 li
cp
f
175.28 14.0127 mo
175.28 15.5249 li
175.28 15.5757 175.256 15.6035 175.211 15.6035 cv
174.453 15.6035 li
174.408 15.6035 174.385 15.5757 174.385 15.5249 cv
174.385 14.0127 li
173.128 11.6177 li
173.1 11.5679 173.117 11.5156 173.185 11.5156 cv
174.069 11.5156 li
174.097 11.5156 174.113 11.5278 174.125 11.5557 cv
174.906 13.2207 li
175.688 11.5557 li
175.693 11.5278 175.709 11.5156 175.738 11.5156 cv
176.547 11.5156 li
176.61 11.5156 176.626 11.5679 176.605 11.6128 cv
175.28 14.0127 li
cp
f
183.241 12.2012 mo
182.698 12.2012 182.403 12.6421 182.403 13.5542 cv
182.403 14.4824 182.692 14.9185 183.235 14.9185 cv
183.773 14.9185 184.067 14.4824 184.067 13.5601 cv
184.067 12.6372 183.767 12.2012 183.241 12.2012 cv
183.235 15.6431 mo
181.877 15.6431 181.469 14.9014 181.469 13.5601 cv
181.469 12.207 181.877 11.4761 183.235 11.4761 cv
184.594 11.4761 185.001 12.2124 185.001 13.5542 cv
185.001 14.9072 184.594 15.6431 183.235 15.6431 cv
f
187.94 13.1978 mo
189.145 13.1978 li
189.197 13.1978 189.224 13.2197 189.224 13.2656 cv
189.224 13.8545 li
189.224 13.8936 189.197 13.9165 189.145 13.9165 cv
187.94 13.9165 li
187.94 15.5298 li
187.94 15.5806 187.917 15.6035 187.877 15.6035 cv
187.119 15.6035 li
187.068 15.6035 187.045 15.5806 187.045 15.5298 cv
187.045 11.5898 li
187.045 11.5386 187.068 11.5156 187.119 11.5156 cv
189.513 11.5156 li
189.565 11.5156 189.586 11.5386 189.586 11.5898 cv
189.586 12.1675 li
189.586 12.2188 189.565 12.2407 189.513 12.2407 cv
187.985 12.2407 li
187.957 12.2407 187.94 12.2578 187.94 12.2856 cv
187.94 13.1978 li
cp
f
101.405 23.4688 mo
101.365 23.4688 101.343 23.4468 101.343 23.3945 cv
101.343 20.1519 li
101.343 20.1226 101.326 20.106 101.298 20.106 cv
100.352 20.106 li
100.301 20.106 100.279 20.0835 100.279 20.0327 cv
100.279 19.4546 li
100.279 19.4048 100.301 19.3818 100.352 19.3818 cv
103.239 19.3818 li
103.284 19.3818 103.307 19.4048 103.307 19.4546 cv
103.307 20.0327 li
103.307 20.0835 103.284 20.106 103.239 20.106 cv
102.277 20.106 li
102.249 20.106 102.237 20.1226 102.237 20.1519 cv
102.237 23.3945 li
102.237 23.4468 102.215 23.4688 102.164 23.4688 cv
101.405 23.4688 li
cp
f
106.102 21.063 mo
107.365 21.063 li
107.415 21.063 107.444 21.085 107.444 21.1309 cv
107.444 21.7202 li
107.444 21.7588 107.415 21.7822 107.365 21.7822 cv
106.102 21.7822 li
106.102 22.6992 li
106.102 22.7271 106.114 22.7441 106.142 22.7441 cv
107.732 22.7441 li
107.784 22.7441 107.806 22.7671 107.806 22.812 cv
107.806 23.395 li
107.806 23.4458 107.784 23.4692 107.732 23.4692 cv
105.281 23.4692 li
105.23 23.4692 105.208 23.4458 105.208 23.395 cv
105.208 19.4551 li
105.208 19.4038 105.23 19.3809 105.281 19.3809 cv
107.732 19.3809 li
107.784 19.3809 107.806 19.4038 107.806 19.4551 cv
107.806 20.0332 li
107.806 20.084 107.784 20.106 107.732 20.106 cv
106.142 20.106 li
106.114 20.106 106.102 20.123 106.102 20.1509 cv
106.102 21.063 li
cp
f
111.553 23.5083 mo
110.381 23.5083 109.679 22.7104 109.679 21.4253 cv
109.679 20.1401 110.381 19.3413 111.553 19.3413 cv
112.029 19.3413 112.333 19.3984 112.646 19.5732 cv
112.674 19.5913 112.685 19.6133 112.685 19.6304 cv
112.685 19.6475 112.679 19.6704 112.667 19.6934 cv
112.402 20.2021 li
112.385 20.2305 112.368 20.2476 112.351 20.2476 cv
112.333 20.2476 112.317 20.2422 112.301 20.2363 cv
112.074 20.1294 111.875 20.0894 111.626 20.0894 cv
111.157 20.0894 110.614 20.4805 110.614 21.4253 cv
110.614 22.3765 111.129 22.7554 111.633 22.7554 cv
111.819 22.7554 112.04 22.7334 112.306 22.6025 cv
112.345 22.5854 112.38 22.5913 112.396 22.6255 cv
112.674 23.1523 li
112.702 23.1963 112.691 23.2373 112.646 23.2651 cv
112.306 23.4575 112.006 23.5083 111.553 23.5083 cv
f
115.56 21.7817 mo
115.532 21.7817 115.515 21.7988 115.515 21.8267 cv
115.515 23.3945 li
115.515 23.4468 115.492 23.4688 115.453 23.4688 cv
114.693 23.4688 li
114.643 23.4688 114.621 23.4468 114.621 23.3945 cv
114.621 19.4546 li
114.621 19.4048 114.643 19.3818 114.693 19.3818 cv
115.453 19.3818 li
115.492 19.3818 115.515 19.4048 115.515 19.4546 cv
115.515 21.0176 li
115.515 21.0459 115.532 21.0625 115.56 21.0625 cv
116.789 21.0625 li
116.817 21.0625 116.833 21.0459 116.833 21.0176 cv
116.833 19.4546 li
116.833 19.4048 116.856 19.3818 116.902 19.3818 cv
117.66 19.3818 li
117.706 19.3818 117.728 19.4048 117.728 19.4546 cv
117.728 23.3945 li
117.728 23.4468 117.706 23.4688 117.66 23.4688 cv
116.902 23.4688 li
116.856 23.4688 116.833 23.4468 116.833 23.3945 cv
116.833 21.8267 li
116.833 21.7988 116.817 21.7817 116.789 21.7817 cv
115.56 21.7817 li
cp
f
122.194 22.1328 mo
122.194 19.4546 li
122.194 19.4038 122.21 19.3818 122.25 19.3818 cv
122.981 19.3818 li
123.026 19.3818 123.048 19.4038 123.048 19.4546 cv
123.048 23.395 li
123.048 23.4458 123.026 23.4688 122.981 23.4688 cv
122.188 23.4688 li
122.137 23.4688 122.125 23.4629 122.109 23.4238 cv
120.795 20.7168 li
120.795 23.395 li
120.795 23.4458 120.773 23.4688 120.728 23.4688 cv
120.014 23.4688 li
119.963 23.4688 119.941 23.4458 119.941 23.395 cv
119.941 19.4546 li
119.941 19.4038 119.963 19.3818 120.014 19.3818 cv
120.795 19.3818 li
120.847 19.3818 120.858 19.3867 120.875 19.4268 cv
122.194 22.1328 li
cp
f
126.858 20.0664 mo
126.315 20.0664 126.02 20.5073 126.02 21.4194 cv
126.02 22.3477 126.309 22.7832 126.852 22.7832 cv
127.39 22.7832 127.684 22.3477 127.684 21.4253 cv
127.684 20.5024 127.384 20.0664 126.858 20.0664 cv
126.852 23.5083 mo
125.495 23.5083 125.086 22.7666 125.086 21.4253 cv
125.086 20.0723 125.495 19.3413 126.852 19.3413 cv
128.211 19.3413 128.619 20.0776 128.619 21.4194 cv
128.619 22.7725 128.211 23.5083 126.852 23.5083 cv
f
131.556 22.6987 mo
131.556 22.7266 131.568 22.7437 131.596 22.7437 cv
133.085 22.7437 li
133.13 22.7437 133.153 22.7666 133.153 22.8179 cv
133.153 23.3945 li
133.153 23.4468 133.13 23.4688 133.085 23.4688 cv
130.735 23.4688 li
130.684 23.4688 130.663 23.4468 130.663 23.3945 cv
130.663 19.4546 li
130.663 19.4048 130.684 19.3818 130.735 19.3818 cv
131.495 19.3818 li
131.535 19.3818 131.556 19.4048 131.556 19.4546 cv
131.556 22.6987 li
cp
f
136.402 20.0664 mo
135.858 20.0664 135.563 20.5073 135.563 21.4194 cv
135.563 22.3477 135.852 22.7832 136.395 22.7832 cv
136.933 22.7832 137.227 22.3477 137.227 21.4253 cv
137.227 20.5024 136.927 20.0664 136.402 20.0664 cv
136.395 23.5083 mo
135.038 23.5083 134.629 22.7666 134.629 21.4253 cv
134.629 20.0723 135.038 19.3413 136.395 19.3413 cv
137.754 19.3413 138.162 20.0776 138.162 21.4194 cv
138.162 22.7725 137.754 23.5083 136.395 23.5083 cv
f
142.402 21.9629 mo
141.875 21.9629 li
141.83 21.9629 141.807 21.9409 141.807 21.895 cv
141.807 21.3062 li
141.807 21.2607 141.83 21.2378 141.875 21.2378 cv
143.148 21.2378 li
143.194 21.2378 143.216 21.2607 143.216 21.3062 cv
143.216 23.1968 li
143.216 23.2417 143.2 23.271 143.171 23.2759 cv
142.814 23.418 142.408 23.5078 141.909 23.5078 cv
140.737 23.5078 140.036 22.71 140.036 21.4248 cv
140.036 20.1401 140.737 19.3418 141.909 19.3418 cv
142.362 19.3418 142.684 19.3989 143.001 19.5737 cv
143.03 19.5908 143.042 19.6138 143.042 19.6299 cv
143.042 19.6479 143.036 19.6709 143.024 19.6929 cv
142.757 20.2021 li
142.742 20.231 142.724 20.248 142.708 20.248 cv
142.69 20.248 142.672 20.2417 142.657 20.2358 cv
142.429 20.1289 142.231 20.0889 141.982 20.0889 cv
141.512 20.0889 140.969 20.48 140.969 21.4248 cv
140.969 22.376 141.496 22.7949 141.944 22.7949 cv
142.141 22.7949 142.249 22.7837 142.402 22.7378 cv
142.402 21.9629 li
cp
f
147.054 21.8779 mo
147.054 23.3901 li
147.054 23.4409 147.031 23.4688 146.986 23.4688 cv
146.227 23.4688 li
146.182 23.4688 146.16 23.4409 146.16 23.3901 cv
146.16 21.8779 li
144.903 19.4829 li
144.875 19.4331 144.891 19.3809 144.959 19.3809 cv
145.843 19.3809 li
145.872 19.3809 145.887 19.3931 145.899 19.4209 cv
146.68 21.0859 li
147.462 19.4209 li
147.467 19.3931 147.484 19.3809 147.512 19.3809 cv
148.322 19.3809 li
148.384 19.3809 148.401 19.4331 148.379 19.478 cv
147.054 21.8779 li
cp
f
154.247 19.3813 mo
154.286 19.3813 154.308 19.4043 154.308 19.4551 cv
154.308 23.3955 li
154.308 23.4463 154.286 23.4683 154.247 23.4683 cv
153.487 23.4683 li
153.436 23.4683 153.415 23.4463 153.415 23.3955 cv
153.415 19.4551 li
153.415 19.4043 153.436 19.3813 153.487 19.3813 cv
154.247 19.3813 li
cp
f
158.772 22.1328 mo
158.772 19.4546 li
158.772 19.4038 158.789 19.3818 158.829 19.3818 cv
159.559 19.3818 li
159.604 19.3818 159.627 19.4038 159.627 19.4546 cv
159.627 23.395 li
159.627 23.4458 159.604 23.4688 159.559 23.4688 cv
158.766 23.4688 li
158.715 23.4688 158.704 23.4629 158.687 23.4238 cv
157.374 20.7168 li
157.374 23.395 li
157.374 23.4458 157.351 23.4688 157.306 23.4688 cv
156.592 23.4688 li
156.542 23.4688 156.519 23.4458 156.519 23.395 cv
156.519 19.4546 li
156.519 19.4038 156.542 19.3818 156.592 19.3818 cv
157.374 19.3818 li
157.425 19.3818 157.436 19.3867 157.453 19.4268 cv
158.772 22.1328 li
cp
f
165.914 21.7422 mo
165.914 22.6992 li
165.914 22.7271 165.925 22.7441 165.953 22.7441 cv
166.434 22.7441 li
166.747 22.7441 167.023 22.625 167.023 22.2744 cv
167.023 21.895 166.774 21.7422 166.225 21.7422 cv
165.914 21.7422 li
cp
165.958 20.1064 mo
165.93 20.1064 165.914 20.123 165.914 20.1514 cv
165.914 21.1021 li
166.248 21.1021 li
166.717 21.1021 166.956 20.9614 166.956 20.5762 cv
166.956 20.2144 166.734 20.1064 166.349 20.1064 cv
165.958 20.1064 li
cp
166.253 19.3813 mo
167.379 19.3813 167.889 19.7104 167.889 20.4854 cv
167.889 20.8472 167.651 21.2212 167.057 21.4023 cv
167.696 21.5781 167.958 21.9512 167.958 22.4722 cv
167.958 23.1973 167.476 23.4692 166.292 23.4692 cv
165.092 23.4692 li
165.042 23.4692 165.019 23.4463 165.019 23.395 cv
165.019 19.4551 li
165.019 19.4043 165.042 19.3813 165.092 19.3813 cv
166.253 19.3813 li
cp
f
171.064 21.21 mo
171.41 21.21 li
171.823 21.21 172.078 21.0288 172.078 20.6377 cv
172.078 20.271 171.862 20.106 171.432 20.106 cv
171.109 20.106 li
171.081 20.106 171.064 20.123 171.064 20.1509 cv
171.064 21.21 li
cp
171.064 21.8501 mo
171.064 23.395 li
171.064 23.4458 171.042 23.4688 171.002 23.4688 cv
170.243 23.4688 li
170.192 23.4688 170.17 23.4458 170.17 23.395 cv
170.17 19.4551 li
170.17 19.4038 170.192 19.3809 170.243 19.3809 cv
171.551 19.3809 li
172.576 19.3809 173.012 19.835 173.012 20.6211 cv
173.012 21.21 172.734 21.6177 172.191 21.771 cv
173.221 23.3608 li
173.261 23.4229 173.227 23.4688 173.176 23.4688 cv
172.275 23.4688 li
172.247 23.4688 172.231 23.458 172.225 23.4399 cv
171.302 21.8501 li
171.064 21.8501 li
cp
f
177.138 21.8892 mo
176.685 20.3213 li
176.232 21.8892 li
177.138 21.8892 li
cp
176.029 22.6079 mo
175.802 23.418 li
175.786 23.4521 175.763 23.4692 175.728 23.4692 cv
174.993 23.4692 li
174.954 23.4692 174.925 23.4341 174.942 23.395 cv
176.187 19.4102 li
176.187 19.3931 176.205 19.3813 176.232 19.3813 cv
177.234 19.3813 li
177.251 19.3813 177.268 19.3931 177.28 19.4209 cv
178.514 23.395 li
178.531 23.4341 178.502 23.4692 178.463 23.4692 cv
177.642 23.4692 li
177.608 23.4692 177.585 23.4521 177.568 23.418 cv
177.342 22.6079 li
176.029 22.6079 li
cp
f
180.885 23.4688 mo
180.845 23.4688 180.823 23.4468 180.823 23.3945 cv
180.823 20.1519 li
180.823 20.1226 180.806 20.106 180.778 20.106 cv
179.832 20.106 li
179.781 20.106 179.758 20.0835 179.758 20.0327 cv
179.758 19.4546 li
179.758 19.4048 179.781 19.3818 179.832 19.3818 cv
182.719 19.3818 li
182.764 19.3818 182.787 19.4048 182.787 19.4546 cv
182.787 20.0327 li
182.787 20.0835 182.764 20.106 182.719 20.106 cv
181.756 20.106 li
181.729 20.106 181.716 20.1226 181.716 20.1519 cv
181.716 23.3945 li
181.716 23.4468 181.695 23.4688 181.644 23.4688 cv
180.885 23.4688 li
cp
f
185.52 19.3813 mo
185.56 19.3813 185.582 19.4043 185.582 19.4551 cv
185.582 23.3955 li
185.582 23.4463 185.56 23.4683 185.52 23.4683 cv
184.761 23.4683 li
184.71 23.4683 184.688 23.4463 184.688 23.3955 cv
184.688 19.4551 li
184.688 19.4043 184.71 19.3813 184.761 19.3813 cv
185.52 19.3813 li
cp
f
187.629 23.2026 mo
187.884 22.6196 li
187.901 22.5796 187.935 22.5625 187.98 22.5796 cv
188.218 22.6875 188.416 22.7666 188.807 22.7666 cv
189.146 22.7666 189.35 22.6196 189.35 22.3706 cv
189.35 22.1387 189.237 22.0195 188.688 21.7754 cv
187.98 21.4756 187.674 21.1025 187.674 20.4966 cv
187.674 19.8345 188.172 19.3418 189.016 19.3418 cv
189.565 19.3418 189.803 19.3818 190.216 19.5625 cv
190.267 19.5796 190.267 19.6196 190.25 19.6587 cv
189.984 20.1797 li
189.967 20.2197 189.933 20.2427 189.882 20.2197 cv
189.661 20.1284 189.435 20.0835 189.168 20.0835 cv
188.807 20.0835 188.648 20.2427 188.648 20.4736 cv
188.648 20.7007 188.733 20.8076 189.339 21.0518 cv
190.045 21.3516 190.318 21.7026 190.318 22.2798 cv
190.318 23.0728 189.758 23.5088 188.886 23.5088 cv
188.416 23.5088 188.048 23.4688 187.663 23.2705 cv
187.629 23.2476 187.618 23.2246 187.629 23.2026 cv
f
193.255 22.6987 mo
193.255 22.7266 193.267 22.7437 193.294 22.7437 cv
194.784 22.7437 li
194.829 22.7437 194.852 22.7666 194.852 22.8179 cv
194.852 23.3945 li
194.852 23.4468 194.829 23.4688 194.784 23.4688 cv
192.434 23.4688 li
192.383 23.4688 192.361 23.4468 192.361 23.3945 cv
192.361 19.4546 li
192.361 19.4048 192.383 19.3818 192.434 19.3818 cv
193.193 19.3818 li
193.233 19.3818 193.255 19.4048 193.255 19.4546 cv
193.255 22.6987 li
cp
f
198.609 21.8892 mo
198.156 20.3213 li
197.703 21.8892 li
198.609 21.8892 li
cp
197.5 22.6079 mo
197.273 23.418 li
197.256 23.4521 197.234 23.4692 197.199 23.4692 cv
196.463 23.4692 li
196.424 23.4692 196.396 23.4341 196.413 23.395 cv
197.658 19.4102 li
197.658 19.3931 197.675 19.3813 197.703 19.3813 cv
198.705 19.3813 li
198.722 19.3813 198.739 19.3931 198.75 19.4209 cv
199.985 23.395 li
200.001 23.4341 199.973 23.4692 199.934 23.4692 cv
199.113 23.4692 li
199.079 23.4692 199.056 23.4521 199.039 23.418 cv
198.813 22.6079 li
197.5 22.6079 li
cp
f
202.565 23.4688 mo
202.538 23.4688 202.52 23.4517 202.508 23.4175 cv
201.353 19.4717 li
201.336 19.4209 201.366 19.3818 201.411 19.3818 cv
202.237 19.3818 li
202.283 19.3818 202.288 19.3989 202.304 19.4375 cv
203.103 22.5737 li
203.902 19.4375 li
203.913 19.3989 203.935 19.3818 203.974 19.3818 cv
204.711 19.3818 li
204.761 19.3818 204.785 19.4097 204.773 19.4609 cv
203.613 23.4175 li
203.601 23.4517 203.579 23.4688 203.544 23.4688 cv
202.565 23.4688 li
cp
f
208.327 21.8892 mo
207.875 20.3213 li
207.421 21.8892 li
208.327 21.8892 li
cp
207.218 22.6079 mo
206.991 23.418 li
206.974 23.4521 206.952 23.4692 206.917 23.4692 cv
206.181 23.4692 li
206.142 23.4692 206.114 23.4341 206.131 23.395 cv
207.376 19.4102 li
207.376 19.3931 207.393 19.3813 207.421 19.3813 cv
208.423 19.3813 li
208.44 19.3813 208.458 19.3931 208.469 19.4209 cv
209.703 23.395 li
209.72 23.4341 209.691 23.4692 209.652 23.4692 cv
208.832 23.4692 li
208.797 23.4692 208.774 23.4521 208.757 23.418 cv
208.531 22.6079 li
207.218 22.6079 li
cp
f
101.156 29.0522 mo
102.424 29.0522 li
102.464 29.0522 102.486 29.0698 102.486 29.1099 cv
102.486 29.4722 li
102.486 29.5103 102.464 29.5288 102.424 29.5288 cv
101.156 29.5288 li
101.156 31.2778 li
101.156 31.3169 101.139 31.3335 101.105 31.3335 cv
100.647 31.3335 li
100.607 31.3335 100.59 31.3169 100.59 31.2778 cv
100.59 27.3022 li
100.59 27.2642 100.607 27.2466 100.647 27.2466 cv
102.786 27.2466 li
102.826 27.2466 102.848 27.2642 102.848 27.3022 cv
102.848 27.6597 li
102.848 27.6997 102.826 27.7222 102.786 27.7222 cv
101.201 27.7222 li
101.173 27.7222 101.156 27.7397 101.156 27.7681 cv
101.156 29.0522 li
cp
f
106.181 29.8901 mo
105.563 27.8188 li
104.947 29.8901 li
106.181 29.8901 li
cp
104.811 30.3657 mo
104.545 31.2886 li
104.534 31.3169 104.511 31.3335 104.483 31.3335 cv
104.035 31.3335 li
103.995 31.3335 103.979 31.3052 103.995 31.2651 cv
105.229 27.2749 li
105.229 27.2583 105.241 27.2466 105.269 27.2466 cv
105.915 27.2466 li
105.932 27.2466 105.949 27.2583 105.954 27.2808 cv
107.177 31.2603 li
107.194 31.312 107.177 31.3335 107.132 31.3335 cv
106.639 31.3335 li
106.611 31.3335 106.588 31.3169 106.583 31.2886 cv
106.317 30.3657 li
104.811 30.3657 li
cp
f
110.641 31.3735 mo
109.486 31.3735 108.971 30.5249 108.971 29.2847 cv
108.971 28.061 109.486 27.2065 110.641 27.2065 cv
111.025 27.2065 111.309 27.2583 111.625 27.4331 cv
111.654 27.4565 111.654 27.4907 111.637 27.5298 cv
111.468 27.8413 li
111.451 27.8804 111.416 27.8804 111.388 27.8638 cv
111.145 27.7456 110.992 27.6938 110.675 27.6938 cv
110.041 27.6938 109.571 28.2036 109.571 29.2847 cv
109.571 30.3823 110.03 30.8862 110.675 30.8862 cv
110.958 30.8862 111.139 30.8472 111.394 30.7114 cv
111.428 30.6948 111.451 30.6997 111.468 30.7271 cv
111.643 31.0503 li
111.66 31.0845 111.654 31.1138 111.625 31.1411 cv
111.297 31.3228 111.032 31.3735 110.641 31.3735 cv
f
116.38 30.0659 mo
116.38 30.8579 116.097 31.3735 114.982 31.3735 cv
113.866 31.3735 113.584 30.8579 113.584 30.0659 cv
113.584 27.3032 li
113.584 27.2642 113.6 27.2466 113.64 27.2466 cv
114.099 27.2466 li
114.132 27.2466 114.15 27.2642 114.15 27.3032 cv
114.15 30.1909 li
114.15 30.7124 114.433 30.8979 114.982 30.8979 cv
115.525 30.8979 115.814 30.7056 115.814 30.1909 cv
115.814 27.3032 li
115.814 27.2642 115.831 27.2466 115.87 27.2466 cv
116.323 27.2466 li
116.363 27.2466 116.38 27.2642 116.38 27.3032 cv
116.38 30.0659 li
cp
f
119.159 30.813 mo
119.159 30.8413 119.169 30.8579 119.199 30.8579 cv
120.767 30.8579 li
120.806 30.8579 120.824 30.8813 120.824 30.9214 cv
120.824 31.2769 li
120.824 31.3169 120.806 31.3345 120.767 31.3345 cv
118.65 31.3345 li
118.61 31.3345 118.592 31.3169 118.592 31.2769 cv
118.592 27.3032 li
118.592 27.2642 118.61 27.2466 118.65 27.2466 cv
119.108 27.2466 li
119.142 27.2466 119.159 27.2642 119.159 27.3032 cv
119.159 30.813 li
cp
f
123.063 31.3345 mo
123.029 31.3345 123.012 31.3169 123.012 31.2769 cv
123.012 27.7681 li
123.012 27.7388 122.995 27.7222 122.967 27.7222 cv
121.987 27.7222 li
121.948 27.7222 121.931 27.6997 121.931 27.6597 cv
121.931 27.3032 li
121.931 27.2642 121.948 27.2466 121.987 27.2466 cv
124.603 27.2466 li
124.642 27.2466 124.659 27.2642 124.659 27.3032 cv
124.659 27.6597 li
124.659 27.6997 124.642 27.7222 124.603 27.7222 cv
123.618 27.7222 li
123.589 27.7222 123.578 27.7388 123.578 27.7681 cv
123.578 31.2769 li
123.578 31.3169 123.561 31.3345 123.521 31.3345 cv
123.063 31.3345 li
cp
f
127.981 29.6011 mo
127.981 31.272 li
127.981 31.311 127.964 31.3335 127.924 31.3335 cv
127.471 31.3335 li
127.432 31.3335 127.415 31.311 127.415 31.272 cv
127.415 29.6011 li
126.243 27.3374 li
126.214 27.2866 126.237 27.2466 126.288 27.2466 cv
126.803 27.2466 li
126.832 27.2466 126.849 27.2583 126.86 27.2808 cv
127.731 29.0757 li
128.609 27.2808 li
128.615 27.2583 128.632 27.2466 128.66 27.2466 cv
129.141 27.2466 li
129.187 27.2466 129.209 27.2866 129.192 27.3267 cv
127.981 29.6011 li
cp
f
135.348 27.6831 mo
134.673 27.6831 134.323 28.2085 134.323 29.2905 cv
134.323 30.3716 134.673 30.8979 135.348 30.8979 cv
136.009 30.8979 136.367 30.3716 136.367 29.2905 cv
136.367 28.2085 136.009 27.6831 135.348 27.6831 cv
135.348 31.3735 mo
134.108 31.3735 133.729 30.5415 133.729 29.2905 cv
133.729 28.0229 134.097 27.2065 135.348 27.2065 cv
136.582 27.2065 136.96 28.0229 136.96 29.2905 cv
136.96 30.5415 136.582 31.3735 135.348 31.3735 cv
f
139.57 29.0522 mo
140.837 29.0522 li
140.877 29.0522 140.9 29.0698 140.9 29.1099 cv
140.9 29.4722 li
140.9 29.5103 140.877 29.5288 140.837 29.5288 cv
139.57 29.5288 li
139.57 31.2778 li
139.57 31.3169 139.553 31.3335 139.519 31.3335 cv
139.061 31.3335 li
139.021 31.3335 139.003 31.3169 139.003 31.2778 cv
139.003 27.3022 li
139.003 27.2642 139.021 27.2466 139.061 27.2466 cv
141.2 27.2466 li
141.24 27.2466 141.262 27.2642 141.262 27.3022 cv
141.262 27.6597 li
141.262 27.6997 141.24 27.7222 141.2 27.7222 cv
139.615 27.7222 li
139.586 27.7222 139.57 27.7397 139.57 27.7681 cv
139.57 29.0522 li
cp
f
147.457 31.3345 mo
147.428 31.3345 147.412 31.3228 147.406 31.3003 cv
146.459 28.2036 li
146.459 31.2769 li
146.459 31.3169 146.444 31.3345 146.404 31.3345 cv
145.985 31.3345 li
145.945 31.3345 145.928 31.3169 145.928 31.2769 cv
145.928 27.3032 li
145.928 27.2642 145.945 27.2466 145.985 27.2466 cv
146.596 27.2466 li
146.625 27.2466 146.647 27.2583 146.653 27.2808 cv
147.711 30.6548 li
148.776 27.2808 li
148.787 27.2583 148.809 27.2466 148.837 27.2466 cv
149.399 27.2466 li
149.432 27.2466 149.45 27.2642 149.45 27.3032 cv
149.45 31.2769 li
149.45 31.3169 149.432 31.3345 149.399 31.3345 cv
148.973 31.3345 li
148.934 31.3345 148.917 31.3169 148.917 31.2769 cv
148.917 28.2036 li
147.977 31.3003 li
147.971 31.3228 147.955 31.3345 147.926 31.3345 cv
147.457 31.3345 li
cp
f
152.228 29.0522 mo
153.553 29.0522 li
153.592 29.0522 153.616 29.0698 153.616 29.1099 cv
153.616 29.4722 li
153.616 29.5103 153.592 29.5288 153.553 29.5288 cv
152.228 29.5288 li
152.228 30.813 li
152.228 30.8413 152.24 30.8589 152.268 30.8589 cv
153.916 30.8589 li
153.956 30.8589 153.977 30.8755 153.977 30.9146 cv
153.977 31.2778 li
153.977 31.3169 153.956 31.3335 153.916 31.3335 cv
151.718 31.3335 li
151.679 31.3335 151.663 31.3169 151.663 31.2778 cv
151.663 27.3022 li
151.663 27.2642 151.679 27.2466 151.718 27.2466 cv
153.916 27.2466 li
153.956 27.2466 153.977 27.2642 153.977 27.3022 cv
153.977 27.6597 li
153.977 27.6997 153.956 27.7222 153.916 27.7222 cv
152.268 27.7222 li
152.24 27.7222 152.228 27.7397 152.228 27.7681 cv
152.228 29.0522 li
cp
f
157.52 31.3735 mo
156.366 31.3735 155.85 30.5249 155.85 29.2847 cv
155.85 28.061 156.366 27.2065 157.52 27.2065 cv
157.906 27.2065 158.189 27.2583 158.505 27.4331 cv
158.534 27.4565 158.534 27.4907 158.516 27.5298 cv
158.347 27.8413 li
158.331 27.8804 158.295 27.8804 158.267 27.8638 cv
158.025 27.7456 157.872 27.6938 157.554 27.6938 cv
156.92 27.6938 156.451 28.2036 156.451 29.2847 cv
156.451 30.3823 156.91 30.8862 157.554 30.8862 cv
157.837 30.8862 158.018 30.8472 158.274 30.7114 cv
158.307 30.6948 158.331 30.6997 158.347 30.7271 cv
158.523 31.0503 li
158.54 31.0845 158.534 31.1138 158.505 31.1411 cv
158.177 31.3228 157.912 31.3735 157.52 31.3735 cv
f
161.074 29.5278 mo
161.046 29.5278 161.029 29.5454 161.029 29.5737 cv
161.029 31.2769 li
161.029 31.3169 161.011 31.3345 160.978 31.3345 cv
160.519 31.3345 li
160.479 31.3345 160.463 31.3169 160.463 31.2769 cv
160.463 27.3032 li
160.463 27.2632 160.479 27.2466 160.519 27.2466 cv
160.978 27.2466 li
161.011 27.2466 161.029 27.2632 161.029 27.3032 cv
161.029 29.0073 li
161.029 29.0356 161.046 29.0522 161.074 29.0522 cv
162.637 29.0522 li
162.666 29.0522 162.681 29.0356 162.681 29.0073 cv
162.681 27.3032 li
162.681 27.2632 162.699 27.2466 162.738 27.2466 cv
163.191 27.2466 li
163.231 27.2466 163.249 27.2632 163.249 27.3032 cv
163.249 31.2769 li
163.249 31.3169 163.231 31.3345 163.191 31.3345 cv
162.738 31.3345 li
162.699 31.3345 162.681 31.3169 162.681 31.2769 cv
162.681 29.5737 li
162.681 29.5454 162.666 29.5278 162.637 29.5278 cv
161.074 29.5278 li
cp
f
167.339 29.8901 mo
166.723 27.8188 li
166.106 29.8901 li
167.339 29.8901 li
cp
165.97 30.3657 mo
165.704 31.2886 li
165.693 31.3169 165.669 31.3335 165.642 31.3335 cv
165.194 31.3335 li
165.154 31.3335 165.138 31.3052 165.154 31.2651 cv
166.389 27.2749 li
166.389 27.2583 166.4 27.2466 166.428 27.2466 cv
167.074 27.2466 li
167.09 27.2466 167.108 27.2583 167.113 27.2808 cv
168.335 31.2603 li
168.353 31.312 168.335 31.3335 168.291 31.3335 cv
167.797 31.3335 li
167.77 31.3335 167.747 31.3169 167.742 31.2886 cv
167.476 30.3657 li
165.97 30.3657 li
cp
f
172.48 30.394 mo
172.48 27.3032 li
172.48 27.2642 172.497 27.2466 172.531 27.2466 cv
172.977 27.2466 li
173.017 27.2466 173.035 27.2642 173.035 27.3032 cv
173.035 31.2769 li
173.035 31.3169 173.017 31.3345 172.977 31.3345 cv
172.497 31.3345 li
172.446 31.3345 172.434 31.3276 172.417 31.2886 cv
170.798 28.186 li
170.798 31.2769 li
170.798 31.3169 170.782 31.3345 170.742 31.3345 cv
170.299 31.3345 li
170.26 31.3345 170.244 31.3169 170.244 31.2769 cv
170.244 27.3032 li
170.244 27.2642 170.26 27.2466 170.299 27.2466 cv
170.776 27.2466 li
170.827 27.2466 170.837 27.2524 170.855 27.2925 cv
172.48 30.394 li
cp
f
175.762 27.2466 mo
175.796 27.2466 175.813 27.2632 175.813 27.3032 cv
175.813 31.2778 li
175.813 31.3169 175.796 31.3335 175.762 31.3335 cv
175.304 31.3335 li
175.263 31.3335 175.248 31.3169 175.248 31.2778 cv
175.248 27.3032 li
175.248 27.2632 175.263 27.2466 175.304 27.2466 cv
175.762 27.2466 li
cp
f
179.581 31.3735 mo
178.425 31.3735 177.91 30.5249 177.91 29.2847 cv
177.91 28.061 178.425 27.2065 179.581 27.2065 cv
179.965 27.2065 180.249 27.2583 180.565 27.4331 cv
180.593 27.4565 180.593 27.4907 180.576 27.5298 cv
180.407 27.8413 li
180.39 27.8804 180.355 27.8804 180.327 27.8638 cv
180.084 27.7456 179.931 27.6938 179.614 27.6938 cv
178.98 27.6938 178.51 28.2036 178.51 29.2847 cv
178.51 30.3823 178.969 30.8862 179.614 30.8862 cv
179.897 30.8862 180.078 30.8472 180.333 30.7114 cv
180.367 30.6948 180.39 30.6997 180.407 30.7271 cv
180.583 31.0503 li
180.599 31.0845 180.593 31.1138 180.565 31.1411 cv
180.237 31.3228 179.971 31.3735 179.581 31.3735 cv
f
184.402 29.8901 mo
183.786 27.8188 li
183.168 29.8901 li
184.402 29.8901 li
cp
183.033 30.3657 mo
182.766 31.2886 li
182.755 31.3169 182.732 31.3335 182.705 31.3335 cv
182.256 31.3335 li
182.216 31.3335 182.201 31.3052 182.216 31.2651 cv
183.452 27.2749 li
183.452 27.2583 183.462 27.2466 183.491 27.2466 cv
184.136 27.2466 li
184.153 27.2466 184.17 27.2583 184.175 27.2808 cv
185.398 31.2603 li
185.416 31.312 185.398 31.3335 185.353 31.3335 cv
184.86 31.3335 li
184.833 31.3335 184.809 31.3169 184.804 31.2886 cv
184.539 30.3657 li
183.033 30.3657 li
cp
f
187.872 30.813 mo
187.872 30.8413 187.882 30.8579 187.912 30.8579 cv
189.48 30.8579 li
189.519 30.8579 189.537 30.8813 189.537 30.9214 cv
189.537 31.2769 li
189.537 31.3169 189.519 31.3345 189.48 31.3345 cv
187.363 31.3345 li
187.323 31.3345 187.305 31.3169 187.305 31.2769 cv
187.305 27.3032 li
187.305 27.2642 187.323 27.2466 187.363 27.2466 cv
187.821 27.2466 li
187.855 27.2466 187.872 27.2642 187.872 27.3032 cv
187.872 30.813 li
cp
f
101.156 36.9185 mo
102.481 36.9185 li
102.52 36.9185 102.543 36.9351 102.543 36.9751 cv
102.543 37.3374 li
102.543 37.3765 102.52 37.394 102.481 37.394 cv
101.156 37.394 li
101.156 38.6782 li
101.156 38.7065 101.167 38.7241 101.196 38.7241 cv
102.843 38.7241 li
102.883 38.7241 102.905 38.7407 102.905 38.7798 cv
102.905 39.1431 li
102.905 39.1821 102.883 39.1987 102.843 39.1987 cv
100.647 39.1987 li
100.607 39.1987 100.59 39.1821 100.59 39.1431 cv
100.59 35.1685 li
100.59 35.1294 100.607 35.1118 100.647 35.1118 cv
102.843 35.1118 li
102.883 35.1118 102.905 35.1294 102.905 35.1685 cv
102.905 35.5249 li
102.905 35.5649 102.883 35.5874 102.843 35.5874 cv
101.196 35.5874 li
101.167 35.5874 101.156 35.605 101.156 35.6333 cv
101.156 36.9185 li
cp
f
107.126 38.2593 mo
107.126 35.1685 li
107.126 35.1294 107.144 35.1128 107.178 35.1128 cv
107.625 35.1128 li
107.665 35.1128 107.682 35.1294 107.682 35.1685 cv
107.682 39.1421 li
107.682 39.1821 107.665 39.1997 107.625 39.1997 cv
107.144 39.1997 li
107.092 39.1997 107.082 39.1929 107.064 39.1548 cv
105.445 36.0513 li
105.445 39.1421 li
105.445 39.1821 105.429 39.1997 105.389 39.1997 cv
104.947 39.1997 li
104.908 39.1997 104.891 39.1821 104.891 39.1421 cv
104.891 35.1685 li
104.891 35.1294 104.908 35.1128 104.947 35.1128 cv
105.422 35.1128 li
105.474 35.1128 105.484 35.1177 105.501 35.1577 cv
107.126 38.2593 li
cp
f
111.983 37.563 mo
111.303 37.563 li
111.264 37.563 111.248 37.5464 111.248 37.5063 cv
111.248 37.1558 li
111.248 37.1157 111.264 37.0991 111.303 37.0991 cv
112.454 37.0991 li
112.492 37.0991 112.509 37.1157 112.509 37.1558 cv
112.509 38.9224 li
112.509 38.9614 112.499 38.9839 112.476 38.9956 cv
112.158 39.1597 111.831 39.2388 111.4 39.2388 cv
110.246 39.2388 109.725 38.3784 109.725 37.1499 cv
109.725 35.9272 110.246 35.0718 111.4 35.0718 cv
111.779 35.0718 112.068 35.1235 112.385 35.2993 cv
112.414 35.3208 112.414 35.355 112.396 35.395 cv
112.232 35.7065 li
112.209 35.7456 112.181 35.7515 112.147 35.729 cv
111.903 35.6099 111.751 35.5591 111.435 35.5591 cv
110.8 35.5591 110.324 36.0688 110.324 37.1499 cv
110.324 38.2476 110.789 38.769 111.417 38.769 cv
111.694 38.769 111.831 38.7183 111.983 38.6558 cv
111.983 37.563 li
cp
f
115.067 35.1118 mo
115.102 35.1118 115.118 35.1284 115.118 35.1685 cv
115.118 39.1431 li
115.118 39.1821 115.102 39.1987 115.067 39.1987 cv
114.608 39.1987 li
114.568 39.1987 114.552 39.1821 114.552 39.1431 cv
114.552 35.1685 li
114.552 35.1284 114.568 35.1118 114.608 35.1118 cv
115.067 35.1118 li
cp
f
119.565 38.2593 mo
119.565 35.1685 li
119.565 35.1294 119.582 35.1128 119.616 35.1128 cv
120.062 35.1128 li
120.102 35.1128 120.12 35.1294 120.12 35.1685 cv
120.12 39.1421 li
120.12 39.1821 120.102 39.1997 120.062 39.1997 cv
119.582 39.1997 li
119.531 39.1997 119.519 39.1929 119.502 39.1548 cv
117.883 36.0513 li
117.883 39.1421 li
117.883 39.1821 117.867 39.1997 117.827 39.1997 cv
117.384 39.1997 li
117.345 39.1997 117.329 39.1821 117.329 39.1421 cv
117.329 35.1685 li
117.329 35.1294 117.345 35.1128 117.384 35.1128 cv
117.861 35.1128 li
117.912 35.1128 117.922 35.1177 117.94 35.1577 cv
119.565 38.2593 li
cp
f
122.898 36.9185 mo
124.223 36.9185 li
124.262 36.9185 124.286 36.9351 124.286 36.9751 cv
124.286 37.3374 li
124.286 37.3765 124.262 37.394 124.223 37.394 cv
122.898 37.394 li
122.898 38.6782 li
122.898 38.7065 122.91 38.7241 122.938 38.7241 cv
124.585 38.7241 li
124.625 38.7241 124.647 38.7407 124.647 38.7798 cv
124.647 39.1431 li
124.647 39.1821 124.625 39.1987 124.585 39.1987 cv
122.388 39.1987 li
122.349 39.1987 122.333 39.1821 122.333 39.1431 cv
122.333 35.1685 li
122.333 35.1294 122.349 35.1118 122.388 35.1118 cv
124.585 35.1118 li
124.625 35.1118 124.647 35.1294 124.647 35.1685 cv
124.647 35.5249 li
124.647 35.5649 124.625 35.5874 124.585 35.5874 cv
122.938 35.5874 li
122.91 35.5874 122.898 35.605 122.898 35.6333 cv
122.898 36.9185 li
cp
f
127.199 36.9185 mo
128.524 36.9185 li
128.563 36.9185 128.586 36.9351 128.586 36.9751 cv
128.586 37.3374 li
128.586 37.3765 128.563 37.394 128.524 37.394 cv
127.199 37.394 li
127.199 38.6782 li
127.199 38.7065 127.21 38.7241 127.239 38.7241 cv
128.886 38.7241 li
128.926 38.7241 128.948 38.7407 128.948 38.7798 cv
128.948 39.1431 li
128.948 39.1821 128.926 39.1987 128.886 39.1987 cv
126.689 39.1987 li
126.65 39.1987 126.633 39.1821 126.633 39.1431 cv
126.633 35.1685 li
126.633 35.1294 126.65 35.1118 126.689 35.1118 cv
128.886 35.1118 li
128.926 35.1118 128.948 35.1294 128.948 35.1685 cv
128.948 35.5249 li
128.948 35.5649 128.926 35.5874 128.886 35.5874 cv
127.239 35.5874 li
127.21 35.5874 127.199 35.605 127.199 35.6333 cv
127.199 36.9185 li
cp
f
131.5 37.0366 mo
132.009 37.0366 li
132.553 37.0366 132.836 36.8325 132.836 36.3062 cv
132.836 35.7856 132.564 35.5874 132.021 35.5874 cv
131.545 35.5874 li
131.517 35.5874 131.5 35.605 131.5 35.6323 cv
131.5 37.0366 li
cp
131.5 37.478 mo
131.5 39.1431 li
131.5 39.1831 131.483 39.1997 131.449 39.1997 cv
130.99 39.1997 li
130.951 39.1997 130.934 39.1831 130.934 39.1431 cv
130.934 35.1685 li
130.934 35.1284 130.951 35.1118 130.99 35.1118 cv
132.072 35.1118 li
132.96 35.1118 133.436 35.4858 133.436 36.2944 cv
133.436 36.9575 133.091 37.3091 132.542 37.4272 cv
133.526 39.1089 li
133.555 39.1597 133.532 39.1997 133.487 39.1997 cv
132.955 39.1997 li
132.927 39.1997 132.91 39.188 132.904 39.1704 cv
131.958 37.478 li
131.5 37.478 li
cp
f
136.068 35.1118 mo
136.102 35.1118 136.119 35.1284 136.119 35.1685 cv
136.119 39.1431 li
136.119 39.1821 136.102 39.1987 136.068 39.1987 cv
135.61 39.1987 li
135.569 39.1987 135.553 39.1821 135.553 39.1431 cv
135.553 35.1685 li
135.553 35.1284 135.569 35.1118 135.61 35.1118 cv
136.068 35.1118 li
cp
f
140.565 38.2593 mo
140.565 35.1685 li
140.565 35.1294 140.582 35.1128 140.616 35.1128 cv
141.063 35.1128 li
141.103 35.1128 141.12 35.1294 141.12 35.1685 cv
141.12 39.1421 li
141.12 39.1821 141.103 39.1997 141.063 39.1997 cv
140.582 39.1997 li
140.531 39.1997 140.52 39.1929 140.502 39.1548 cv
138.884 36.0513 li
138.884 39.1421 li
138.884 39.1821 138.867 39.1997 138.827 39.1997 cv
138.386 39.1997 li
138.346 39.1997 138.329 39.1821 138.329 39.1421 cv
138.329 35.1685 li
138.329 35.1294 138.346 35.1128 138.386 35.1128 cv
138.861 35.1128 li
138.912 35.1128 138.923 35.1177 138.94 35.1577 cv
140.565 38.2593 li
cp
f
145.416 37.563 mo
144.736 37.563 li
144.697 37.563 144.68 37.5464 144.68 37.5063 cv
144.68 37.1558 li
144.68 37.1157 144.697 37.0991 144.736 37.0991 cv
145.886 37.0991 li
145.925 37.0991 145.942 37.1157 145.942 37.1558 cv
145.942 38.9224 li
145.942 38.9614 145.931 38.9839 145.908 38.9956 cv
145.591 39.1597 145.263 39.2388 144.833 39.2388 cv
143.678 39.2388 143.157 38.3784 143.157 37.1499 cv
143.157 35.9272 143.678 35.0718 144.833 35.0718 cv
145.212 35.0718 145.501 35.1235 145.818 35.2993 cv
145.846 35.3208 145.846 35.355 145.829 35.395 cv
145.665 35.7065 li
145.642 35.7456 145.614 35.7515 145.58 35.729 cv
145.336 35.6099 145.184 35.5591 144.867 35.5591 cv
144.233 35.5591 143.757 36.0688 143.757 37.1499 cv
143.757 38.2476 144.221 38.769 144.85 38.769 cv
145.127 38.769 145.263 38.7183 145.416 38.6558 cv
145.416 37.563 li
cp
f
13.0371 22.978 mo
13.8823 22.978 14.5703 22.292 14.5703 21.4448 cv
14.5703 20.5952 13.8823 19.915 13.0371 19.915 cv
12.189 19.915 11.5039 20.5952 11.5039 21.4448 cv
11.5039 22.292 12.189 22.978 13.0371 22.978 cv
.2 0 0 .7 cmyk
f
13.0371 31.3999 mo
13.8823 31.3999 14.5703 30.7153 14.5703 29.8687 cv
14.5703 29.0229 13.8823 28.3335 13.0371 28.3335 cv
12.189 28.3335 11.5039 29.0229 11.5039 29.8687 cv
11.5039 30.7153 12.189 31.3999 13.0371 31.3999 cv
f
21.46 22.978 mo
22.3081 22.978 22.9922 22.292 22.9922 21.4448 cv
22.9922 20.5952 22.3081 19.915 21.46 19.915 cv
20.6128 19.915 19.9268 20.5952 19.9268 21.4448 cv
19.9268 22.292 20.6128 22.978 21.46 22.978 cv
f
21.46 31.3999 mo
22.3081 31.3999 22.9922 30.7153 22.9922 29.8687 cv
22.9922 29.0229 22.3081 28.3335 21.46 28.3335 cv
20.6128 28.3335 19.9268 29.0229 19.9268 29.8687 cv
19.9268 30.7153 20.6128 31.3999 21.46 31.3999 cv
f
29.8809 22.978 mo
30.731 22.978 31.416 22.292 31.416 21.4448 cv
31.416 20.5952 30.731 19.915 29.8809 19.915 cv
29.0337 19.915 28.3511 20.5952 28.3511 21.4448 cv
28.3511 22.292 29.0337 22.978 29.8809 22.978 cv
f
13.0371 14.5532 mo
13.8823 14.5532 14.5703 13.8672 14.5703 13.021 cv
14.5703 12.1733 13.8823 11.4893 13.0371 11.4893 cv
12.189 11.4893 11.5039 12.1733 11.5039 13.021 cv
11.5039 13.8672 12.189 14.5532 13.0371 14.5532 cv
f
21.46 14.5532 mo
22.3081 14.5532 22.9922 13.8672 22.9922 13.021 cv
22.9922 12.1733 22.3081 11.4893 21.46 11.4893 cv
20.6128 11.4893 19.9268 12.1733 19.9268 13.021 cv
19.9268 13.8672 20.6128 14.5532 21.46 14.5532 cv
f
29.8809 14.5532 mo
30.731 14.5532 31.416 13.8672 31.416 13.021 cv
31.416 12.1733 30.731 11.4893 29.8809 11.4893 cv
29.0337 11.4893 28.3511 12.1733 28.3511 13.021 cv
28.3511 13.8672 29.0337 14.5532 29.8809 14.5532 cv
f
29.8809 31.3999 mo
30.731 31.3999 31.416 30.7153 31.416 29.8687 cv
31.416 29.0229 30.731 28.3335 29.8809 28.3335 cv
29.0337 28.3335 28.3511 29.0229 28.3511 29.8687 cv
28.3511 30.7153 29.0337 31.3999 29.8809 31.3999 cv
f
38.3057 22.978 mo
39.1519 22.978 39.8389 22.292 39.8389 21.4448 cv
39.8389 20.5952 39.1519 19.915 38.3057 19.915 cv
37.4575 19.915 36.7749 20.5952 36.7749 21.4448 cv
36.7749 22.292 37.4575 22.978 38.3057 22.978 cv
f
38.3057 31.3999 mo
39.1519 31.3999 39.8389 30.7153 39.8389 29.8687 cv
39.8389 29.0229 39.1519 28.3335 38.3057 28.3335 cv
37.4575 28.3335 36.7749 29.0229 36.7749 29.8687 cv
36.7749 30.7153 37.4575 31.3999 38.3057 31.3999 cv
f
38.3057 14.5532 mo
39.1519 14.5532 39.8389 13.8672 39.8389 13.019 cv
39.8389 12.1763 39.1519 11.4883 38.3057 11.4883 cv
37.4575 11.4883 36.7749 12.1763 36.7749 13.019 cv
36.7749 13.8672 37.4575 14.5532 38.3057 14.5532 cv
f
47.207 30.9624 mo
47.8882 31.314 48.522 31.4048 49.4619 31.4048 cv
51.083 31.4048 52.001 30.4985 52.001 29.1831 cv
52.001 27.9712 51.4351 27.3931 49.894 26.6333 cv
48.646 26.021 48.4771 25.7153 48.4771 25.1382 cv
48.4771 24.5483 48.873 24.0386 49.7798 24.0386 cv
50.4258 24.0386 50.8682 24.1406 51.3999 24.3555 cv
51.479 24.3906 51.5249 24.3662 51.5601 24.2876 cv
51.876 23.5962 li
51.9111 23.5283 51.8882 23.4834 51.8188 23.4482 cv
51.1401 23.1533 50.561 23.0645 49.644 23.0645 cv
48.0908 23.0645 47.2529 24.0386 47.2529 25.1836 cv
47.2529 26.2368 47.751 26.9058 49.2349 27.6304 cv
50.5049 28.2651 50.7769 28.605 50.7769 29.2749 cv
50.7769 29.9878 50.2559 30.4194 49.3838 30.4194 cv
48.5439 30.4194 48.1138 30.2261 47.6382 30.022 cv
47.5688 29.9878 47.5132 30.0112 47.479 30.0796 cv
47.1499 30.8384 li
47.1279 30.8833 47.1499 30.9292 47.207 30.9624 cv
56.5229 31.9038 mo
56.5229 32.4585 56.2388 32.7876 55.6621 32.7876 cv
55.2651 32.7876 li
55.186 32.7876 55.1411 32.8218 55.1411 32.8901 cv
55.1411 33.5464 li
55.1411 33.6265 55.186 33.6597 55.2651 33.6597 cv
55.9341 33.6597 li
57.0112 33.6597 57.6108 33.0601 57.6108 31.9839 cv
57.6108 26.2261 li
57.6108 26.146 57.5771 26.1128 57.498 26.1128 cv
55.6279 26.1128 li
55.5488 26.1128 55.5151 26.146 55.5151 26.2261 cv
55.5151 26.8823 li
55.5151 26.9507 55.5488 26.9849 55.6279 26.9849 cv
56.5229 26.9849 li
56.5229 31.9038 li
cp
56.9419 23.6523 mo
56.501 23.6523 56.2632 23.9136 56.2632 24.3335 cv
56.2632 24.7866 56.4888 25.0132 56.9419 25.0132 cv
57.3848 25.0132 57.6108 24.7866 57.6108 24.3335 cv
57.6108 23.9136 57.3848 23.6523 56.9419 23.6523 cv
63.165 24.1855 mo
63.165 24.1284 63.1978 24.0952 63.2549 24.0952 cv
66.4292 24.0952 li
66.5078 24.0952 66.5542 24.0493 66.5542 23.9702 cv
66.5542 23.2563 li
66.5542 23.1772 66.5078 23.1436 66.4292 23.1436 cv
62.145 23.1436 li
62.0649 23.1436 62.0308 23.1772 62.0308 23.2563 cv
62.0308 31.2124 li
62.0308 31.2915 62.0649 31.3257 62.145 31.3257 cv
63.062 31.3257 li
63.1299 31.3257 63.165 31.2915 63.165 31.2124 cv
63.165 27.7104 li
65.7031 27.7104 li
65.7822 27.7104 65.8281 27.6763 65.8281 27.5972 cv
65.8281 26.8716 li
65.8281 26.7925 65.7822 26.7583 65.7031 26.7583 cv
63.165 26.7583 li
63.165 24.1855 li
cp
0 0 0 1 cmyk
f
47.2188 19.396 mo
47.9897 19.792 48.7256 19.8721 49.667 19.8721 cv
51.4116 19.8721 52.5337 19 52.5337 17.4131 cv
52.5337 16.2559 51.9897 15.5532 50.5728 14.9531 cv
49.3608 14.4648 49.1909 14.25 49.1909 13.7959 cv
49.1909 13.333 49.5078 13.0142 50.2339 13.0142 cv
50.7656 13.0142 51.2197 13.105 51.6606 13.2871 cv
51.7627 13.333 51.8306 13.2871 51.8647 13.208 cv
52.3979 12.165 li
52.4316 12.085 52.4316 12.0059 52.3296 11.9722 cv
51.5029 11.6099 51.0269 11.5298 49.9268 11.5298 cv
48.2388 11.5298 47.2407 12.5161 47.2407 13.8418 cv
47.2407 15.0552 47.854 15.8032 49.271 16.4028 cv
50.3687 16.8911 50.5957 17.1279 50.5957 17.5933 cv
50.5957 18.0918 50.189 18.3872 49.5078 18.3872 cv
48.7256 18.3872 48.3286 18.228 47.854 18.0132 cv
47.7627 17.979 47.6948 18.0132 47.6606 18.0918 cv
47.1509 19.2588 li
47.1279 19.3052 47.1509 19.3501 47.2188 19.396 cv
59.7646 19.792 mo
59.8657 19.792 59.9116 19.748 59.9116 19.645 cv
59.9116 13.1509 li
59.9116 13.0942 59.9346 13.0601 59.9907 13.0601 cv
61.918 13.0601 li
62.0088 13.0601 62.0537 13.0142 62.0537 12.9131 cv
62.0537 11.7559 li
62.0537 11.6548 62.0088 11.6099 61.918 11.6099 cv
56.1377 11.6099 li
56.0356 11.6099 55.9897 11.6548 55.9897 11.7559 cv
55.9897 12.9131 li
55.9897 13.0142 56.0356 13.0601 56.1377 13.0601 cv
58.0308 13.0601 li
58.0869 13.0601 58.1206 13.0942 58.1206 13.1509 cv
58.1206 19.645 li
58.1206 19.748 58.167 19.792 58.2456 19.792 cv
59.7646 19.792 li
cp
72.0947 11.7559 mo
72.0947 11.6548 72.0498 11.6099 71.9707 11.6099 cv
70.4409 11.6099 li
70.3496 11.6099 70.3047 11.6548 70.3047 11.7559 cv
70.3047 17.2202 li
70.3047 18.0249 69.8628 18.4209 68.9678 18.4209 cv
68.083 18.4209 67.6416 18.0249 67.6416 17.2202 cv
67.6416 11.7559 li
67.6416 11.6548 67.5957 11.6099 67.5166 11.6099 cv
65.9976 11.6099 li
65.896 11.6099 65.8506 11.6548 65.8506 11.7559 cv
65.8506 17.2651 li
65.8506 18.8628 66.7456 19.8721 68.9678 19.8721 cv
71.1997 19.8721 72.0947 18.8628 72.0947 17.2651 cv
72.0947 11.7559 li
cp
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Juraj Blako) ()%%Title: (STU-SjF-anfh.eps)%%CreationDate: 9.10.2012 17:23%%Canvassize: 16383%AI9_DataStream%Gb!R&ksFs`Z2f2XJ9Lu.R3;Zc8Wb/!";DPH*0DBgJq*mQg>D^GT)JAER3[Goh6kROn&5O&:/uFZF]ER,=1?qTT<DnFnSFG^s!QnR%_#GgOG/d(.gKblXo1O_V<1"qo8S<tf1J&bs.^JZ^qM1]F)T$m;0:.CgF=o+CcGH41baG*s"qubRG9-!ij!i=!KqI5E8J5G5(6VWU%^E-1+\*KYM0;P*p'8OPK(Vsc<HQsTIJ_tJ;okZ<f&,?D0aq(\*^uH_g&FZ@^9n'JOU]T&-r5-]W<D=&J5>7at&E1.Jg\g3FY_irj%%6-rLJ)6N=IPbB6K\gH+T=t%gC4uEBV^G0(L+J/?8hL$T1$u)f`$pj[_F,qE3N6,JNlL&t"l_Uo-)c9K8hf471n"F%@aQkIMpfma%;LF0FU>\Ks7cAP*DY&@;q7fkRS).O8>KrLAQtq]O!:r9"XIA2L!=U6K;1cTUprWJ\ap[UiG_K:c]2%?eDrsE9RW;<sqqSP;&fV8[%.%e"9X!`l$'bHQ(F:HogE[E%?TL3M.5J3X3W%[pKC]8i4%P^A=9S182B\9Q!1Z9Th"R/SmJ5HW+#.1"uOtpWIqS_;80F1:f!SHXS%!"#S3j3`+;$8KX^&WSRGA11&I9UMM_=ADK*Gc6EiS-#)*#AR6uU&$DkrJ/K"S62ogRFiK%[tPb)%RGbdRM\?V$]+AT2[4(DWItr_%565H@"/20g]i>T!G`7J?bPZj[q*-AX]`e,*C&#e(n2$JcT7qkr9%39:RYFUP)Et!3r067"g\<@TJ[H=!raH^HMd^!FL>b)uAhj\Y%,a5H-')]STP=\k,R=r!+2u!\p'ah0GT`Et$']>0A!S63hplseU#/8?%n2\PJG;."'?;(mLLnDOCV<9]&E5PIR$ap@j_HO0<;G6O9%fHU(slbF:P:Y9QA'DPkc-MRms_%sj_#RU)/6\[1ET<R/@?W[Zi"E@mg@f3GGC`!#&FZ9ks8c8`?a#q@H`*@ndpeBOa9Kf6ndtY+p%b,%:bC>_<Y$apRp6:eTkENAUcggfh\=:;Q5l=%mOr%;e-r.MgmlYumA:J<c"JY0.^C`iSn]niKfo+g;@(aU&MPY:QlobjV;EuiiK%I$=>W>E5\<P[h9Y?4:!%03gm@K6:Sf,ft_AK5]dNj/9,0n.XBindX?/H%Oq-T<JfAS\m$N[PW.]k:d)kh3&1>Z6DjZU`<#7Q3Cu-%8:?BkNiBp$a*9>r+QZL^88Z8O_cd[r$m!*DTAr.03?FSjRW4s0hI$U/qSVm)N->,Z__$jKARnA[;IgkB[j:^*r5#iW)3RJ#d`W8i%Q%"5t8XtHP/)65"Q0=M&@^u2-OsJBrr"j-;;Z*:<r'^>ss$:u9s-/$'T>M\-i=b6Zr"kFSho`_/09O&b'+"th6N#$gn.Xnjr0Pai%ho`_/cf&J=>b_.Ss,'8C>PT*8&b7$pkHOF5-gk(6>Pa'R"mr(ZKkQET3QP"@-V8;_/eM`9brD1[gk@'&2hr>7AVhi5:;q4t(_p[n%Pk[]LrWY7,0DHKPi9,(q(qBdPPtT%Dp`7m764=D@I"MBN^E?c`LAsUN9EN,Mn&8sB$@]6*/)cTR_:2A&>W7t-6((&]Es_aa[53B-%_3W#B<1>1k&/P0RiPd4$!TL!9n6NRG#>=#7.Sbi&J\U,AN!'*7s2&qH4LbW:!#q_aK(rK;KK(5<+XJ>OLdh@PE"\08a<SnJ9Gd]*%E)#Dhe1R/)nKR6Q:9'0N_t>=GnhZT/E4\+"$(&FjL,fsC+['h`'oJ6c/PuqeM'N/q4mmOh2XYQ5>sqBOI>f+DMJM-GjVO4^9GJ/)%?qBjAlRArthdT/\Opq+DTTkaRTd\(c,tTed8c(/4?qGrgKCOh07HnM;$htCY#-83IK4dd2DkLD<8dhL%EWgd-e0ZI:L&X^W-HR1c%-`dKI"cYlE2%FV!Q#B3:+O-iQU`P"%hbN)a,KU=j)NPK0:&)1sMIC"d@l_hS;U=CWOCj$$_8#K/:tfoY+B1>?-q8MQkuIL?&I$sL%.8krbN_B<UgAl5g50.MT;0hi%`c?i`Z_U]UjKP_:\s.eHr@JU]PotNaN_=[(p))p68LZ5X\r9RpN`7WjIq]$Pars4;BbJ0,oe[`1%M.cr]EK$2?+2W[g9bC#JJl%]c.#t:$,-.GkE:PAL7^6"4&hAqgjdSC'j;'-g<Ve:]#Mc(P5@WFmBi)b4U5#jCAV@(.c!ad%DFn=J%[5Fu83fk-p[ks,1;6SPIauEI`IU%VIX%VN'=ZRmhO^q_]#t9InU):ANTCKNc/WPN+L*ZN9(kBAoX=:hY,p^/SN=5Ze7(E_'U^>]<%W2-79\n,#!Yf_%to@dK?%H/iLIk/`mi&lH;bmt`pR"LIh1\j+Y!bRne"ePOahqd$IW!t*P@/B,t78FQP`cMY2Q%\sZEBX2h41r,_%][&ZD!XoTuSFuk?5?R`O?Elckem+8;I(2+ApacGs)6gn<nO)e$qC2BTrG@l#S-qR(laX;]qhq)l(FlY08T-M/55'ZKG0l4_Dq5Sl%W*G'^)ug)5oDjpdfLhP@TY8mB1I'u6_kdbTs4"p'A_Z0$#;CTL3:k"5q;lG;k>N8"p5obh/4QJ?rdP05#'s]YT4%q@@M13T1$+)=%IiT;$gDg<?ptlLnd$meN,GDUA)@qc<(d+->iFfb.et8T6HobU5..X/`C%R)/GVJ6KJ!MVa`sNaG`ohS)"G2GoN^E.2B)r+ZcK82H%_'>>J0+QNKaoGpWTGZ4Z0,1_CM+RUJ`^*[UVYnjSWQsXUcd328b2IaL8u]:kY24QOaDLC$G6T(Mk4iQiRNbcUS95&["sGAPgV#r]%86-a/5a652rdZ(*nDtT'rU#P)Dk&J!KQ@Dk4804%[d4DC&Zgr>%VGp;"ofbJ6&QHJ[^NHgS+8i4&J:#:_^oI18Qn/56J7?L_`.^X%)_l?2@cF%u,;0]UiSB4B21SlTif3Z+$N"oq8`3*@"sKB67k=jpFG2'W79ZNa3k!/dM"DYY4T%&X5gK%U5PTHcVKP$CnqI\(:@E[]%VDI^$">l;rm]T\S0H<A\2(&[Cs)1.B!PYSbi+kFq$N(=aTq%6\^_uqsr)ioKK,$TCT$N_Y^O!aP%E;9Z5R/?cVWqO%kut(pbEjRK%AmcV<C*Frsc*./BgmQE"]FDkSkCX(*[)3c\B(4\p=+?/E#>#kO"2Y)ofNZj]mHmj(5#V+sa9g:X'=QUZme*Kj*PpXeX8eLjHKm0<%6QK5+QR*P.Dm3QNk!/mK-Muue0X^75(C/YV0Z<=8j$,^[!%n4>V#:7$PV,3#r\(_"s7.jG:</"elag3RJ`D^Eo=_,K;nr+tkf_90%P&('/3`t6FZ_^rWO,'bh43\Bgrk#9V[Pd6/SYl>\YA_F1CoNSI],<k^jQCTBB(Y7:huhL(cP>;8A>`Fsn,+!SH_fkoo<g:1d9aP:%h;ACAoP]r__lnARi;Xch8+Jo+:5<;o_2`W:.\i?PBUB&=W])<9CMl;+8jSC@?<Dg<"J1K(]\N"onbU;*CtOAkYP)cp!2q.c\SI@M%b&J!"nDG#T^@?f]+n/-Rj](AR9IrZR6n[Q'PKoc(lHagocoHXR$([lu0=Ni/7B(rc<QZa]'3[^@S;8#]g!7\J9R>mfQ#hU'rO23V%"CC@F'<ku^NS]NtPk&KC.uIG&eoVJk%DVg]hY3<d?5W\Q$E0rVLu4j3bo??KC&r"UIYUg`^(Pauje<!5C[_Rj4WZYNj8ZC-],fP*%ilG0ga^%5JG_a4&pks@)q#@Fc`Sl'll]7t(eK:4,,03J]WqBu!F`52[)tSd5M0dEB1D1oK]qJaZIX91oNi(oI^=(Qs9ufn,[if^G%MfDk[O]V[R.ELO"GO<VV=*(pmp^O2o3Z#I5(^8+Qc[+;DHBC$qTp?d>)f\X2HTBI,^\A6Oi0>M2KTci)/O<,uqBBf7VWHXS$&3U9%55:RK7F;6IK4K'8K1IFY-YSoOWG;jSfjDF(;f8nPZO,fm4Sfjl\'P*6K`qm`0!/It9ZIOV#WUZ<&!3V"i7N'k/?7S-_g=G9n]hj\%/:07@.q(W($n=iIA5?K85b/hiM]]$N@/##shJ==8<Zl42\M3*"S'pMZgs/uia.ul[AoiYBcLD=NFhU6o)\so)V/%M-&3C9uWobk4%>C\7VLb-5@ZW*^)E9380)iin0K8Z^2L$9:J>T*P9'eK<G#L'-ZRSat,LMPLL&&>S(L]Ak+4bE&P+J$J@dk2/MAIBi$e?+XLdT"DH%]%OT^7D#sd`RVG=G)I2/EZ.f&_T610KQ6?MX&nq9L3QE]e7Hah7%M&`C>P/1;J*>dP<LYCIfa3kSc(cJ<WG`af^oaImjh-?@>&*_%UVsg.RLg_;TM!9tMSr]Ip-%k[C"ibM'uE2nD(EJV@<aD`_Nr,uFoG;'+QHYK6#Xn=YdW-[bCXb6Be^Y+0p`SZB/!OnYnY\j!R!'?%4bcipqO*#'E5c]f*T02^4?2@^"(7>:8cG6^_S`@M9+:,;f6sVuZk90HGfp'*:G#&`1>EthTkQg\1-FSe4iL<g<#Wtn/$ult;.iKf%_pFT<2XYfdDu%p&ncH#Y1;d;BWm1=8?BqL*rFZ_nfJk)sJ3)%@RhH8]bSPp-Q3p9CVP=L9oe,hHh<WVo=;VBq*UDCoQ9mjEHaB.$%/1O\6UXh=T4SVc&%W>bcjpsg,="iCmW4;HLHekbb8W&AE6WApeM!1ncRPFk\+j<0kdL`14;$&+t+3X7?p$Mu6f^n?l8!Z\U;)dDd%=&[5F+ErPVCbZ[=-Iu8pb0E),+lqR'At,a<co,juII\=f_T__5@G2i#(8!+(2-5t7MT+W,2$Lsb,m`On/D%j\UTHFrrqX+c=50a'%l)JUi'\^ML^Dr;H^!2D4^*;jr^)/f7JqtnV7+eeODqQ59IX2d@#?Jfd"J&n2B#oNE#4BV@c35djKf*G&]ao0_`V.?sbi;rYIU6q#%!MJF":o7T@iIA459RSKL4]'$OnL"<re)"QGh]^RWn.h&@j_&O@bMENAL)LLEV*F@["$19V?HEfkVMmZ:=;;6Zk`or^6=\F[@#0bS%T,)SU<>/?$S[LO%E,+7u#tkZg.NT$9:FZf^UU$sHCt'1V0(67&C.5t+<_&S#>,lF=QDq;i=%0NVg1mVsSM<hXf1V^+&+]4f`Akl/%i^3F1c`Dj_o$;cX%Tutn"n95#Q.E3<!_5;D7*qt[1dNsu3O5EmTHAo2QP/pEo@HANLSh@]g`k"!2`*ePHP5MtbG@42jIY;Vcf"!4%`'On_($DVN?6*6;;*u0Ha[t$RE.Vm?=hlh0)kdFT.ko/'0a"A)k)0t7#&'b_Q$M7ia,a2^Kh-YDc-LIU_Y&$q`pusD_2$F=qY<eB%ipkH\mWF*rqRdllB8+d[=)'R5<B+(,lR@d>iT1s+/f0r)<46)TgdJ>D[9([K<`fml\Y".aRCd@>^&f27FBKGfhCOSuO7-I2i#f&R%lPBS6+_WBkZC/Nt4T/OFE^[o/J?YG,nY&n$<=6S%#9o#,<gum=YEqluo?7W8Md8+-OH2S\Jm*D7NfBVn3o'Q"WTUG:lc&^:3:%N"%&76A?JJQ1,cFpafB)>H>\I%WH_m/*[h88rVM&7CigF>-t`eEs98##hV;pD^"lTd@6EsZ_>)EfC&ji9C9?Y*mGl-'fM\a00-r8I)*%"qZ")EF#4&$al5rkVc2gcd*etCCEBW!)'Au\d$YjPqhfse7BpjNSamF.ern[V/l;XJ-OnT@G"nV,cU(XF`',,queXQXl&KaQ"L`N%^4hkec@<P:'[Bl&i[.3%"u<#FJfJ%-EqJZW?Z<Ns&c4a<GZWo<;W5fr/#?kO@e)9dq2>!2>kKiO`I8<qdqkId]?-`?`.M8_&s6Lh%l^coI#I-@/i@EVV1FLtZOK3Q%=b`p4n<ECCa3f/f^2g_4?g.1k2l"ikgp!DuZ(HI6GVe\6nMFbOAT1XQSFgmUMbs>)X`t0T6qtD0%HMIVj0R<mHE:KFr]c-AG4a\.Omfn4acm:/_\,fH&F7upXU=0"i=$.Sl<4K"PI'o`KS&_SF`P_0k&K;*O0pqS<"8R65*L>4UY^?UI%+SbaZ+oi.0rlK9s=35Ctpm]0lRCRql#Zs-,\b:(1Pfsf+Qo@`=9#MRaaY<[=2VhQ-^eS-=6Sq-uE!J!VJd[mQU;,Z,%RBZYJru=D%"0MPFMM!9"`g0Yr($t0&j;jGrDtR^E?pCf"I(nGS:3-*XfHXiOi:0e]b@d@s^TtOU$&f\'n6)/u7IlYf245^YORmN;rcQ@bA:+J9%OI0&8ni:&p:>_l(7uT&1Z`.LqPFqW;OJkWV,K[FD)`H-V39OOtB>NQ8b?G]/YQB@JW$gjKW0n,-aCL1k5cENmA.c=B&&3&?$X`F:%'(ei00RpRJ>7GmBMTTD24PS]M;[r5qRV+`J?@;_L?1u5J1sDNfD$<C+2#t4WN#T$S*JJlB\G,IUh`2N@SMODLMe\O*Bp=bN!8OGI%@8GI)[VYml)FiNfaU)=6WF4=nr[PtbL33S:9)0nlHJs72BprOAcVu%Yo]FcUF1@3EVT+<\0>"<K2lR-!o'1L@kOQ<<T6D+IBm*)^%T;flAW`:-7I0-'(qDgJhH%F,u`o362/q?+[50lDl4$Qtid?p0RV+R!1)](^OLs^"C:L(gPdm?mslq_VDIdKJG!((fIjF"#L&?00B%8DPOjA,d?1HqT>h\2O1U[*CfnV,o;h<bd54r<[$-*V2pG?@_&33)_8Aq'eCq^:\!1e'9GY#2O(?>8ht-;$kkU1u>=3ie^Ff!tadm%p[\'`Zspf-2XQG&SGgYH^Y"G%s+!9%UEG*FJW'Uk>acI]Xhc=5pQ)l9=6D,r\R]CG4P(!RB8,mNDTH,p03teS$^f%VLq>(TI,`V;%ItfJ_DR/^.ZpKH!cd9jnU'Me-GiEK)O(KL1Oa*XKF&2MegH#,cF]O0*X?`'Y[4M6AJT?32nGUiO;#c5"\LaM("4onOn7S>%Y=?=A%TGLH+e#ZDjnG+AZ>=)/:AU+\8G7iioYn27XFe9I==QKTaL-JfY<?>2O<M2lb+@[r=XA""2IOC,T5\_3n,e:HG9F,G[DD!1@ntlT6%dJsXXVI2\4oIQ.reg!UJAVa&4/(#;Mq"+pG8q>hl@4&,eahqARNRE#+':O`L16r<#Y0.Z)/@<Lho:pC1IKM>uJLkgMnO^oa9@PHQ%-NYW)/fE#t2&/-q1".bk,bo957#Y+BF,O-[gnoZ(X4QE5iNf#BKf\`FpIeh)a/.4!=M9`DlBnRjWA4Q/%2t'_P1'*JQ'S"nnhtfo%6]*?<U^Ang!(rl8hH-Kg<JR*c)%;e;9OgFj+';4a"2mV2eqh_`/J\]15[nhm!c_(lSM=#l5[2+Fa[:+W=Ig;g/lBWM7,^:m+FSD)%%5eF`^>.:!o+6ZMi0tLa8hr?Kh1(Hb^tYh@ZuZJFjWCKY/k_ASVKUDkpR7q0V$W\u";^>Lqfpg9'uo^uCiM0)4idP(O]gQhH-UcN%n.iZHX+oVHkU0*)H;*6/bRM'@,I=6;9H)Ns=,5O@H:=>ja$3`%>2MOHZh9ehgZEmMceZq"HFEW%oRVqj6`MJed^u>bi-%:8TAEqP%Fn85b1d@Q)Em3Re>DfOf]$>D7M5LUGqcs%V=Oo<1`QA1$^iK+qTVe)pi$YR>m#P9*?b?Ur?);HJ@W:5G7j"]ep+eE4is0B.#HVPa%%eh.<'"bI_i:S*E0A2k\TVc.S8:r@-I?L56It3Im5N:NuH#aNl%=]]H\.=g\ZK/i&2139V[S/.^?-j\j7jf$b8qF5e18tO.&IH]q%\poJ&Y+OeZ+UEL``hh*f>!Ao5,"V20lDip-`*UEk/7O,!H$JU)N4t0B;<"2s1^a_CIZ[2VRnkk/3H)MWiXk>CFga,Ho8;Q=PZ`./%-aQ[A5,>BKF5SD^`lg*SIR`m<0QAc@!0&oZRp];,oaI\h&JD.':;.k!.N@W:YJ>e&+FS_9GUG\/;q/q#hZ+Xs<Vm0iq0ndB8q5p"%ZNm/No5ROlrUl@9='t%3q<0k8OMUY=,n5sF0^+jipKTIZ%A=#/>KYrsq2!'qINEU[,c[FW0>_paX,#Q8"K*!\VQ3K?5k]\nZ=Kds%k?QPYc-l)#q!+1IQ#4-rU,RN54H$jWHIik'0=T4knY<.gjVi,!0b"M%B^_+?hm);05/00kTIgUlmt=gV81"k?]S9u#EUNeMJ'&L=%lTXMKA:J.BM>3`Eaknt]^a),BgoC5/m^DqA6r&+P><==!RMW-[Ba;`!>q";S[+iRVa!dUQMp^49rqe8DGS`>8I0H'L@*4\jM!j>g%Rt$m*R;tiiHu5f"b#Q[DHB8<)Xjd@*#RVE'"=PU@/m?%cV,k`].jWPL(SM@W%VVeqg$A*O%lFF@9%fNGd,8]BQ(+'!&(=]4=)V0`%^tc.=4X'B0'?=;?V#e.V5;B9Q2(I/+C.G*?2kVq@5@?B0EbV7eSol[5?];j4q&p"]#^dIKO+1V'_laglaifRG,d(KH(UEQZVT@B?%9C]^ie]ciFkFWs&Va4HBU2mq>Y90'Vm?R_t[0#I5f-gg)Qos?)b-)j/,5!9%^)r*8WS>Ns0qq:li[F,<q7`&N^C=P-_>2>:Q]+W:%$7O<MTF$!o#20.'rs.;Jp"KK?J5Y/&Z"AFp\unVS!(UXm/pp@`dHj;XW<3YRE!ONhUt?e%I1YUQ/sL.S]dJYKH3)NFKGX`\glFRY%;n&Oo\Cb_js(\)?#($WXo<Tdq4[$RC\rGL&F/S#GA)^#H$0^R58W)f*Q3"X-$jDVJSeAJEb_7u+KTbZVSY,l)LJn%:LGVFH>dp6l%WNjTGT?*`(TGG&=h@A5t:GSkV#4;#.JL#<Io>gdijs$gNjS=[\na@P4#[[0<oO#_ZjmIllg#"o[#0NAu/V[M=7c-&5*pA#K1R%[Z%<NE!^@$PNi2j1$rW_An"XuiV;F,cO/CN4<9*b28&Y%FuuroUN09'oiAoSNj#;i5Vck%PtDr[WWh%f=bIYc>ik$!N-d:o-^$1B2HZ%MgFu3d/2[2s/g6EGTc[4'$K2h>(cpi+*o]Yd]A#aib-FG!9pHkJNqtlK&3,Lebs7?&jDZS2#@$Jl*.4(<HmKU'7(c29e7DpW.,=u%/U$uB_I:5UG56b)gM<*]@43`/I"f[G<IIm-hLIFpc_(q+&6B@/ljXo:IpL,V"EGkLkPW%:"!#C\Rk6d7VeBolbpN`,T_G_S``1[W%[O+5aA]9$cETuD<*1fftM2st/;QX3_oBNF0>mrqXDmbg/G;8B2K"?:lKo`+AAq0?-4_fj7)<H?C'&Pqh%KjN*bp:tYH1?f"PcUa<%jcR:@`RB&("rQlIb+Sdm&KO[c5X5&^.MmgihE3&_Eus..Xf!f>$TGuWWH!,T@m?*G7g?s3]Gs92eCmf-ZZZ9B##+@U8cC)V:7CL)%`mno2o^k,WT`ZT;%X2[c?5Wf?,O77$.uf9Ul6\d2jB=/0SU*Q@-GP8hinXn(NPHERaZXC***$F9I]36/n3"&8FWm6'CJXJ8)"%(o%`/*r`o?%g$=?On4C5UT%!rqtC=Ub(n:Yc!V/\:cPm).LkV9s-3G[/F?lX`q6F0.l[qD1o\Q.`'h12EBb/ou0]>;=(7k;Y)`]6=R=%r$p,F`l>t6n%<.<XBYFQ>B]fN(Y&$?l5BI+'l#%A;(dMZQ'#bB'>Qg<Ype\I.5W,DY)rO6-ct/i,3P;rChh7%&+<P8`TuW9ZKnl=%G8Cd"i!)Vs\Su"5d_,omH]9_YIf2Bq-nSNr:u_?\/M^UrVDCCXSIC8\8RT3HNaUF^pDmWlgHd18NYZ\(AfXrhTW(70N)._9dD8Ei%JPsfIJpK^-QL$Q70;Dq9/,Shhc9nY3$&",M!i<B909V6Yhl_O`C<lI;1bm;MMXMMg>+^7cDmCr$X]T/fJBO*L)!J6VDJiKipUH+o%l.#mR<]iLg-GNl.;rBgD2h4?M?\8@j@BX$Qr`o@Y?-&laJ&`$X:_5GoI(f?1'o+"X+7h55^^p);EYmM=Brm?(C2mhX9e3*bkm=#7%+(^l9=U02UF!`^O[c@b_-(Sg7>YVL?RDj$G*N<?Zqjs0h'qgc$pJ9ZZ:;1`e4^L;UU@^>F+/(=-2K#Hf&BeI)*bpsk(R"dGq\e+R%Wb*#(AMUHDo>85Y<KLG#lHGUC9u%dP[SW?LNI3;Tq<uk[=:JK0,J_O?QBq;J-QA?62cXpms%Bs/5E*Hm3@n)r*c/!iH5X&]kN/\\%SVRU:7j%lO0[7?k^'l9AJMWO+i5>B:\O&LELJIhcC0\gd5\%QRe_N7,Y1_4elVf]ApB&7Tpb'A/X8G5T?R)dh^.f'hb"]Jm/fBp\%9%r6f!orS-%'Sh'3k(`3ma<RLANCoLjcZKun+HZ!qq7El'qet.>%YBJCcLkAJT%*ZLmC4'Cg^('P.CF:YXmWj\eWR<Zhrf/=)@!X%anq3D/:QV>\$Qm'!AfX@1)\9T"7MYZi1aNB.0.l/RG3Wpmf'Q(f#.\1cgb%[4bMVF,s-u=-PsVll^5flqMY3d"XQKop;hh4N@3*s%>,q('j!QBs2I]=f>'VX:S&>%jBlWhf;W<\8iGd.9;*BCR57NaW;WkSH@mBE_H/S?e*f4"`p:\6'52Ojt5Xf%,:ln*c.\Q%1iD&6H%1c[0]XEqEF.!u*YEM5nd=Ennnrb)V8=jIg'4>86LhPhU\kg5K0^@GsR53/0;pGL=*:G=JI\(3`kbdH0pQGU8p,l:jLmJ_B1q?h0M%F8=i.GU*Z+R3O>%(])G!HS/L'IiK>2"J;]>BYu"3o<HRo2<-cWp#,p%cOECNr#f(EQ@!;^M-VZTYk[X^3-aFid_3]s2]F2p]=DBk%4taQn^=q53hQ6VUA?9'dq8Rbg=uG`u'K5,YV<;fj`UYrOh`*g3^'j-?V:AVXODgE8iPg/HqWrjt_+MOQ#"ASU`PME34]*l]XX"pg%Uq(C4+_;([<Lb!>&(KJGk5jF3kS^mnq).=KY*7R"Z3"LOP]HBQAL,ke)q<QMn^FI0@)q`P&TI?-IPCGD\7%Tb=6Cu&Y8L4F^@Dfi%Vo8;Mr%nF$1p+g)0O"jR`mhq&=(fK<5<+<.nLLm2kN!V/em8!5GeVP3jXm&u^PCBJ4s04p/Nu:PEo)H?QQ4=+VshOdda-))!B%LX%l0EZkSk4(YIIpJ^*b.Kr+V9"ISK.%I/lt1"p+C@JV&Jif!kD7](WB_02\^W4P!]&?@]k<T"SS\)KN"$^:huUep*)Jd_0lWVd1f=2%'BE@CYF6'aDo68Y2F%I^0:/*!mctM_GL4?\[T&lt"Mq:I$)5:"K^%8DSL#cI5t436F-;SJ[JM6e.QsR,2^@cCeF)d8;.`&8NCh.L%lMO+oXensMDmT0SJ$Y`L`eu:<'/OoV)^CWd6Am*kPT4D)Gt==QC<;r0pW+>-gZ;k<7o.8i29p&))t82!?KfX'(0MHr55hHL%Mc(Q%S;\9_Bl@Ug-PTSpGeg@+&)/5Z6eg'FhaXW<oS0A_g5W#'oAM-oWbnZ0=uKbik^&II9d[:(=[qe3cl+IeQ*TVWVpdNW\NUg;.QqHN%TsqfDoj^R0]J$9gc3#hO@YWX]D'!\)d[I:Pfiu#unfKUi+.5rmc\<i:id/\l<o_N2Q-;e&U?eieBR;Skl.q_&a&6g9:<3G;I$#;j%I'?A5g@Cu,"KU.n=4#3(HI<7Dqs7t(gZU9]%"4<j7GC=:m%3VmN=.HU*'D9r\lGYf(fQ)pX/!<T:72%]c2IBAR'`qm:%a,m2\>-M%h?mU<[L]hE[bM;?2f$uY)Q)uZ.p3]d_[H\4c("NFcHcH]iIh0W<I).Sr%E1r^ZE([07]9g+R$EuC?thMP))sUc\C2dVBkg5W*[&>%pQQml.*?(6aD[M+fF"NRF6ugTC*7#,NAEt]ajkI!f`A(0<(i264`ck=gss*>B<MVJV!Qf.*Z="(.d,TaIMNI#rj,TR7q$6`KkS*t%D6A2k+n-E\YuEfubOS;6j*OtAltq.O4lh8T/?HR1VjR)@>`)Sk3rf3=B?k)W0*nsEF/kc3BK_m!,qN(0@\hJ4_G7me#SMN"Jc2"?%SI8gVS3V;if^1r&0t:)!4G*m-W"9-'!1EcM$o$;DRR7VghDn''TCeZ&hB-u-;fAo@7L\%*ja-D"ah*:Y_sqE;JAKlM5i8[EFn8B4%rHRR3cR/._p98D*%YXAh3mgR"g_'U8G!n^J;ei@L!dj5f2PpRK1jCV&!DqPDNU3a(<@tV'F5;V[@m4,Q_rbcjNWr9rXE*[P%25b2%hj20]WSOjROjm@Dhi].^V-(jg1s%qHWjdZOcV73&4Dm0$7.CpeN]VWbV*5=8qur`.Y:\4(2>T/5:.I1D$Bu[/^d_%tI26OF$@ZeU%J6O1ss-T(rJ^t1b>H:Gj\(0?Ynf-7hCVgW)[?PMcfLAsoLFVe=+8J+5He(YBTIp4CEqrI4agL!R).89#O&H/0=RZIj_?G3[-U$4O%E[j"@BWj@F)"=p<E:tbEF!/]l'#SP,5UQ1:%pV9i,=Eer'*qikX_@KhMI,)7B_fK8r!be[doWYOT)D?K-?+<<&#QaGjJPu8nt,Yt%q<7CG.hqO/45?u(Aocl$h**2l_65S<o^NfB"kKZM.sTNO>p83^+sN@L?A(N).erG+958_SLgqg[X85>@c6qfYo?@+pUCBY*)*rO?%Pe2=Zi>.*jANpu9gfC`2j>)oI?Ta(Rq/c2%.(h_WlneCci\#;="4Eg"cU9>Vfj16^o%sOs29)`.\3XQ7Q956hgSe(U$:9'l!_@pp%6mUL)btofm-FhS.off"<'>nl(@BM+gKf<Id!FR;+JP=1.NZ*rSKq3lAb=!eJpe?6jT;<u]qh`iII21UV?LNi8QK%A<eFe1@&F')F%D9_%jTiI10j(c\QN:b!K'pbY"0Ljb=?_\uJb-)q1\.uAD:[f]AJi*2_m<P:\`^lk#*J,O62hjk!\09mOT>g8I[mk3\\CMm?Js89<%2k%:I):B%iFSacnOJ;)M)/Ugeoj%7/*CC%GIeOZkBuAuYZ'S4hVF-"NaC;o_mF*F*a_t/?(8CJ=p1j@KH?iEp!2S$<L+'`BE2H09%e,%0Y6)mI27b\U5ceT*Y8@\aWo.[NpdUhj+2FCXP*1O]*c&LJ(ET18Miobn*;ITMi\p`G9QT$.b"ICZO'Vk_e[TCeD%mnteC%UYL%i82WNL+PRIQ>-(=o$B3[l>RE5i;2$#Xj!c"+(aab/TjL8je?`!Onq#hHcPrci`XkB5T4"FI9>43f&HKQ&a<68X$b#dCQf!^[.l]@%1bF.$'"+'8bQt2c]f[bD0&r/E3sMD/,JEUT@oK2V8[jd;62KRcRON]BO?si60t8-JXUb0baq/9nH^-KXHM^mKjGf6fbo_?_&.b@-%_N;S][F98>e/p"GOZq:9\LGsM.8lTYU^jk">H>][K$Kf-^%+>!5CVZ%OZm+ErC0>/:53Goh;%;CKYaihiiV).)'chsO1m^BL#3I+%gF@T+O@&iMg")cbi4NQSPU!b`^DFm\lWKkLP$8]D8-'KZ[eLkP9Gj9J],kmI)FiFB=d?@Hk"8`?^-j-m^rE%HT;I&*l^odHQ,E2d%6/U6(s8A@AFHZ:^/Bp1pEuRJ;.8RrfefkP2b>I@8+q5tl!>\NueAAB?;hbBFZc`eXpc;2[UfZD^:rcmDNiRL\d^N5VU1(7/*CuMM%.f]rB)qe2ED))g/SUUa;gffb<(gm),UoCu1[\`)/hL0j(OO@4t=q)X/=E%J??^@tr9*6@a2Agh24?r)3m]HRgC-t&j\c/ZNE75WC%:\+mcPFpR:f8APYFjG1r>e^JD-;QcBZF=Y?)Ee6e^]e$3r##m7)JPRZJ&]F;1D2n/&=\mSf0V6(7SdY`]`(rll(6&2?XBiIAEGmi%r:]fo.pIKShO-K3V5r45e"uT`.e2Y?f)gNUg>k9C^!10?*g<MPcUKD`&2JX%\:#\M91f?s3*%9LjLu%>5%W$o]pE3JjQVBmTlBOh%eNK0X<m1@^c\-;pjR$ul>@:X<`_UMnh"RY+p)-*.]a#>KHeBtT9V-IBJ*:Hs13r`f3tG'\K^mNh[g$p2$fQ:=3;2KaOemErmI'Fq%U^mp+p,^^b8MJGXEK'AAEiYBbDuB;Vnb2)?^-49!l@-Ab5'UAB=%5shiNdgnE7<K%Y89A5Da()ifCccR%t(s^KS3V)BBaa6Y_Gs*%+"=DNIGt#f:H(6;SmV?lfggNfGrrA%>qG%ShZ>7+9X9'>NO0L!rb*#,WEJ"iC8RS*\GXl6kmF`jO07EY4.')mLFnke`OCTZ)K>[Y%E.t;ti!XZSEVs#&E]sNR1p[I[JiRk8R!HJh['N5c*AgFc]TCO47`LdC+7SbpMI="/dHXHbK^rA+6K2P=Cp#\4R8Y$(s2kkDm.AWl%-Yg8s7N;$6RNjuShF"/2#qjQR9oq-.@$WXEdp3-Z#3jUK"k&PaAra5t&tWX0E)2l?D5)FSbH,%sUnt&V_/F(adH6jc]m&.V("2(:%q5Jr[?qF/K[gH:ZK;#Y(N0-T%T$3=gE$I\*.^`s;gqa+BQq`1C6f/;dcP.i#`_/_B[&qCo0guHJOgZ-SK*kNC?"hu=IBMm91'i7:%KH>OT45tEHZrO;Yb3R']8^3IqV9;=k@GRKa<S@M_=k8l\Pq1\;"`FXZJc'n@MkqMC.mX.')DO_@X?>K8om=L7S"TOr7B"'^-p@ds%Q-nO'H9=(1JU6t$'L]NZpN]#;C7\RQLFmr(#b]L6^3J3<5>GbmIU/=6N:m6t?<GXJs5m]8)M:l9?7&TmX$2&G<;^SfOJSu43<,8D%Ls;2p(P$%j&p(\4#8@Be6pmcO0"6??AGUCN`BY0q9C2rYGn)FXg5k`snR>8C;Fct3Ur`<f'gs.2T/^/0TI?N9.YG:!5?D'-B0,n!%=3nttg35tdCI[]4\CE0!+2&/"e:UBnd8pj\Rr/*?]Fj6/cA/'OD71!PS+^&BbC9JVRPW<VSX<shm(lrZ*GuhUXtYe/o_`n!8sUZ&%1<7n-2(*``T(5XH2rf6QOlV-Thd9RYh-n8RSa(J-cLe-7pf^du&]h*+WZHqBCN$j%al;'\,_MbL)-Eo1Mb]]!W%>[6=-iJ$h&_4k%0C#4r#4IFg#$j)agZG9ZBA,3=/7#CFe249B_lS;Mh9P;,4GM&c+o#BQXgC\PA"$Hoc;CX$e`]qNTf!Kf)J#RNMQ^huULE4lW0).Q%DhQHE^:LnF18WT0`"kA)]H:WI;r2.C.t&cQ9i*.X!=N:hn;@```h:,Ge&5WMI;5o,GJ03oYDmO74mJ+SpGf^H8RD[[62Vo"'fe&c%M`uPue=FrbdWR&:&@EVf@N3BXn)T3[Q&Wl:4E.9p$V>C(f7YpEQc_N?/&mPWk.Lt*R(c3MCIspc@\N*#n9/$?e?sI":C6l-%1d)\%R'ugL)He&GZs$I@Q5o<5qfe3*n*W=VO*s9@hdt%`fY5F-P*.1.[Sig>L._d@I@ZghPSM6Qh&\CqksQiP?$e,NISC>jF6W&cT-0UQ%>*@r6J.4ZTU,?3d[p<CrjrIKEC"C370Jf-S]oe1RG6Eq?2=5r7dqZ7\3@75(6p[U=SYqQmi`_((V7=-]XO)jar/dLMArGeJ3OHeP%CfE<8Y9!$?#M[m4.-kO*#E6f&R<i*#X#j">nS7K(:TgkU$?*kNq!QqB5OAQc&Uhh3mZ\VSG/FS4D94=DV-l2fCiklk'Mh4)p65tW%fqnr>&>JnNpYs<'@4r3:c&mQ)jYJ_jq+`l[gRK6:C!%T:boW%/'Nucs=,45tltSH^-:*W,]Y[n,6%,+/&24PT0dXs#hMJ0o'n@iF%WZh+bI3\srg3:9sI,D;Z=/ieNCR.%u17_]"^4NJ3L;oEYa82aDjVN1^T`P>e8JQ-Yp;K)DBf7@=^*Z%cP:%=?l.FjFm)n`-2kBYu%ZR!VnfE'3"W)^jXj[qJITcPF/CE'VJmEqbfIXmnV8??8,^e[/#VT.,8hh[B@B.4ZGfJY1e&X'7ErjsGt]8&rX#d<(R#1WRj7]<V$%QM1Z'r)<rN3I,_V9k"`Y)cTtpLs\5k7-WpAjDWO#@nbR-Y]PS)@N]:Q)SdB"G`>ae<I.RWC!aH>E,.5&Feu-b='EdpLYIP>/bVKq%mW;7]8cBR(a*^TrRjY;rh4go,K=#eS[Z_k.h&Tq:<:r.g%lmGA\^49f?Fau2R_EOKBc@M%=A*s?BCtmq!/i>BU9f(@0uc7Vkh%_7%-GD%l:4+u^,l=n"+4HZ>T/WG!^B%NgBj-QZlVXRFA>"Sd?CubapQ2Q&)lo]Vj&HXm`6NVD11hPFKtrL3F`INIZ0_<P=[g#9@IdB5%I,!Un-^$PfUTB:s3!YL0"Q`W*ZWHDP?/Y'_pJga4"(9gt_OZXaApk4njQ9-#V1`F#>%'\^a?"s[GMiYQC:<>9^;agJ7!)Tj=fHF+%*H%YJ\ZF3V"raVW]1+T7OFXTU"HBj[kZ=hPHgh6TbSP[Q>A8-^#m-k3pQQ"mMU4IGFR6Jr1tj!\^V.6K1Q#H\3/;:Vp2SYi&Y-#g%dTMmo=7$8++,=Q@X01]k1grFtegqg[q^Aag.?`Zk'B"gV\#IR=`WmH0Xu[)j'5@>:nt8((PcPjUhbD>s@(Rgi2"jYom*fG<h%0@u%r9=$:3nss%-ud?q^n-;6$:jR+m6hCEo+Jr$GRFY+@d",9Y.S\,@m4p,?#mj5"9`P]W1T>,%#V:tXYkJg`4sn0l0C".KnmqJi!aCZ%!L*3/G&%A6fpP$mg-X'.!WY;Ak#)1B`1J&f`?'46Bc1*Za$]cO%2@2**b<52NVn,J-k>uP34>o^[4RV"9^h%s3lDs%Ca%RH*`QsL%Lh1)bb?iqc@-]mD[SX5olHN8M2@NMk!7:CV3ZZbT&rfNLL]s;"D"/ojGe0&5#/G$a8/n-Q!#=6(<Nsu\>)pk_G'aj;9@FbUa6#@j%>!3$V!QN0GP=H9<^O827Sg<>^MC$rqnBr2OY^or'1,V_%nRPS9e6cBQdS+heREtW"oR#iI=D;8aJXLbs1U3Mjg"l4"!2+f6VFB#g%40@@)?n9tu]TluMilPd_"59?"P-!>cCC/5'`@-Ba(7T5n7)0hCU.dsk&7lRl[MW8T72BAuMSjs'KcArKT?ZB/5E!.*?f+SF)-:m5%&tuI*#+`Y[S/aTU%(_FWTfmJ\X>B)0m.Kif3pR28X),UXEp0S\kd9#pqrc=/B@&Zoa2t$]cCiWt$gsQQB:V?OE$$H_c8pRfmHur#%%\7`*Pl5]W*'3Bo3cu/)O;p=I$p)cXgR^d1h2lHE@C@l\[Oq6hRqDe6Is3*Y/CN94(Ue29^?g2`j@cJb^&rT12U8eu#dkc="ak(O%ZBs?oNN_:qheBM4T/O#l2KtVcD'jl=C]mVBCO?o5Jd8aqH*H$ZkNoZ2]PY=6B"Dk7B0/]IR?(Rh?kt#)VTcm?k`/5Up2nPX:c5=3%H[Bp/T\<g)#TikTRmGnha'"nLHUeO/M0<['V<]c&]%NP=VVMQh>@::508E#UV.;OFAK1S!Bkt$/?<]_&g(H*Z@U3%u2;L;&JY;(?%#&O$X"K(","m2n_J9Jnde'5uD1*:AuXPQOhHAdDjdd,8M@CX^YS8"/N:+<&L*hV7&`pIhoc=ee6jcAXnBA3NDJ^#mjY[it`[,6bk%,[m:sDj1E[p*uHlJ\A.dh2,G.poKN/YeAA#=>J]@XPS#p"KfmHdk[u)M?uiiY-_%/*Y;ns#@?gZ>Q'mNgU7?9LHN;=oiVBp465pK%c&".k##,T2#cp$JNasRh+6Jt?])^;`Plj&?\n0Hu'?A=`6?[7BW6t>#Qo=FQ(H+04XYNP?5IT_X@T;3Q^aK\8e$u5C^78M6QiU"t%NbRWcMo6]A7ec35bf1pJ@:umT&_aX[m$X@U604_6c49pVe$'6n/aD#idaKO*;5_S(fgD5Z,Na%go+\\$@t-R%ba0/h@W0Bte[Z%A%fO<mPPc^!/O\\'Dk=8EgbC3RZ7p^,WMT$H#QFT1WVU'(FYf4U]8b/)s'BBS/Nd4*Y;%N$TNrbF!G/G*$5A&'9Q.PGC[8+("349B0%QV[HX*3BK;)0WGV?s@65.7q*uA=1ZN;aeWW,^MC"AsHe;0-[`>GIid03"(oAB6RUCQ)-)W6_>Y@>NU$N+u351p#PUJC)%[")0q3[%bI$6+E_&SfHe/7#oc2gFK8>Jl]>K(9g?oOjK5ABbn%K`oeU=ifOh+nKhC]BXP;kd;bdO)92Nr1^D\u]ACi>Y.G.j#OT"8u[h`#Gn%=^G'gOct%?-EVJ#fU6F2-sZF)5onH3URe_pMejaMmF&K@-97WF=]B6T?.bT0VVA[iQ7]TuYAUh_N.sDnX*47'=m+<a2U4'VGl%[W%P[%jM8<mAAm;:AUQqolVD<mk=CV:r#)`l$jo0&.s%u9nsC^H"AS.E*Tq.%&"_\qop5'B-F5s&%_kJM/iTmEM^32D`K*eE):i=&Kb%2;K@aDa'\?2jC]IGMIR*K6'O+YTr>Kff1;9#l/G>ISk%J4*!NT_-G2p=U.Dop0F??jbn-0!b?XRV!a%IF5PEkT#cms')R[ep>P9/%:^Ph1$+Ue2e]qRW/%cFRDXtFJ26oH$i#J1qO.gC8RuR0XDqAZ>bCGt/^U#on/Vg%9;BAM?ZVJHd$psd`+6-%uULZdC=,t0=H3r5V%q8b;<A#@/Jq"h?f3iUCD#Q-d&0RR%DjYU?Ja(cIFS%U"*#7NsW'JKe'4R33h0jd^85#'4BRl(>G4^r$XBkV6X)lGR1('\k8/6K@2%Q+!,XX"mQpO-,S$qKp/>;ul90)6'gS8'"4I:L_Ac8F;u'"KeBMb=DeU%apiHHnej'MJT-/E;HqW7]QDsT[ctMj*c>hJ63e[]'C[f%GbRsU)r)9b.IWR_YSYn(;rLFCfMPT+TKfl-7ut*@H_eNHouh>Ri=:`Lg.m@VD-jbk.\,o8U9=!HUr"!='onjmB,2Sq3BmW>duGp)%SY'_\pnZ^gZ.k-)H@P;GBEtQRKJP')Cjl#MN;t^:VEKb5!$A)Qe/gBXgZ!fC)ncfCfNQ.sfX_'hr&/#+C+M9+Rrp"0PR(92eA+2&%&YM45CRh(X9<KAJ+>a#mnel)4\VFcTZHCdV_Y[p=ZGfR0LV&Y/<$'^k^=$Pq!mT<Xr$0"-Dl!Z:kp^SB=)LQS1++XH#uS36'i094%89VVY;WhN*KH7F_-mcKr5!1^Pi@@V0==.$mGqr$9l^2:T_416kM[V[hXgSO6jqM.%rFVA^[O&h/6(9*Qf4pd!KpQP8b]9t9g'g&K%Z<JPCWK:jn^sH*11/`P+)n[;7C6i9EoiYhXST)9H.8kbu?8P?;_Ya,`d9H=^/D7.@Q0`\6Qm43=SN\Pp2t#^If>fg51Sja\m(KMb%Qm)][XB9:[g0Qq[#8Tkf`7sY0rl^,"H?=_be\gE9?^(9SVfF[<##b%m;)+W7bth3M,HAtN49c"t@(#0Hl]tbg#7K0&o4cg4=;r3L%m%sD\l;#khjO,^IUVo+b>aZ7*fWq.!HCosTHTg(WE^ofE)4mgJcqSOB7c?684ki%;Epdl[>L!i4md%3l6uL2^^*?o-BA,P5Hf&Z-%e_NjGf"2-&1Yp&O9$LLRqqiK.J%X"7SX49%h::?cFPA"Q]4]U[)i*)uS'G[gTL@b!PtbnU94rW9bTYY]7PR2]nT&"qSP_#q!L]!1%/7Y1;[,3s7:<+,uDY9-tl&7lE4X"A!Cc\=_]fh:d9/`?g3fV9_*\!T(.$m]<13/%a3hnZmp0>+;ACDF8g6L@WZ*NUFcFGuF2P!\t%STaJc0s^&&N&Ku"ULqsmOeb4pq!`)\U],>EGB-JrACDFhTAa[dK<j`"6#F;6G`QZ%F5QPUflT;qD!u2O9i1=1[:<jumE;cjZK[<[%=H9.hdhr0O\^a3pVDA;33-mKRd;$eC*r(Aol&9ZIoX!/eZg!Fsa0[?Aa2k,6b,*SAQc$/oN0p<L/aFh<F>bnbNfZtJPY5Y/+5c#j%^ah&gTF%:ZI^.99(W0j:QqPJDK=a/1,sL#5(>-5Yp3h'Q,[#F0Hehb9l!;s%e(1"*2*rd68Y7AZD8WW_-N`X,8Ph+cH8[*bP9aA4%^t.mn43<Zu8U,I"[>fQ[]6lBf87A?'/GR0<*PIn80("V=@.!cfU,<5]gT2tNF"/\PIaQs]3GZXdghG*FZKID>Ia+FoL8ig-+1?O@%SOFll]gOncB7a@V:DPUp40V#92;m,\aXoER\[)rHXR(DlO(h#0ihALr\Om%+C[S"R[pA\.Rmr+qX*3FNW6IDpF1%qf/^NE+F_<6#%Fo)q#d'T&3i*;jBe^e%8+J85];<('U/_:_RQd;\ATDo1RFBeM=3c&@ERW%2iS!=0q_]35$=k,A$VjCpU2f'WX\X?7Cpb=XJ`b.Z,%XnTVQ[I>4R.d2(D2353cWd2hE:edFkTsecRDZ&--Hs8?JI0VEZ+=O,-JNMZ!_:d/qBkBpBcClHo6.+q7ZV9?F41c'.m>84d2mDT]%CZQdu<?l.$IVEYqm@O^kJJD3IH$JI856OI/g)7'!?)F_$k5@>Ag:6V%_MNg"RSU\N)O0J>C"b<U2r-jWhT9oL\1-l[2]+kcH*iOT%LUh+C__,GK3O*_Sd.Y]([/WsHU9Jo8nQr9H#gR>`S0mu4D&cEcDl`O),jomhO)BJM-Sk%u_@(cFs$e2bkBC]RMToRScjb1kI\lQT%GC'e:N>q<Z^UJNU)t#8iEHK7W0esj(^l`NWgG4.mhir>L]HjgFmWNK5iR-L$GtE03Rb[^n].Ncj"ug$ogMaU.H`B*]UiM^</oeLX%q<ZX\@VtS0]-S9E@6_$*GLADY);(=0C,-llOBDDVCR!YhlT&#`cE>PGUGF(oS0K<167C8O-gS=qFu\XI_Pt#qW6U&Q9k/M).DO\H%6nbpJU*%+2_(b3q*7n*Eqdt;]N5c=2Oi5`aFE9%9(#,1s[#kr4Dq_AZ(Xn4fkMXTeW_qHS'rJF'`7,NDF8,XrPq^V7DA&.\VspSC%!ZZVB=3N`dL,^D8Cc@?qQ=F#&LNJP"`)6kZYpD:K_^AC'&FI*^29.T3q(b+4_=5ZpHpYGZ7bF#@Okg`kbVB&:NI(kk+Xk7dj?>cO%`r:t"M[Php$QacQ@t0>/Suo*Wm2GB6nq8Gtf!AA:X"o!X#hKM'iKM^6pjsVnO`$\`f=Hi(3S`sWpXEZEMaB='Am1Hd5!15-nrYEW%`n=TfL;uI-Os`_cFSE#I(Xj1qHoQm#-E"OZ>]b1VC8aQmP7JI#&*dauGd/p:qnb3llXXkLQ?hoUnq7rO9T]rm.t;2beD\FAYc4tI%oLM3JY.4od<CjN#@_sl8=K5gHqMXd9SZc5N,kpcGCRU\=X?T7n,Wrjs`8HRGO6Y"N>oK=&G!0\8?`Z$_IOIo!<hK7JDm`9$T%Eb@%Tc$bb#cVq7>N5@ZA'/2RGl(Ao6(03;/hb^!]gG=j(ASXR9p#GJ9h`DtD=kP^]sMK:ENcd'qmC#D@as#FogCT=@gnl&C#F$tl,MOT%Q>tocOgVOL2As<.bNWn!4.k9`5A"Jr?Wc^,!bETC@\/bTCR6<:!F\:D:0V/N&t>O844;][(Y3\<Pr8h^,EgRGkdR5<kW5K.=^Kb:%[T6NVJE]k$gcm<+gC?qt+07&>Rd5WJhn;2>/mC6COe`^dKCNE?l1T=8Tm3kC.\M'WGfT>`Ytlm.l.Oi2X&W6[q8VFe;c%UDVK!rL%4a$F([(C^"&VEO8`Z=0j\0C;<,@r+5(QYfC".Jq0G^SkkG_C,W6(])J=mpU<oq%:WrSGr]0b0n23Il;E`O=&q+>ECm>'An8\kODt%C9GmOm@Db.gMBs/oVqMgk/]Ht_)?q^SEZV*]UE6kqDo(lDTiX'1()\XN`fX<K2.0JC`k-C5BT9\O-n52LF!>g\6C.[@^Z0['\eIT%n+q)8Pht4Va(h+8VMW;b,]2\YGV49jEt3#2j(a`8p*h#D$E2MLL8g]SF0<_c!>"H[9qI(%nf`*3@<`(Dm/B;d+u\Z5B%L2dgNr\a%/f`Vl^Q8=_;TIi8I8#Yi9n@/W$ZC?Hb';Se$d`c$TRKE**XQ:6VOl58)J1,#VB+F6!JJ/$Ihn]ks3,K`<BF1Sa9&`oiRh6KgG946%-RtuLbftR?Aj(7WNI$t%qdokD]#5ctE$NEGPT>P7W2H(/mu[ce:6IM9U0Fh>oPCm,k<83[.GmlZZL*&hTD#^pJ*KoqUSu'"0BLr;%,MOq*jhl.McZ/_jH79q>8_i\;]KIn/1Q'$is&)&(qiQq_.A,Gn.hB.S:D6`Y7+J$8-:HD=[Sh`PDY6*2fhh0E^S>=[*UR[A_s[3H%2GKgr[)[&g_gD?`UI#/F<dWZgVisa/Xa^/=%AghkcT3Od3YUE@?9aVp&o[G!3u_qdHi7bPo"k(s=mlbr7BR-3f?Zo5f+IHD_jObA%iEY'M*-eZZFji8;YMASQ5O2PPp:::Ci*JY6"rZl+h>LYE_eubDeU3F)rN(45R@FG_jc80h,Lb]uQ.L6,]meOe%^#:AiEeb7>Q&_-%J]dUk5O5;OaY)eJn+AKj25T*nGOU$.8'#tbJ$5J%'\*"M\C]&Q5t/2Vqk/<7X:o4U1/dkXf?\\-7Cq#FG<<_!p\J`EK2^[m-gajd%4$?$Ff?[Wg3HV]Fhg>;1f4eb3!md#>^XpeX_mMBIFoQge2#1>p\,'s3F1(2EIb"plDIbj$?9cW<eqT?8N-kN)=,2"0O7.Tt4LFkQ%*M3"5I&l/mfc8$+qH5H`S+!fAm9W"m:EJ]3++CDcorW\`a\(<r5JuGDcFn\Xlco93"T.'AB76i<!Vc-OYXuat5/)X[dueSA43Du!%>NaEm:2edtf5I"VpiIG:Y^?=,OtAN"qT0UB#N"boMjND)If!ZPmI',(b1MaKqH:?hYJ4JZJ!><YNfj(IrE_^8H*<"[lR,')GrPSK%p\O9ckK;^h^\sATj]h[?pEQ_?Q$1GuZF\T4ifpd?me&B`A"jpH@E%rQf?\c<dmd#Fc[5W7dc7(V3+bD<.HRrr.M'8FDmt#R^A%J<%'\C@,IY[82<8["S/J/J^6/HJQqH5n7nk.nmp\J#?`$uPuY^?>MDtPpUa7d*rccQR250PbLos<u%*-SNX[O:aWqH7F^mVoA%[;ji^%`G,3U5AT:%H:i.U1;%$:C/GA%Z!H#;nY&$GMEX[.,1u=a6G$nGdr[QRDnO]!/aDt11jH30]fF[QHgd"VjFn;SHm&bf'9H+b''`l6%IKpJ/#]k8uHtue3ijfBE[H*`TWO<KDC70/=8&AOWjA)8pO#O=KN!V&MXs<O\cVrs>8cR>ag%1'dHKB50\GO@hdlWaSCHe>qm`DP5%oC-+FOMf="CVS^#A69d^-Qfg)<PFkphS,;*+.D8bqUteX)c,4baNaRT>Om'Oh*SpOr=o.3s"jfAcUHbP]+WmnY=B/f1Y9a=T1@\T%fiQo%>T5d.P(=Qjk4e5?#04H)`X9R_Wo<N`Q#9i+^-3"%#LP*=&Q]j%CHZ]+l#_AIPj5_bJhXnG$1"dRBB]`Zp0kjE@]!`![huVK%gqLQVEM9`uUA,;g$Hl<.'TU<sDlAc9IR3e+RH9<Sk&N?I13Y`TY(4Ib#^Z'VpVtFGP0rDnq[E8A6?^B(\fPdj!Md*_QEEHhBDusr%VfA"n:\4!DZW-IB1p8R-an$Gu+=DqrDL*mhijJAr+;OuqH,<jB>f-7F82<ls]Eb=1/ni:(5s9TZgf$p`'tP&f]JZlL9sHls5$Z&i%%Nm`P.U%5Ds#ss<.mFtD7f/<qOXb!0fhEdifl#X.b07nC+;qf(if[sK_noX>[#A0\jduTC4KQr18uD7EL#9ND2X"IghX^=s=aX"N%38B4-01*P$R2#sjh]rfu9L;^f4:DjbhJW\RpbTE)+p?d-#4lk!Ts*/t@0BWZmAD!^)'U90W"8h0*6ZXDcVsoC7&Ms!s+5hRK&ZkC%q&oN'T3Y]LE*_?oQ2#aQNj@o<9)s'8eV"-`fn]L@YC9;epZ2X!kHO5KRiKS3_WhB$b>7p7Tm@82]Dds7h"ji?a\qN%-^P!5AVV4+%0>3,GntV9R:2,h7?s,lS$*d\9-7o+WAYqr5T+m%9Is9)?mfL!kImLqM3po<aqf2mo`=)-i\I7Fi"/Z(Wg_&c&G]HW`URra__=J%k%VC=poM$l^hRM-T%D$A<cb/^;g[^<ma(;b9]+K0#'>mr'.n(BPfE2FCB.30)J0Qj^'h5h9?NTbmRNWYSDJL)P=bDSVI/MNT9oJRM8%)g_$Z/5Q)5Rk@R$T3eJOcb-^1<?E;I'LALAlet6@_IHF,3f5Lr6D*`Zb;mO*?^#^7Y_.61I05YV:>;"8\peop_k&@SH<p%[22X[2%0asfRS:qNH_^J`Cl;#/@*kg<6hi"^'HlZAXSgh(+;'5&]\,7Wm-pDaqYUt:6/^J1$$SA>-9D<Jc<[f"k+".Id?;6M\cA'2m75)Hc%Mb5n5>[/GS_le?G\tR!gh:F1"50S;mP9F<JI&OkHDcVsc#Y:4%IY%>$L1-^$_9^^ZHlA-:q^V$,NfdXiXXC]2'E!gdZ**>^1o#<g%m0q:<I`:.K\csI)6QbG.GS1Mg*Ys,JIY!dWB05cq(lSKakZ*j>q#et<aIq]H!]>a/X\t<4(h9]QA<PgM;:g?<9EFB>0AP8Aa\P]E%*#X-bo.'^&M*I44+-YIkpo967;T@'aQ;Tp!3B-0-A\ai>()F4*p*N')Np9H'"@XUoMF&2m%?#XP9-WkaY85U-fO^sT2`F')3X7:,%`M)KJ>RiT.'p>8K.\:dVb#G(bO/hB.W"bg/E$Kr/E9ffkqi+t@;^BrH_)d(C.Ol[#b$:9/n>tRF(%efc]$,KaHUXPFC(RX1V[#Lp%^F14ng;J1tE.NteB2E2'Pj]tAL\;<n(ngLk"LO7SZ*a8k(X"-Q!SGLK=TjHtcHdl$mu\e/(W2kno_4Gk!M'k%q&=Bs7YL3\A2't/%dB)ni$_#h6P:*(,2Jq><6;QNl-Z.SP=6Z'3CE=p^-QWO[rX$SQDIs0R[srT$$:HgVdNA?/k-uUqX^-h9kDCm!c6\5V?'_$D<N+<`%a)JU2AjVdnBFa"rOI-T=+=>1Z9_?G<Qj)i^.C7qIh-2He@Js)jR@lXW,H,+(&I[ghS_#BtTQaDfXX0g0+qjr[Q0X@?`.SF9HT@5T%kC$?u"m*5_a`e]/!-k`R,T+W(5+EZ%EP+IIR6[lG2%'W])`'MDM#Nc42`80&(*uTb.Ts+[J:2l6&GUS6")%\Yb4rs1Z1f1L*dmj[%9cDq=1n,W;,.Uc2W-mbWUrX,.fWNK7=Tc:_TY9MoR\(ZG<(9al3G'@d(OHSqUYC*2X8HM3=tY"!T`@n^jaJ,fX2q+QKH5obOXmV=%/knX1C!a1aO\2D:PfE]&C,1u<pt^6-._4>)Yi.duS`N`S6BOl=5(L(D)EgMAM)*iPbNJE>[.Sg(n=cVHjEb`j)=uOE0oK*.9JrGC%`[jECaI!u.a"ldUA8K!mn$CSmP)NOr:s%?R_ptZNYs"Rb-=a5_)7-'SL.-92f[i1s!4@4+!q9tWniiT5.oL(UK5?Z/WA)kNG%o<,%jF'M1hi:[YC("0T^#JVOCQ[#OO8n>e@Slmk.4Rc4Z1EE>"n2rE?Qdg,b`(k2V3tRuc5!=J6i`g*7g;JY%%c&036^G/N8=`dp9PqK%D`E=rX*h,:'r)-""p49h)$cbkc4W+5/-j+c.51<"b9?Cg/Ll>P;qR?lhn:AtBZD&hm]DWrR@1Pq4`Iq$e5XtMb[j%bL[:QH/u8f,%ORdqE5I[hl#M0RL!I^7TjeN-(;MF4<4SQ%$l'JHcX"fqJ6.H&Pk0eAhMR+D'LK>0QoRTm=]`o#88bA4\C:i%nOrIO-Fr,"g!+d,W%.mdt2o>kEr0n9B6kG*PZW)A[A@1NDB^LuJ;)hI\BcA=AaBK9Z/GH#.K02>BK![%c$8`N`D@EaL[jTBTeo,M3a]o2L3B]a#M(WGUI%CAe1ZV+[AkND1g#/W!4.R2$3d,DBM:'ON/+QV<XRXG:`!f>C7J\0_\hclj]<D,I=kQZ(S@PlbU3W8,Ic>*Sl+'[I&Be)Pm=,)UW[%6]h9#[1Dt(s+M.S55f[TPIq+K^.?"/9AbJ$"9N]j(`W2T@L0)2JY/Khq!R3sOM8Dl1,XL&F&gE);<u>c<]tbQd9RaNqmcHEUUHiR%QQcjLfT^Mhb&O60P]^LDjWklj2J!ns!a(HqS$J&JTq0*U@T3;rE?p?b/0'X='@$_L1>tVX(3`79f2H"S$ffWZjpX<!N_&T,,hoZa%S.g.]`W'Sic3NYWI^X9oS<7'_E.+:5Z2@unjIPM]OP!'.*[q+ef#=kZH=^%hmn,t5SS(0NV+LLTrj'Rn&l0BF1^r%]+'lU6X*e<$%jpGWG(G=V4F4(g$)M:O%T4(f/SSG`f2]^Ha,&SfB3t0``;&"T,-g1^)bksS1KKcnkr/i=\]%%m9fJ8fl>]=[ea]=VK9VQq))!9u,%d>+IcqFmPL=4%'e)MOY2]!\?u_Bj)]s,@*f'XZf1isIu_(BO&e*LA_74+Ze"^lPiQPbT1je`ZBRhftT0Kk>P4Y.u0MKSJ!Y;b7,,%asPJk;KTK^Z(uU;o86&8kOJpLdc"q#da]L<OQE_n%aVFC:s30ejs8_UJo%5i["@?FN9HLYP*,_pKV>W8_t&_cJZ>$p9[p*uPs_`6%,s=fp<V?tVO@]tg!/nuD67jHGikh]#DsR/!oUr':aLWOJ/=@Dt.2u*Q:GqPQVjNuu^q_kT2l2t=-VJR`C7]rh^Ii>MR5;8%DA3/n%ie^jNE?.qDs(fA/<#W.u2N+0Mc4^&f-_Ook_8d,dlsR&*]ZdT96i#$E5&$_T)YIW+D;_&O@1`m1q)&->q^d+L>Wk;GS0h2ZM7OJ*%Rpoe%m8M.os3lD7#bJrI5K#IR)O9^5<$BjW:Oa(mimgK#Q('pG]:+6>^B7'ICIa$&=C+7fAb#UnpM[e^<1-PK2tZRVfQ%a7=WdXo%4*eWm'X56,lifNH/H8D1@H@CoLsj7"qBgB&Ih]et'"_2.Fr39a,j;W=$L<BGm$nlA;`Rg@*i60)d$7PRk9qgj!mad*\jN!f2Hsi2%!<?pY99P`8=fWF5@A'@BWu7Qm]hk2!T\aKM>uPnMI9/!&205Wr1K`XfI`3W=2A_'Y:]8^tD_At#]jKtW5=)n"ob*CP(M\]m8notX%0!!2LFLqXLgYFjh;7kX[F1fLeH*XS3Z1jrH$)/jQlC>r*ZO5aKn)Ie*JC[qT93eP8m/[=kEa+g1]_DLLZpbK,Gj/rP,E>d^TM$P3%7?\X+PHZXhLglu6%XO*W@f7e3X'I%%bL62n#$GSL.rYB,$_bo;RM/0oE6E5=p(<rRNr%Ok7,W2keHT8ma1/GH7^F`Qmutk2=fXP3%jA+dDRKq)Z%r+a>l;N<@Nf,q0J\p)?;7/%<9g6t9<N21GbZ.5<Q(%SmX&9H%nq?&Y$4)5JM+)M/3h8`8"u5hO[OEBI7=-[artSni%+o4>"638476+Dsu-si:#8qC8q#ij@BAX>l0;%eHJ9#Gp7@(O6L=.O:\2b720'$pHhUm0sP\GYi.Z6Fsfmu:D%*,[j]+do7db^):f%H8,OsS.&o(G,#fR'an=N\hC;g/^fJ,E4C=MkMa%kKQ'K""E_#;os0tb9Z;Ua_XCaC,33;=_ud=8ZYaR+E(+H,i4\))7`<<PR+9?P%c`?%L>g/BI(U]uJ$,WSB@0;&ZH5lnP+LD+M7cOOBMqo!($gpT=E`AQR9@!X`#b)<>V"sC7,B=&!3)tep<2`?'!9,cE'o8O/`osiL%gHiTlI40oh2,#];!lD*."L1LS*&@blTg925Cnj)>dQ,at)iNkj`'H]n!@T,q349n7dKV4eOb(Nd*X!d??r!!G[6,m<$^uAR^JYU!%%FNO.Ca%C<fTIti<^l@g*J`A^7-HlrO+^Lg[bln%fG5$$`\p'nLGhMrFWBiJRR-=/K='T)"+oAng<.gd)_eBa1^KKdXT:]O[>n^Y%m;dfaYusOlK?bZ>LC+b22Nik*Mepo_PTAr,B[;`KOX\/M>j>ufdloJacRs2O)GRQF>I*ec<PL![fNYX9(B(,s@rKJT@XZs)fuMs4%%6*6_DTY0:Q>E@\2`>4hHV:da\(#9;[^RPeRS+UeS_!5K[_'Z92FPHBfFGBr(&OWXL^gh#93\\$\W,7?pRfuO@s0b>;mj,pGa/oD%Er:R[.OA8P;D8$CGa/oD6MBL_MH9uBBGK*.2WIf\s33OO%Q@W\l5"#"o`C;om04k2I^NLt$F+K?+,sp@hB-'COA>^<!rNRX`fj/\%8iWeP%/bptdTYPe7<P/scWL>`O_uElXP!&N24i-?_B3Ct(3OM0m;(:@EoOZ9:cIe6!c!NDW!sgDi2Tcn:tTn%c5cV_o/HHC3s[55%ho%g:A:R1"^lJitndUKUG"/#]cBgK,3J;>,UGmWA'MX9Q,+4)u.R.B1Qq7o^:diC^Vs',/j4!NKQ6nlA+72_*W29_*hjUS%W&_R3%O,fWcC(a?;&k"]O`FpV>$e$gk"ouOb#3[+1Pba]aJ:`ZAEE"G+B,E!ILsolK'dW$'/r2;\\]+W^7"u"'MVobI"KXtF.?[#?ie\q5%$5`gePm["Raf)'HBN(.Paj_^B9UJM(NeT2978Yh#lOYmI_1ENK?qes91^XWM$%bW"8JK4_7"W3kMT0):j5DD293%&Z'/>V3V'o*$%\D9_'!B?8GD$(%dV?BK0j8r!rc&h3O<&g1;P-BIq7qkdb"'/8)/7KuS#o#+U2[P?&WWLBM:_8<i8;%XJd-:\LKUN.'kd]8fTST9R%BUWNeni2n&E+kESb[TQ<V$<eV)G?_a;(<VWFXYbsTHI"g^.^::=t[TrLO2s"-Q7um.SNG8Oe?1C9=QAk#+^V:`2Fq2Ldr+fJ($,O%&0k_?-DD2(U&YQ4.nC:>@/q!&VCA1t@[j0f(_?jSm"H:B:Eg^t?,n3=;D,cG8Ko\9+TQ9IV1_q^N?s^7;Mgbl,gr&(&u$M2;$<8`%ad@-Ze.irCG`;`57\[af%"S?)(/\a%0VT,sY`ti5Uf[^75Tp,d!k)DfR\Cu1.RiGV:]L]QC7(t-BHYV<N`8D%,U:-fMMPfmW<OoZ%6U?_>+<807RS`9C;%X[AWjrBB@W>!D=B,?`@lUt(N#G$Y7o^6J`RbZ/H"9Lf`<$GqR7PbHd1l2?;ACX>QN=,o+S*?\ImG+B?TUdk%Le*\j`$gK=0a[I`OcYK/JQ<GA^Z.T1J^PW"jH9Y1<r<.+JWr^BWLsh2^cNeYV9u*=$5hI$=9=OS30rV,LkghFn),B\$In,L&;aA7%F-*Ia=g=M+VD&mCblf?"W"WPFr(Y*B,T?.!6panH_ClXTO\-`7!K\_tq08EeBa?s-n0O_bW.__l$'Z>sWLucc$:j2%W6S75+VZ]2%Ti^%ofM[2<=A.<!(f5*"\c+l`5k\k[Lg`S#-44`LL't6*+_a1nO?G?;VA!&qM*r&;9ir)WYq^da6NtSB;@uAp&<4\C[1!/Y<1HpG%0IWVd7f=)NTI<Zj!C'E^5`Q1BOW4R(#*!DMJg(V]J9d8-9lWah8Z2W?!b;FF<5=/"8M,KiI5?h:6;Wo"p.G!]JkTRfd!VSi,(Z1O%,\%I@9JeB.&<k#YN1.q_!.'&c56.`+#C9H$(i4Af1fc%L9Z?Kd9L]'\+&kX)Z(r9a/4/_k-inoF?l(%sA<OGF7`ONk82qTB0j62u%U*;?6V_kT.EJdUj_!muu#-1[qogf@DK!p;>6mdc?a<_6(hLYoE1a'dbE'Z%pa9<+`OS)^<-5TBr;*7=J?3:@&fErKMYf-a)H]/a!%!:PK!-Y*R^\0r,P.]n4)'LOA;"9m-Q<,i..:,&r_RQI_Z)Frm@:d?9tRHrdT4GbRZ_[-ssi4_P62r3gtf[EAsJ\&W)90a6.0QF@q%P6@[3!Gk.<]#Y6AE2Dg=CIiD4SNnp^j?jpi7Pb)`a5/_M0p+la)\g7_D!QWC#NSlb#KnVKLar,'J06YRUgTAmMdj%cb$b<&ek&1]%!u=_c;[2fQq#_<B%9tXO(Qgt5CT8StWiM&>nV%.^%]F=IT.-omJ=r[1=e]OSOVe6Q+rJjGTR]e;XLbu.[-D[o@b'!taS<o.--[SX%<tpZgU7uVfB#q/I%@$sp$NAqg^2:p!*QdRSnfRQu8_jo*1jte+4@7IJ+V"PV'$XA@-oicMf<.G?/J*Dm7uXt&Q-,Hc=OU\?_O$'t%fY4^V#0ipUSI+XaZG,tqo9;j7GV)9ORGV4HklJk%:0!gk7WK7,RjEU!:r`/'=2%d0RX/DMq>/t:Ul.SJ3MR(Y5(.^L1HL23l#^>6%]oEl^Ccb9a\K2Z-CM*gaB)3j/[o+qG90+YG#^j9QL`$h3".8hCl/huHC/]8@3ecJ7QO'"U%R^cTZSefi3tY3f$7?i\Vi'EJ.mYjc%:\t,CSX$-@,\EF8EM.T\p@r6@p/<0(eoEr=*(cY+K_7Ku]h31iXbL(i";LO04;\)V1I32@7+_O)rUmj*86>%G_eNBYGc[iuY2YNO%"I[gsFJ"R@^mtZQdX1$bhTK%&;P/FNRTE\b!UR6-f`YPbo,NWV-:>'W3+8:m]^V;`U^?^&GoWb8>H&q'784,qBOe*'A]E9%<G<4"%mXB7KfVm`LY6g()Ak6YB!8[u7$AQ-P8#tU"b.VDi+eWW<8%,2@p'5"2<(h0YjHh#uZkG>pGi9f3Da[,mHkL"fChG*+FRgH>eH'WT%X]sqLpC>2Lf?YqIg)g+Z:I6j'!8?OHf7!c^[N.^#3PmNSs&TaI*\,ML!'9L\q$t%C<&[F3klB>&M/36Jf#F@"mhoRZN3G7)7;MJ[%4)`3EH1\`arTC(DD'q2A!:<Z`L&h]dR\h?QfL-^hAoi(hc?>QppnY!%rrNb8;&\6ZPO8>dgf%K7T'ZM`k9r&"!8M9K,FpD9<nJC?%`EJs)#G?'L8dAHS:Hp?_+0=J,OiOe_q^eX^V-I64-F5]4kXo_Na._;/*HiC&,<is%o)W#qOUf`]%-4V\ne7_Rp%3r2/H*;P(``9Q%R8tsN]`ad:"?@`XaCA,kGl[=ZI=;<@PWeg3?4U^eeC"XF@!2T&>_14#7>61bOLdJZ:T,<D7Y'(6mDSYD%uTlLmboiKChH!!CltR3%k@+AJncX7l9#MjAGr$]ZA<<X(;Sb9]hW8G_^')%EcIq-5*,.mgJ53`e`Pe5hR<Y8V3oNe`Ke&71UJPE[kH\\\h#ural-MJ6B`5af%EQcqk%_D:4'6b/;/g.Gu8EDG_ok`1[(4UQ/f.EHVHZ(jLqhE#HAf&(>V>)i48Zi@Drs,E[ZnqjJ#sd#q[IpG*iT4b?OmN]b&&JgD%?k#_[9b7J9KO$uHGS9?OUY5itKMuJSg!14Wf:fe`2$%?mChFO]qT)M!KAR*uDK+5Z8W1G0>9'0SmS,JFc.Z@p5)V^(LC3Yoq'Kl+%!6UZ>SfS!EN:u2o.;^AH'^;UZi*M+f\MD=+b)4neNJc4mh`HEoli)MpQTaF!U,^*XF7f<:b#N!/]^'Ao]us;3??H!C0F8HE`U+9)%f!_<Md;\AkV\,]sY0U@SXq-6ifO/r>;Ka@F!XH+%e$e3F<#8hI[LIGR-H4[s*.W41D)_O]H>LJ>BG@J6gkHd#U#IUmkOYXM:X$j;%gk"lWqW"&j?YLJ)J_5]M&@^U.0Z:Y<gMdD-`0cO$33TT(_grQ/ce*tn+L^5A`,3!d*%f">j'>:BAN[E[%`BqLrs#?<9.Im]BRIiY%*$?+?[LJQ(1?&<.[IZ<3J_I[WgMh\_S?WM.TXD-9LYAgJ?a0$8[+L'o/QhC8]5S>1fIQF-\M2Jk='oYX/ciBgkE,)JNN+e(mD;/t%U>NmAgo4Qq^Td+B*Is_6gP&:NmD:ko]5S!o$V:1)BYYN2q]o(#eSh[-R*6oA&F?R.$("/HCr-3$6A'W(mmBkD29+m[]8*Ec;kW*5%4LB;4Z=@A?I0S1lE@?d1%#Hk#K[&BC_S\n^B@&R2%>pQ/FJC1g*FRBc#U_m^'SjP!aUjqMKY='[GShq!r/pf$*#3cG?2,e@?BUu`%T^38n^^R.lclpW$eDE(3A2;fiA<)N@Ui2e1Cq:[#@BAdg]H$.,F/3VF[q\Sc8q8<bUdHOmP8P""M\Ge5`!R$UA=g?2glK\u5U1RQ%OC%;a\f">bUdLj0-&AZW]%0P.3k-uLdtG*d]a2`?LM&\6d;O^()7[%R#)+-Z6R(Om;"q5$!'krXAgP-7*pHN8gKU.BpW77iLJT%M%9*kIO!o-@A&YPBX&Y[qWZn_Aa?A,JLCY<k,G/=P&6cfne$6C.#Sr'P;UR#L3+OfqU0-Y8Y>uCM"XS\\E*m3(g<rdA$5[/)+AigoY%iG-DmR[G^Xk&g=9X^6idq,J8DPabQ7aK@T:3ci*Emo7f=q`Up5B+D^.S83B%E7pPRA4uplWbLn<?ZV&fq^u>6%9DM$9T.`uFf,1!%]0cSpi$(MT`.?S.FiZJfSVlfpHV(Jn^:I*YqMk;cD$SmJfYMaPG0le;fCuCA^4hRhqDIjcqPjh/>-TN)J:?#`S*1?X.Mu^Nha3$t%*?Eb2$Kg,-d.oVMK<@.VU1-AsX$O1N%OttS<8Y/Cj^%K^HY2a5rE+$WgtDK(A5f\)oA]hYWe3^0*uRo<LI:%u8._=6:=u'Y<d+7%%]Ro,>E$u.D%#Oogi8NraJ9P.eGn*fre(&f<CWuauG4f\AAj?f(LVbaiO;OiifZ'[&*lIb0T!NPJj!F]2S8H;q$je:H>n.@`\s+>?%92=,?(b[ue-LbuNDj8TB\5P:q]U;n?:c%FNO3*!*0XEQ]Iak-n+pR,+5RjCj"prX,^O``U!?c@?o>@8FQFaMYq&(*/@:ZKLDu0Nm%&T)YX(efEOJCq,;LER)1CtH'=c_V-<lcbh:B'-m'8#eq3IN)#'34)0N&ThGAD?ZhL"[44dNm;9k?A(]]oPBN!Tg:X=.%GAbBbauN%Ls7WjekR_WGZ/$$m*$CX8?scP73%`Q$#&$<KhQNj-Ud3"cLE(Xb.V$^^:ne1p8)9h?FB^0n/Q4k(VK0+;_X$$Er@NrL.Jnb-,;AZ%l$HZ("7?FHmOl5F:d]&QO^/B$LlrMJ9_D?Jf*"h9jh.23O8uW'pdbB=lNHGJ"T[+m[^3%P`#?pD(;%WlO3/SAgCm\%\Q1`qeU8CO%*9oIeC4n*)D52%N4rIP68os3md=s+!NO:<7NALuC)OHJYHPm,Yf$lfV`WESZ]heeD?OTPSM/:n]+I`@qSG49qB[4g<)+%g<?[Ot<%feJ.ZE+oTWCd!gd?cLIJ:S;KBj.hf2cS*>/\>r;k8&H/Zo!bdh&E4Cb4t#7SFkm?`bONpZ=bT]+I5*?NW.8%'VY6/]pl[n]UZ/BI%9iV]2k1?W\NVsWcPj-STZUq$hT/+l`1h>IS@(8?"W2Q0,T\bp;e/'`i9*'#6?"Z8oYm:\90T+h&C!r&=_:<++&oY>]iWOiNe.fEr%i;a6uX7A3'';G7a"OOR9/GdY]WRL,\%"DOR^=d9/)+oTfJM3-4pZDCC9/k&>.`+/("d8'hJiB[8Ugo:$8n^/7dC<ou^lfti0>9`"%rg'O,,:\[i3br>5F:]oHH5GcR3W3Q]KcT'</.W>\%'OYpQ%I(]6>b:M.85!!/+eCq'&W&]F>-n5WM3-k,VA>'k)#s5\?7pdoCoL4%3k[q3U0X.4GI8jH<i/4c+HiqF?RS3i#oF`?8LW/n%*A?g!&:X)r;luJeppPQ/KO^fh]RZCNh3rtTO+%*!`\PA.&e+&&rj[4]?Xf<%-WS'aQrFN17V'u&#2o]`Wo;1;7+0eA5?ia(K(#0=R?3C0T+XbB[&&9i>q3"sa9I9kh*Eur;)HBGRu!"b$">.;'@"`=V`X+"@Eb-P%dbjZ4S27W]O),'"8\[o4@h"RUErr%_Q"]di/N@qoX^:ETCdI,;7QB3,=MHR]]CtOsZ25K\I=R\a'_qMgY%0DiPp&F.::V[?L^#.s%A4W$B=uj2T:BAPF7>TqgfYgCFW(j%=4]bRK\^O9'b/0gIk%%!s&gQajeZtAmd"Jg4/:\k#+_Qtr-NP"3(MDh:lhj[J>N\2VjQX1p%)D2rq8gr4C6*/s400p:pH$?Rj>s.>943N@Zfi)hB$nQG1),O&OTKJ5I,[<7E+U9S]92F<(`J7qbZTb[sH`B1iRrqDDN`^*HIXUZm%*]/n>5fMC*+@Mi>cH]Z9W^JRcC;Cg88g)\_K<P?n3-QjTi`JcD%B<'LRf:R[rB4;O>6$'cQ<Q-WP't^SLJs'+^9u'g<:U-nf)Z]J%:P$gF*tWrq'[j9D(A=bhiX$TiTf7_GM@`T'3*p[b!dmRIX@,+g2j8eB6,eAm:kb\lMkS]l")Esd5$F/@;[k7g)D7LCJd`*5MuZ+O%(2F-obQ,)#!T6m#9dT;S+9nI(e'1cKm!>Xo,i'[GbK1T11O4^cb"Zt<bYm+P3ZF)op;^-medLe+gAsc<3^<mk/iP2<c4%g8A;#Au%=lF(:[M#-97jj\VHI;hQmm/o6./`DC\8672e90YoE5K<>Af@0K]$!j$dt-^U#5R16.R*@/TJSR3>:OW/rlNRg$lbZ?Uqu#OND6/\%eU=mILF2`Je`<s.aT/G"1_1^5+uV>:S]b*Q`g)WVK/"*ZK2Y*3>5eXFBr8`25[pZY4ubj)cC4%pet+u`]:)fDam/Ir,(deP;1p[@%E_94A8RJP6ClFn6(!!"B9C;D&H@sPkWG\(2j[U#d^o)j5(-)!s@MC4,&'rfD6kb4UOMXSEOOu$Pa.^58X__`f]kCA[R@MG^7=(?/%#ZNA2ADU9i7@PF&+ToG(Ap:8)9YWRqCSS`o!Bm$/8;H:=aR+3s_?#`*14YYMJK"QcqP6urJ_X$51L=*k5dFHu\=k67k;T;IDh(k@%+VOV(['DCFRB18SKI?@'^+rp$huWL;K7-9bBBB!<]/"P9o6,Z/j6<0-c&g#Fb63V7QaFAceS.-SKJ;b:ISsCDAR:X]91K2:0BoCD%*#\KhE"\]uNdeSBGRBDViX-/FI8e4mObSHKm:VC]l8W!T8pgYXm'>lKreQ[C>J>B(dU9IrjpS)hU%anN_9>:or>DdD<#No-[4Ae$%3s#ENL[p9mAXR7AH'@IS=ru@S)*%@8.0YnB+kH'_$-D%jRT<V&*ZF$$)6LVr.H08RSm.NaoaLOMRpni\Sj>V??1?']J48R!2@9T>%Md#T!lH,;"i]OrOH=sICg@^Yr!ja0sP8g,kbg[\tC3TM?eZieq>H0H(2JfLo$I36.WbJg'U7M94>XgdKdntk%o<Jo0$7g?lk\7YB%BM$Fo"&PVg5r99,Ut)0qRB;3`3e)D5#(0#oFC/N<`:3!IEit.<qBOB^^nun/T]@cO&6hH3d7c.GJ?SFs+j1X;X_c?6P'!j[Ld?\N%XC^"SDT'LAi)>4kO88^XB5dF<A4GD7kO"+D!n<_t.%,u2'!k?tqTuRCdtgGP0d!5($ODN!,MN5O'+KRu#M1I^B-g<:IMakR*D5ut%&F65[Uf!;Fo;doZ,06al7g0Lr;!sS8!%"&>.BU18,$B#=OMsgKKV/K]d:i]gk]GE<ZH_TNSP:jmS!gR#4j.s/1%_\KN6sA.FL1Q[%?nJN3FQb);cBWd*3-9hYY^?G4TL^Im"&T($1P@62kcW,dp+72G7'ck)D_RK:VO7jkn:32++kb]52gnkJP#0NAm/R5P-.M>9os%3o%a9='HmU+2s,ssnn<M55FJY*JkpI6uaVZiuLs3>YGGWt#&\T7q$1t:Xg[Au>65\VJ:D)0JHL&)+/NQ!+V$k/BRB0_DFS7OU6!6DF8%"3C-h%R=CAkuZHlT[$rtTuTa;JqH[d!FOa=`K3Bd,gMm]BoO\ao!V&V+k`Un;"(b].E#qug)f@T6>o#q/[_jp)JD#8hqkqcYTJCK%%C;rM,j'\T3W7Cl/8VG4ET$/0]/7P)N&@kL-Grff9_M,\(dhcT8r1\B83`sm!'#IpAup84Z9HN8#:_f\E!;V1-Cb)'iWc5CSfsN0%N3Ff<<d<%C&9iAcLXn9I05'(cPg/VY]#:eBdhcJ^^HNXS/-6Jq<d(sP+a*jCCusTRj^o/E"uNa1VF;S?&?96Fk_IG3EHlQ3#>5Ya%n8t-"$Di?n=.6t56.JJ/3X#(K@t[8:S&A[kqLFWV_qA(6NIL8/#dZ-7LP[+YM$^S/e-(;W#kIoia:QTb&/"e4pOZ79MqqiCRKl90%rtol_f>r4i3\EE%V6oUF4koNk#R35.AZr:OD!)E`WPQ`u`+^,1!^m1,;)Y&N!LOstdl]r<[uCI7+Fn@Y,:$@b)5Q,V$39_]6pG*E%9_N^r=WjGCcbY]eTBH;4hp,YdW,*IYoHJD?ojMTr%)Pr<,#.[$3%NK#OV32g.Uj&$i"L]!&dK7XJ+*Yd9[rXkbsYCR:>'U:J3"4_%oBG+,OULD1>eQuNH[QQ?o]O?FPN_43iFE0Lk*E1$L9,gK3;`"64_$Z'Zd**dP+q`8:qtIc#_8AWU`!!AVElYk.mjqN"@+1bUsh!`%KZkF:1q-do&d)_*?qVDC>;$Pl!2p<>*1'$d.:u-KT2+![4terr`DuSE7Au)o7bSgo@-'AN%&fW`:rI?b8=JLjNAjnHo4F9:K[CEN%JCKD86F,e[jECY^Nm"*V"4%OT>E0Vij1#*]=<>5kpDW:kli-"K=n;fI81YjR!*6Wt^WV.2VZnI51de!0)I^*2=`grD=$Q%&!PJaR%\"jj@4P!,(,H[iB,&-RB#TKF)UPW/n;Ga!5+fhL;bPU:`N<!%i#r(XWBbmgrEA9)B1_%a+IO('G%.WuI;:aa;F&9\A6NE.LF,+CW%/To)`n>-`7,CQj06rU`J)//]K49jWN7\hdZ&>poa9-0VBG%&mXelM6Z&glP@"uYNa!#4MM/b[\eKp1_nb%$RrloaB9AJ>B`;UfR[%L1_-9eF#uU?PYEfA-+#bf0u*u!-/**V_dTLWuA"MQ`BAJ=KqH>lL_I9C@U[Igk`aL283IXGor*W.rY6\\%AI3!=&t_m/U]LP)O=F%hT4\&"]/Ws0[ik=qVE%'RF&?LBs+>MDVVgc97t;)$&>\['7a+1eO9&e%.qG$bsVgRn7]FF%d(2m@96_+'F;M>=a0OWI!_KLdI`DT%3=5ZW*).()"ea4*J(.-YC3dJ6NmBm]l`Jp!\ilH)fq&=#FL9+Q,CnT[j7.5Ch0D\f`qJJE`+9Y9HL([S(e_Yb15=H2S0=;h'4#W'%Q#1j@Y&:D1T"P^pf+J_tN%;$o):0,STX9Sg8/=93*!8hA:TN^!p.F.d'a57TJt29q3!$TRq(=:@\SO5Xp78SJXkHe'IeVnp-J-2E%.[.$9*MDa6\h7_]Sm($0;!f\OG)ouemZ+:l4t*kc9C6q!`h"OM2aa=:!gn3,2#tk$L-c;0E8`)`q*h75R^-?YlN0Ml990XRrjt*b%"bckZYD`9Fd0R5^>B0`Fn30j2N]<F^F6#%'G\"F.7p3BOJ>Q\Prk%FR%e]QjT!&'a%u3R2K_i<#hp/p@qJ1IOlL0)>V#FD"=Z_dD%qNI"YD@7_?[UD*A0:e6&*,M]9TKqI9k\Mmr3&O(396/gm*tNm'%f//a*d-r37%dP$2?;Mfa6j_kih;U="Kb=\b:#b+Ql%,7/2Bsa%H4_Vad:lQ2U7at'E3:9^S^JVQHRLtsL?YXP=,0`Ubc3ijXkp:"1VGR(;@bNCgj%Xc8DjLHTn.Y+SB_?3R\9`'Cf%<dQ#<JP5bP+4%)?!H`]>WVDTZlco"B8F$WPd=%d-oX[BjjR?cq6s[!GX#qfOHse5T$m1lkZ$GJ5]9?dm:Y_mt-G]5Ti(dj4T`);X&k$*obZ5TO(jC%9:?@KYe4^c`:it4D<:lea2%cf(@rtrBCV?kA6\?fF1*`>&BAkmLpjh<#O`;5q#Fb[>ZVX2!C#V"U<a(i\<mf@A^'<+<B-aQ`*CcN%MQ=@/m(skdIHb^C)C3,HCpfK4E(h'06=Z,PhHpfWQrH[J#oE+rV8<E2HrNt9?NVcJCFm^?;&RmU.deK\L#-\I2BOdSaZJa6I)49-%4<iaP?u#*t2:>AVW<cICAV79=TO-_JMp_dUj`Y;QD<Xj0GTH3%KugBM@pkE,\!G@.kQW/@IstqlC;oEC<8eYV3@,<XI27`_=L\Fn%]%l:YOKr!<%*rOKWL-EF'<'^=IICR@`LMd*5p#^9=Z;qMl^7?uqu*OrqLMh>_>f]O=-dSc4f[q*=Slh.Rp=;+/s6%&%Fb8bDclc3%OhZt`r_FTp_*/(5m?`Mgdc@@Lc',.NTc<F0nIR5kqY_jFm)kR_a<o439UK-VPg.[:B4.&df_(]*m?._uiQgH)*rAF]#u=Z+&,$DP%_hgOdT(L1Y`p(9[#MYBD[nDHdjA:]Tn+Bt^Y0"aW!]Ik:`a+Kq@`E<XPVmS[GODTc=0M'1o?;o0,lOH2MdCSA3P?8Og;J&O-\%6p%&1e:2343RX.P)oQPKl1gn\GG`aFGp(NcJ-uk5J*6*?d%#3A#;F=-8jTAs3%8WuRpI-3l/jVK20;82mcZ]!u0r9Gp^.;[3MKZc9k"%!Q9^d^l^=c^b,cuQb.l)1:u<RIW:QF-3]6a^>O9=%XdeYomY`e%BbebQ[I7j`<D>?C=&g/VLV;#S@PddUEfqD&s)SX2_f`%58\7S%[GhJLSic@ZTCU7`EgB!O,=!D>KmSdShTAYTA5Y=^qGP.GaYpBfi.<Ckat+]1!.C=nX.0J\I;LO$FgX!"o=]?ET'mPC":5ZtZ:/O7%=pfIA_0ZS8e*.:s1'!"e?@EpPi7cp,1mlcZ5!L$#lklpbE%*5q2p1rd"J@.#;bl[a\8+&uAI"A)-F+Ybn!s^h+D$`HTsIK4O\Q[2%<lTR\E]X)2B"L3.JFjZ(F4@qaMd$5uj^.VlHWj&:r:"63^EZoV>ZF^Cq[mB3f)C4.n^jQ7#9#J/hZW;!"-Bh'^3'LKN82(b#U5d$%':^5;=1%j&:!B(R]V[o=DuoAG7J,@:p)kmsdZl?J&dp`$F6m,1(aQ;F]H309#`3@25@l<I!3cj6\%Nf.&\8SX5QXuFDG!RL,f=#Y%,eSYla\"M1TOhd#iPpGZ+4AnYcZh?ZGn:J$V=u;c*[Tf7>LosLHJW;:`$*rpFr!R$RVIrK:Tl-fleV?1WON]js1kQ=jfK:^09DDW%5^ff"X[!2lTbTV]R\S;.aB5&WEl\P+&&%I?4g&/,>3:5"\sqoo3qeFDk7_7p7Y4=CFi[cqKY<p[G2c7qDe\2@Ajc>d4]g[O9YpE*%<-iQnb/5JIPOUfYUCRVf9n.TW3:'<IR','thb.;[O:Z/k`:06]\9`f5=*;%B]XmB0mJ<#Cr;\^UO_0eR`(\e`.9l%m8ui^)PrHiY%r(,jRBJ2]^,nCX%oKmomR(1?F]fWd&%.7B]XtnMT:>&\"AZ5FP,9?-N/QXs]/lkIS<E)^IM-!A8HKh-#T%%WXXgV3YdY!OYL0MQ`%;[p3PmRJm7Of<N@V#WksE/,MoHJW3!B2@r&>$&87<nf[u/RRjKPAO,E[=+r0FKirki)`9_?mmnGrlN\j.j_1%\7'A+Qhelc*U;oU%`6tV%K=iO',c^^lS2bd,2)nY!dWWcY=G,ZqI9CH]D:Y;/<!@oYq6KZ9%]Gb(OD:Gg_l9HE`St64#p1sc0]:>V6=(BQ&s[l\d,SB`%js>r-ajSN3M&@Kt=TH\L$%QZ9grY]ZF0[(4S1Fu@P9gg<P9gr]:6njJF0ZXIS1Fu0km_>p$2NogTKK;q>hCo+SoWntp[ZDCXkOt5%C%JSHP^G"gid.;/I1U/0C#mDE!,4.YXA3U=&cd+o3nXY'M^:Zt$oqkAO;#&+`=%`LW,8)S@NB30mu_7(\X8:$"6s?@mp:J;4)R5S%)@7P!o&Hd5gb2u'fJ!:X25%Eb:I"V8SXFl?#*d]P"GmPLmO]kP!3QHPasdPJQq?QdT\a`JKPRa;R8Va\-A.JAOrtL6dL@pHfsu;8%4boGOa5A\Xa>Vgj-gLra[qbrSnFXh.".UiYEZ_Pk4HF\Zd`NeYd?!?A^g6S619C\@0q)h_WN:jVgGbJfaL6(X.&g&M0K%"G/AH_V%kFL+S5sWT<nlsm+bOSlm2N)AWL)?ms7,$b#;!q_(D4G?6CjcosOK'qa<VL>_4mgJ*-;Edkq\ZR7o5tMI\bL'4`R8!"8.5orMfHpg%\S'.*$*^s"5rKN,Li[P[bdf\JDKBgId&(8@bi3k1&2=WVDHfh$hQ>'o<Min\M+^^!Q'5TlcdSEOB+aSC5TVsd.LOk'OJ&I(";k9:%n>Tr&'lLrtX\_c"]MBU[01NCe^^$bVBj2A^9'\fq2uno?%hU<RN@_,=)HkXKaJR2j_?&<3O<@aF*3tjG$/60_Ku_>DdRu*C#ro5)%0<p3SV0-'glfmd7\CWiYQhTE5XfH9I^(Os?;br1,cQVnJ)A-$l=\M^Hn&`a@j,52oM"h+//+#"$<6\hY#gRpDQtAT'VK*22(O<c<%J+<'Lj=gbeXqCY1gdWqu<+KB58EMVF2=GK<\\f-U]]7A04%%Cb3O0D1;nOGRWAEj!_gSq7Qo^>=Bok>K606P"/C%'B.61(!Rn!.I%IY2G#Fhi47c+d`Z0f_qDLl3LC%TDDH4%tW\a^GMt=73;[_c5^$7lX1:0^^VPBdSV7h![JV%#urKg';u]UMo]]mD<Y<A1h[eDmbq@%Xpj;Igl(c8^[EP#OFYXfLXM?PTOo!jQ]e_NEQP7cBuM#mBX_79#"%&;,EG7>371:OH=p(&<t_=\[$.T;4^)fnZ*\Oc_Qs#.-=_[,%%DYqo`2\C;rN@Sjhb$BVcF#>47=`\phU=\29.1oFh[nHjmqE9K#sdHAB0@81$1^1Ea3Ni@ckduaH^Z#A8Gm0aC>l^l*^b+^!B>E?%b2"Be8sj.a#AD5igM$P+^X4r-2Jo:SNO3o"@$c!$f+[Fqlb5)Z#=f%hJ?SEOb)c,LI$?MUaPoP\Mjl?-,<PP7B<UMjX&#2-2LqCc%]2-Q/qin\G"1f-k5Z:BaG%B&<[Ng^:@7usX@TVPN,0L7BSK5O+b[n55FcNF08=ed+4*`4T\?hQUVhT\TW]q9Vc7#qB$g:W0[[`24%:UHNlHCeONA*WHuM)tr7S(pB'_KDGG?7Jc\44Xos`cg^\4QDsie:?0'NlB*s)',t&4)f]0aLe_Gq=8Fi_ub^$l5m6VTg4QH#H0d/%\OY)OE4egF@7!cqEg99$,mV!o,XC\;i(8G.@tW2`:6;^0kk]h:ZI:eA.]77pW8Hp'Xd]JN)On^D9L;bn[nA;m8`(=kNAW-90VG:%%hp5<NPQ@F)J<Z*YefH\:<;4oafkO;E3@Sf$NBp]n!@aM'D?rSPcLSTan2:#IHuglPF$$kQJJU_gEu*Vk<.FTn]AA%+Rg*DJ"ABkl%%a$^4/T#rt[.aqPad*7/l1P'Cdmp-tRtgCEp!@dh?ee=>Z<I`&:YPq"D5N7XRHFTr$\WD8U6KN1f6>N%?#V;W@jQ*2X6NY1g=MkE%3_f);FD.ZaRGMjM>cY>cP3+tf+3j=oeeJRr9WdX/d)Jo\!H%[bWVU6m<.=o>I`+hu8=iOLWrK[&&hqf,!T[&`V!E8Y8fUB.3HWLf%/b#=:aeMeI_DF+L\UN3^I0%6=]2$lQ*D"sBaRjr.(d$5p0.6#_345#G"&r;[S>c.V6+@piWVq@e89#9^'j(9lF%Pa(Il6<-e:*O2%7'EZFDaJHOh^"W>IRq(b8<TqMi21d?b"R41/,oC*_q"%rqM6+0UGplu&O?(2)E6(r\Y',9;XE#5jH8Bq1h6WP":9$]Um^EkkmPs1%:(=g'dCMN)&bbV3>?6-m!n\r4lr223Q1ji4!kNGT!<>,pm=[Q>fMD@b]((=3cMGV5]")-8+\CR)4)`_QN'!TBBph%'*hkaXl?$)g%f9,2@BWE-0Y`R6+cq*">l5Ie0HJMA1,^:%j6P<*<=cGq'P"P;:nSuuU%JCDH'c@XnR2eP'\,jnWKh\QZ'f_Sf/H+!e%jG0^a[VhO%i=lU&E/FeOigug?Vk(,))5Z'0^*_l6d`N&u-:i[Q%N?UgD.PXSXYL4Bb&2<rn',L($gFa=4m^KPD;FnjoTpi7#$<:m]85gM"\/&@%^+,j#ama-q_O+B29E@`-V@P#+rC@`ak&eQ8V\:9K:ch6G1K'X(rd7[=23ED=U,;!W&/emf>m$-B\"9sCUa!MFK/'HJ$SOa^Ud;UC%5l`fL&ca%M=_+1MaL+<Xf2i(fFD7h[&aik1/[3(qpl*:-7:%Dug2gCB[*q_LT;W&%_-5B\WGkDr)0`q&R/4OMPca2o*JH7m4I7qS%kpE(SqnX;&!%K3+FrOu<b'a61715d%5fBR^ML<X4bIR\VB9hnPJ:!:r(N!HF?%8Ri\7H@m!tTesJl(H8K%O*dRLCtmgd%Ks38ce;%plnIb,>fW4)5BF&NE*uNYQMm5K-9;f%lcPeY$cq1=X5WT$<Mb"=D*=Y8+*t1fe*RY!'n+3YL(;U=Z!_$MiuY2GZ.@*3L"9G+P-%:%=(%o"DE@</%D/3C9Ju0_?);2O"`@CZH31ZIdMnDrQln0<#eMLdn0C<L)6jE<Jd7_T_;FB]5<r_jDB*e_bKP7(a*T2?LDdP5VMI1P%2#In>c)j%F86NJ6arg`'OD,+VIK4TniU\9]BBH<ca.R]6Gh*/XG\8lM0#/jl8!)L!'m^ITfuUM9Um;i-,Fj;(2f0QbB8-$urZ.0&%MhJ<&U>gJgVWTO?*Lj58*N7a+pkrqI)dc9P'Rc;jYG1P3#(0"4o,.et)``7uTn53AlC@np!@o'b9a$6t)WR_ejMoZ'\KD'iKYp`_%>PstJ=5hdfL.#3G5!W2B&Jf]rU)/!NL="NWcnLU8K*_eP41DILKl5SShN=?Arre.qY4<tYJ>W5rII`:p5HXIij?6o[HF@SFm(,<s%J7^^b<s"JU8+16X)lT'.8ig!l8V$E]O_X>p>eC%I25k)%5eT906%H?^>9ZJq)jBu]=&OGLiFRnY>*JNMi^g]OZ<$^rM_@36)i_S#%!K\Pe[iUUVJ54#m`EJlWR>m`@XkI*+XS(N$[/tX\`!\Fb>LuLYS8\OOZ$.Un\I>_\7bAYpKe)ZcSNdl19uA_%7Yale$0!0V>N=+I%IY?sCrV/4O,#De!4KH=$+q[G5$UEBZ]$>h`_kC1T1*g+G_R=hofs0acNFU?:e?0OsMAcl6.O'_mHd\orVVZ/$X.hsY^C3u>#8e[;%DZK'IXGTG"7*cUdNBVQ7A8?=I#@RjZ<HKXG00p;E&U*\Ii?:Cao<kn%MA^C_g\-o=Z%DP`>?Vd!H^Hr-Z,BfU;l'+oWbhH`/HTV8%A;sR%9[q=L%&c=P+:ji6OB<cb0PutP\/?TlMIr)4'LmpHAsC)0-%!jJ?3"XLUZ<,4o.5S7-&AC`F"j2dS"W*:,c0$:$,gGTKNo:c%X[G2(Uk3HHW`Z?'c'&ha\a78@iSC8T-c-2:8]majFW'2s2Sq@DH/W1pGSS+AnRd$SmY2/77bZu58(8SOJ:o-P8K&AD=>NH@DIJO7%BK_[ghoq2kW&aG*dk)'#k=\_IQT#iWU\c^Tr]PT-@LQc=rWH?l&'0*IK%TskY'0dmg,jd`co]!.WUh(iSU]Ab<7[&r^4t/7oraV9%qj0d>H+(\e&(1=h@/W;4*rlUV7h*>hQ(r:?!P%rA56epMj#*E$T*#V8$*XG<:`9<?@Ri;mhNPA6eGlY&WW-0I4I7qSkpF285X741%&u$QF7TOkW'^]DG`0U[ZM:f.;-h'E`!#l&ZrS<+s_,0J61u;=41I328$o'$?kh0KN(L+-LfR,]E4)oI001']:dBd*s<U#/MTQ50'%jI.7>^7;E!a9rNp2I,rX*kmq@)<Dsng+V`.W7RTgS[QAdLEd8;D=W@s[0qD"$e/DB`Ppa`Cmn/A,B&C5;7n[paF,ED$\05%FNu^L%Mk(_h2(g^?[.9W@a;0]k)7E`MY'r=$kPGs-njKM#r:R`B\GJ>c0Q-;JJraYj$H-[5=C*-No$T3eF3<`A#<La`q"i(Y`q-Q(AYad7%JuGa(BL$E\=sUK;ZFfM7XN!.:12ui.jnDeeh`?c^N#>R2:OtiJQ>SJQ@W:tS"R,W)-k2pSaXlS-D4^@9@s2[tSh#ca;-kPOaj18Y%q!WkL@)L'Y1lN'cAf+rpW"g@CbWC:kP(.m9@N:9r1*k<qJ;4`cYAZm(00DZ=8heO0>V0M:D`18n<#Q7#NKBjWc7rSG7qX-g#k[u5%#R'cR@/s99@$#]@@+sW-JB<C_-u,(lMKHO70EBr\R"k>AP1;u^XcN>"p9\3_TGEJRWNWB^$cWLB(qf@"S^dIL_6ilI_#UFF7Z.EP%i6?k!mp>@%[K.4o^#%):9[C'@of=-t*!$@rk9A]bQN?dF--6"1)%u[J,"r5I.bsrJnp&+Z-f.K,E83$V]6VG7&5IcPoc+=R?A?D%%f5GQgRpQ\?Fm,9$mm+@`<OV17Mrl^c?+8Y:nE]b%pKdALNDH=\?dAcI6TJV)4XX]&4"i#[HDjN:4aiM6]L.b$XMUsWr-Ipe#Wj(*%H5R:/*WYT;k1Aq.3q:+kf.FAUr-A>g5f*AE?08b]rHeG)c!]tk4$Zru9B`]L1PbCjW*f!Y]F`i4BtQIJrH\raIM+BM*f*c&Rm&nJ%FGjMTrHbD9V*dqk$#.klk9DDQHLHIn,OP?(rj_IlbP^lhs7q0C_`rSKqu?BYr`5\Ar9#l1nar/QS2F#njNb(TE/dTKA&a-ZQJT,,%S.-`qX1@sV4iskWPUJ%4_pV@p--"e+^gtI.4%V]dW<bkm&gZCXHu"FhBId*n&QJs]9>*q&AZ[7"jW;f%\Lb:fFs.9];["%;m<kQB%WbHC;IpePmr0E9C'_*Y,^K'dV!43%u3[;`R-0]2"Jk27>mptU4/5&&L%5Cm&"VV&4#YEu%Lr-3f.B3iXB8*9@SO@%Fe`$(Gk#fYo%)kp=b-``C3<b#X&\&m=e#l3g\;))a8/g[]_M9.6K@^9O#8J/.W'!M`*l:ZJCJa9_-SE-ff&/39i17U^tF;??64P&:?+sik7KZbA2%7Q/"`HjRfHXQe4D$o&nS"W,Tk'Cp[*g=ta`,K^Ri#_q3X@;0Pim[^6_KU?bON>-=c^!)in1`]MKI:-!-&[6?k@>IoM$!85*=qMc/%g?!rR&K`i%daMO$,?c[sT[hU+]N%.sXB@H_XBCjLAf5'#0FCk$7iQJ-N-8>o;S]l3;RE59Bn4dVEa+`dHo0!WTm^A*d$S;,@%/=j%.&110H>>ibQHp@N0265YD62IDo"f,B#J1F=RjtMoa(/T\_nN@+UN;D@@kps#-OV5.PJsm%BFm"=I?<9^$XDaj@e;OrFKJ[D4<654%,!KQd"e-+*N0lETe-d_m$TnI='*V+.1(:Ek-j?g9><?l[6<IDGPEseS`FUV/Go<=X1Y/Ke]MOr^=3J=^C+B<X7L=rs*L)(Sn_&TN%W\h#?h_qi8*]CGXNSB.U_/j/O'C\HlK;X`kR&6(cljK#E;6Y/,@>NIN-s/(Yg0k#b5Q8o_BT,0uO+7/E\KRJp*]uFV1BVSXaLNK7%El'R(6O`.<DD52AT-&+%"_V6XGl\M4U$!;>@M'+,1HJH\ek9`4qL##R[D+J;TA'<aRM/G[rkhCZoV$iLrS)l>J4m)KAX;VB16Q1D%V,/<Y#U1(_]`!qRA+l(?7N/aUZuRbJP+Q-Sh+ooH3!BEM:-$C&-g4,Nn^I;@q.SHb+$9s3*-hjro[X6i6`_[Ws$^#2Bl)4FIO&I_%Y*%<<_0H9`M&V>QcsWiANf#:THLEo!7W=#[hkZD3VgecYq1=8"-cr+dke"lK8nf=(Nke'NnqB2@HI;o#AR:%e:QA#UV114FXe\n"%FHd@CCLIpOQB,WcjIdZ:*Yha)bb@g16m>K)F1siULm%YDa,QJcr4$1rh1<4h'T'[#/98jnln4pp.&Zn!B0sO(o#cbVW<GjR$_GMj%la?.b*V@fUMkB_7%'&Ddrg`UoB0#SU')0@X0X)Y,7%PJqLg6g76a^rhWmd5dVu?>[UsrkhLc%R=,!IX*Emj&%5r-kdW6cZ-3q4N!%Q\<S3eK7QXUi@uEQ`B:GQ_GY,Dj!T1mdldfW;Kd7FsK/$)!m!=q4l,IAQ_H@Y<MBZ(qL20=^LP@[ji>9_b\UrmMfG%PIf4`5$(!U%V`A%on<jV'6c!q[a)R%J:?W`sa1ZNrJEU<aqGb!YMk6j*<3DE&Lre-#nc]M^<4Q/-Tn&!_S1K)'FRf9[+XasBYQD`BB]Q*9:I#C2%4d7;:C#X]aC?5Q.3YCW1V+l>B7]pEeNf!M0`H]%=a$Oh4IO6toE4H$6!7Ru>j-FelVe)Z,2bp/h^6-V#mn59"_qQ#a4m^p0fTDu6%iS%N=p]9gBXulDdBt1e9AIh:+08'Q9(U%M->A&9NGb0VEMCuPd.u]\PFuYZf#2W1uL88Ak`7%[k,m/^V;t*@[ChViS)P0.5SLCNj%:J35+hU335Y=H>e;EDhf&u0b\7o`_9RgE,M4L*Z9`B5.N=-u[hmUai1e*kFAc,@6sV".'s\dkdi(NU96Ob\m%9Q_$\4R<:JMD+eF%9^9^]jY]S=[QkbF]30A]Y,+?I-D"P;Gp:<;Lceu3H#UDFe$QKJ.PusgdoJK<iWtQ#T/H,F$jR=^?I\j,E(k"MlK_sLSojpN;RNd"%Q;l:Foe]'pIg)P]4R$(8HYEK.fURskj(.PK,;gC?G\Zi3$Si>d97*-KC$^e^5RJ5-H#f'DA]iZrAo%8/A*T=WL:Hl?Ju?#8YAY$i%<<:p/c7!rnqBlib?.P+$QJDg_(ZRf%:ZGmaE>CV;%1i&!9&hPY>Fs<:d4=P8jq@oa55`2)ZQ,XTLRf5KOM7]!%pX+Fddj7RPt"&+%ZA+_`N2DG'$[';B@99C8&&L9_'u?>u/TW0$BpYnG>-V-uV!:_(\7)3p2fP/i[,#*pOJ@Y#*k[;O,n?hp-O$AI7^#'NMG"F2\<%MZ%MCnf"X^g#S>O8nc^:F6KEV^Df[]6=]@\t5'oieFdg7&5U/+3s^Ko[j2qCJo#emK\mM_A*U.InhC0X9X]a-2g9(='"mp"^\%Y=^Z;%/nJ^KZW0UN3@!bg*d?bX/dd,em*_dK29j*KW"A%uGmd&oGfsi"oS'?fMpJ3XF4BGcg_rIp?Qb?l0;OpOp35V,4d_h+6I`]^L<D-g%O.=.pLr`E%Uo/9<66*Z<ic^A+BfS*+c/5@3=i3XSp+Ic]\8SmlKkhOSH4)*%@R6#LG?T_S&>XKf[;aD!.ks/;Li-IOXD<'=)n/f7%/^3=0gEb]--*L%\_N;nBW$a127X4se$t3jRg;$Hs?g,4?_fHKH)cjjkV@/UnOU^rq+s4miJG'/p,#,0?fAW3[g<33)Yn#eKP!q:]%(Cfi?^5j:?M#YrErp_psqr8dulc64/qVr+dlJLIuo_3k3n%\kqs*k!khu2BO+9(aOJ,A9ps5boKrQj*aJ,/m"?[qr;^]4)r:Oi64%^\mdY^]3cobE"mejnHOhbFeh*qiAMkO$EYO+=E(qreE`9rI=TtO8f_p/ad`~>%AI9_PrivateDataEnd